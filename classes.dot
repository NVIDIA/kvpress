digraph "classes" {
rankdir=BT
charset="utf-8"
"kvpress.presses.adakv_press.AdaKVPress" [color="black", fontcolor="black", label=<{AdaKVPress|alpha_safeguard : float<br ALIGN="LEFT"/>compression_ratio<br ALIGN="LEFT"/>scorer<br ALIGN="LEFT"/>|compress(module, hidden_states, keys, values, attentions, kwargs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kvpress.presses.base_press.BasePress" [color="black", fontcolor="black", label=<{BasePress|<br ALIGN="LEFT"/>|<I>compress</I>(module: nn.Module, hidden_states: torch.Tensor, keys: torch.Tensor, values: torch.Tensor, attentions: torch.Tensor, kwargs: dict): tuple[torch.Tensor, torch.Tensor]<br ALIGN="LEFT"/>forward_hook(module: nn.Module, input: list[torch.Tensor], kwargs: dict, output: list)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kvpress.presses.composed_press.ComposedPress" [color="black", fontcolor="black", label=<{ComposedPress|compression_ratio : NoneType, float<br ALIGN="LEFT"/>presses : list[BasePress]<br ALIGN="LEFT"/>|forward_hook(module, input, kwargs, output)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kvpress.presses.expected_attention_press.ExpectedAttentionPress" [color="black", fontcolor="black", label=<{ExpectedAttentionPress|compression_ratio : float<br ALIGN="LEFT"/>n_future_positions : int<br ALIGN="LEFT"/>n_sink : int<br ALIGN="LEFT"/>use_covariance : bool<br ALIGN="LEFT"/>use_vnorm : bool<br ALIGN="LEFT"/>|get_query_statistics(module: nn.Module, hidden_states: torch.Tensor)<br ALIGN="LEFT"/>score(module: nn.Module, hidden_states: torch.Tensor, keys: torch.Tensor, values: torch.Tensor, attentions: torch.Tensor, kwargs): torch.Tensor<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kvpress.pipeline.KVPressTextGenerationPipeline" [color="black", fontcolor="black", label=<{KVPressTextGenerationPipeline|<br ALIGN="LEFT"/>|generate_answer(question_ids: torch.Tensor, cache: Cache, context_length: int, max_new_tokens: int): str<br ALIGN="LEFT"/>output_attentions(press: BasePress)<br ALIGN="LEFT"/>postprocess(model_outputs, single_question)<br ALIGN="LEFT"/>preprocess(context: str, questions: list[str], answer_prefix: str, max_context_length: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kvpress.presses.key_rerotation_press.KeyRerotationPress" [color="black", fontcolor="black", label=<{KeyRerotationPress|press<br ALIGN="LEFT"/>|compress(module: nn.Module, hidden_states: torch.Tensor, keys: torch.Tensor, values: torch.Tensor, attentions: torch.Tensor, kwargs: dict): tuple[torch.Tensor, torch.Tensor]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kvpress.presses.knorm_press.KnormPress" [color="black", fontcolor="black", label=<{KnormPress|<br ALIGN="LEFT"/>|score(module: nn.Module, hidden_states: torch.Tensor, keys: torch.Tensor, values: torch.Tensor, attentions: torch.Tensor, kwargs): torch.Tensor<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kvpress.presses.observed_attention_press.ObservedAttentionPress" [color="black", fontcolor="black", label=<{ObservedAttentionPress|compression_ratio : float<br ALIGN="LEFT"/>output_attentions : bool<br ALIGN="LEFT"/>|forward_hook(module: nn.Module, input: list[torch.Tensor], kwargs: dict, output: list)<br ALIGN="LEFT"/>score(module: nn.Module, hidden_states: torch.Tensor, keys: torch.Tensor, values: torch.Tensor, attentions: torch.Tensor, kwargs): torch.Tensor<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kvpress.presses.per_layer_compression_press.PerLayerCompressionPress" [color="black", fontcolor="black", label=<{PerLayerCompressionPress|compression_ratio<br ALIGN="LEFT"/>compression_ratios : List[float]<br ALIGN="LEFT"/>press<br ALIGN="LEFT"/>|forward_hook(module: nn.Module, input: list[torch.Tensor], kwargs: dict, output: list)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kvpress.presses.random_press.RandomPress" [color="black", fontcolor="black", label=<{RandomPress|compression_ratio : float<br ALIGN="LEFT"/>seed : Optional[int]<br ALIGN="LEFT"/>|score(module: nn.Module, hidden_states: torch.Tensor, keys: torch.Tensor, values: torch.Tensor, attentions: torch.Tensor, kwargs): torch.Tensor<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kvpress.presses.scorer_press.ScorerPress" [color="black", fontcolor="black", label=<{ScorerPress|compression_ratio : float<br ALIGN="LEFT"/>|compress(module: nn.Module, hidden_states: torch.Tensor, keys: torch.Tensor, values: torch.Tensor, attentions: torch.Tensor, kwargs: dict): tuple[torch.Tensor, torch.Tensor]<br ALIGN="LEFT"/><I>score</I>(module: nn.Module, hidden_states: torch.Tensor, keys: torch.Tensor, values: torch.Tensor, attentions: torch.Tensor, kwargs): torch.Tensor<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kvpress.presses.simlayerkv_press.SimLayerKVPress" [color="black", fontcolor="black", label=<{SimLayerKVPress|compression_ratio<br ALIGN="LEFT"/>compression_ratios : list<br ALIGN="LEFT"/>lazy_threshold : float<br ALIGN="LEFT"/>n_initial : int<br ALIGN="LEFT"/>n_last : int<br ALIGN="LEFT"/>n_recent : int<br ALIGN="LEFT"/>|compress(module: nn.Module, hidden_states: torch.Tensor, keys: torch.Tensor, values: torch.Tensor, attentions: torch.Tensor, kwargs: dict): tuple[torch.Tensor, torch.Tensor]<br ALIGN="LEFT"/>is_lazy(module: nn.Module, hidden_states: torch.Tensor, keys: torch.Tensor, position_embeddings: torch.Tensor): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kvpress.presses.snapkv_press.SnapKVPress" [color="black", fontcolor="black", label=<{SnapKVPress|compression_ratio : float<br ALIGN="LEFT"/>kernel_size : int<br ALIGN="LEFT"/>window_size : int<br ALIGN="LEFT"/>|compute_window_attention(module, hidden_states, keys, window_size, position_embeddings)<br ALIGN="LEFT"/>score(module: nn.Module, hidden_states: torch.Tensor, keys: torch.Tensor, values: torch.Tensor, attentions: torch.Tensor, kwargs): torch.Tensor<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kvpress.presses.streaming_llm_press.StreamingLLMPress" [color="black", fontcolor="black", label=<{StreamingLLMPress|compression_ratio : float<br ALIGN="LEFT"/>n_sink : int<br ALIGN="LEFT"/>|score(module: nn.Module, hidden_states: torch.Tensor, keys: torch.Tensor, values: torch.Tensor, attentions: torch.Tensor, kwargs): torch.Tensor<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kvpress.presses.tova_press.TOVAPress" [color="black", fontcolor="black", label=<{TOVAPress|compression_ratio : float<br ALIGN="LEFT"/>|score(module: nn.Module, hidden_states: torch.Tensor, keys: torch.Tensor, values: torch.Tensor, attentions: torch.Tensor, kwargs): torch.Tensor<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kvpress.presses.think_press.ThinKPress" [color="black", fontcolor="black", label=<{ThinKPress|compression_ratio<br ALIGN="LEFT"/>key_channel_compression_ratio : float<br ALIGN="LEFT"/>window_size : int<br ALIGN="LEFT"/>|compress(module: nn.Module, hidden_states: torch.Tensor, keys: torch.Tensor, values: torch.Tensor, attentions: torch.Tensor, kwargs: dict): tuple[torch.Tensor, torch.Tensor]<br ALIGN="LEFT"/>compute_window_queries(module, hidden_states, position_embeddings)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"kvpress.presses.adakv_press.AdaKVPress" -> "kvpress.presses.base_press.BasePress" [arrowhead="empty", arrowtail="none"];
"kvpress.presses.composed_press.ComposedPress" -> "kvpress.presses.base_press.BasePress" [arrowhead="empty", arrowtail="none"];
"kvpress.presses.expected_attention_press.ExpectedAttentionPress" -> "kvpress.presses.scorer_press.ScorerPress" [arrowhead="empty", arrowtail="none"];
"kvpress.presses.key_rerotation_press.KeyRerotationPress" -> "kvpress.presses.base_press.BasePress" [arrowhead="empty", arrowtail="none"];
"kvpress.presses.knorm_press.KnormPress" -> "kvpress.presses.scorer_press.ScorerPress" [arrowhead="empty", arrowtail="none"];
"kvpress.presses.observed_attention_press.ObservedAttentionPress" -> "kvpress.presses.scorer_press.ScorerPress" [arrowhead="empty", arrowtail="none"];
"kvpress.presses.per_layer_compression_press.PerLayerCompressionPress" -> "kvpress.presses.base_press.BasePress" [arrowhead="empty", arrowtail="none"];
"kvpress.presses.random_press.RandomPress" -> "kvpress.presses.scorer_press.ScorerPress" [arrowhead="empty", arrowtail="none"];
"kvpress.presses.scorer_press.ScorerPress" -> "kvpress.presses.base_press.BasePress" [arrowhead="empty", arrowtail="none"];
"kvpress.presses.simlayerkv_press.SimLayerKVPress" -> "kvpress.presses.base_press.BasePress" [arrowhead="empty", arrowtail="none"];
"kvpress.presses.snapkv_press.SnapKVPress" -> "kvpress.presses.scorer_press.ScorerPress" [arrowhead="empty", arrowtail="none"];
"kvpress.presses.streaming_llm_press.StreamingLLMPress" -> "kvpress.presses.scorer_press.ScorerPress" [arrowhead="empty", arrowtail="none"];
"kvpress.presses.think_press.ThinKPress" -> "kvpress.presses.base_press.BasePress" [arrowhead="empty", arrowtail="none"];
"kvpress.presses.tova_press.TOVAPress" -> "kvpress.presses.scorer_press.ScorerPress" [arrowhead="empty", arrowtail="none"];
"kvpress.presses.scorer_press.ScorerPress" -> "kvpress.presses.adakv_press.AdaKVPress" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="scorer", style="solid"];
"kvpress.presses.scorer_press.ScorerPress" -> "kvpress.presses.key_rerotation_press.KeyRerotationPress" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="press", style="solid"];
"kvpress.presses.scorer_press.ScorerPress" -> "kvpress.presses.per_layer_compression_press.PerLayerCompressionPress" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="press", style="solid"];
}
