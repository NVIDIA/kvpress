digraph "packages" {
rankdir=BT
charset="utf-8"
"torch" [color="black", label=<torch>, shape="box", style="solid"];
"torch._C_flatbuffer" [color="black", label=<torch._C_flatbuffer>, shape="box", style="solid"];
"torch._VF" [color="black", label=<torch._VF>, shape="box", style="solid"];
"torch.__config__" [color="black", label=<torch.__config__>, shape="box", style="solid"];
"torch.__future__" [color="black", label=<torch.__future__>, shape="box", style="solid"];
"torch._appdirs" [color="black", label=<torch._appdirs>, shape="box", style="solid"];
"torch._awaits" [color="black", label=<torch._awaits>, shape="box", style="solid"];
"torch._classes" [color="black", label=<torch._classes>, shape="box", style="solid"];
"torch._compile" [color="black", label=<torch._compile>, shape="box", style="solid"];
"torch._custom_op" [color="black", label=<torch._custom_op>, shape="box", style="solid"];
"torch._custom_op.autograd" [color="black", label=<torch._custom_op.autograd>, shape="box", style="solid"];
"torch._custom_op.functional" [color="black", label=<torch._custom_op.functional>, shape="box", style="solid"];
"torch._custom_op.impl" [color="black", label=<torch._custom_op.impl>, shape="box", style="solid"];
"torch._custom_ops" [color="black", label=<torch._custom_ops>, shape="box", style="solid"];
"torch._decomp" [color="black", label=<torch._decomp>, shape="box", style="solid"];
"torch._decomp.decompositions" [color="black", label=<torch._decomp.decompositions>, shape="box", style="solid"];
"torch._decomp.decompositions_for_jvp" [color="black", label=<torch._decomp.decompositions_for_jvp>, shape="box", style="solid"];
"torch._decomp.decompositions_for_rng" [color="black", label=<torch._decomp.decompositions_for_rng>, shape="box", style="solid"];
"torch._deploy" [color="black", label=<torch._deploy>, shape="box", style="solid"];
"torch._dispatch" [color="black", label=<torch._dispatch>, shape="box", style="solid"];
"torch._dispatch.python" [color="black", label=<torch._dispatch.python>, shape="box", style="solid"];
"torch._dynamo" [color="black", label=<torch._dynamo>, shape="box", style="solid"];
"torch._dynamo._trace_wrapped_higher_order_op" [color="black", label=<torch._dynamo._trace_wrapped_higher_order_op>, shape="box", style="solid"];
"torch._dynamo.backends" [color="black", label=<torch._dynamo.backends>, shape="box", style="solid"];
"torch._dynamo.backends.common" [color="black", label=<torch._dynamo.backends.common>, shape="box", style="solid"];
"torch._dynamo.backends.cudagraphs" [color="black", label=<torch._dynamo.backends.cudagraphs>, shape="box", style="solid"];
"torch._dynamo.backends.debugging" [color="black", label=<torch._dynamo.backends.debugging>, shape="box", style="solid"];
"torch._dynamo.backends.distributed" [color="black", label=<torch._dynamo.backends.distributed>, shape="box", style="solid"];
"torch._dynamo.backends.inductor" [color="black", label=<torch._dynamo.backends.inductor>, shape="box", style="solid"];
"torch._dynamo.backends.onnxrt" [color="black", label=<torch._dynamo.backends.onnxrt>, shape="box", style="solid"];
"torch._dynamo.backends.registry" [color="black", label=<torch._dynamo.backends.registry>, shape="box", style="solid"];
"torch._dynamo.backends.tensorrt" [color="black", label=<torch._dynamo.backends.tensorrt>, shape="box", style="solid"];
"torch._dynamo.backends.torchxla" [color="black", label=<torch._dynamo.backends.torchxla>, shape="box", style="solid"];
"torch._dynamo.backends.tvm" [color="black", label=<torch._dynamo.backends.tvm>, shape="box", style="solid"];
"torch._dynamo.bytecode_analysis" [color="black", label=<torch._dynamo.bytecode_analysis>, shape="box", style="solid"];
"torch._dynamo.bytecode_transformation" [color="black", label=<torch._dynamo.bytecode_transformation>, shape="box", style="solid"];
"torch._dynamo.cache_size" [color="black", label=<torch._dynamo.cache_size>, shape="box", style="solid"];
"torch._dynamo.callback" [color="black", label=<torch._dynamo.callback>, shape="box", style="solid"];
"torch._dynamo.code_context" [color="black", label=<torch._dynamo.code_context>, shape="box", style="solid"];
"torch._dynamo.codegen" [color="black", label=<torch._dynamo.codegen>, shape="box", style="solid"];
"torch._dynamo.compiled_autograd" [color="black", label=<torch._dynamo.compiled_autograd>, shape="box", style="solid"];
"torch._dynamo.comptime" [color="black", label=<torch._dynamo.comptime>, shape="box", style="solid"];
"torch._dynamo.config" [color="black", label=<torch._dynamo.config>, shape="box", style="solid"];
"torch._dynamo.convert_frame" [color="black", label=<torch._dynamo.convert_frame>, shape="box", style="solid"];
"torch._dynamo.create_parameter_op" [color="black", label=<torch._dynamo.create_parameter_op>, shape="box", style="solid"];
"torch._dynamo.current_scope_id" [color="black", label=<torch._dynamo.current_scope_id>, shape="box", style="solid"];
"torch._dynamo.debug_utils" [color="black", label=<torch._dynamo.debug_utils>, shape="box", style="solid"];
"torch._dynamo.decorators" [color="black", label=<torch._dynamo.decorators>, shape="box", style="solid"];
"torch._dynamo.device_interface" [color="black", label=<torch._dynamo.device_interface>, shape="box", style="solid"];
"torch._dynamo.distributed" [color="black", label=<torch._dynamo.distributed>, shape="box", style="solid"];
"torch._dynamo.eval_frame" [color="black", label=<torch._dynamo.eval_frame>, shape="box", style="solid"];
"torch._dynamo.exc" [color="black", label=<torch._dynamo.exc>, shape="box", style="solid"];
"torch._dynamo.external_utils" [color="black", label=<torch._dynamo.external_utils>, shape="box", style="solid"];
"torch._dynamo.funcname_cache" [color="black", label=<torch._dynamo.funcname_cache>, shape="box", style="solid"];
"torch._dynamo.graph_deduplication" [color="black", label=<torch._dynamo.graph_deduplication>, shape="box", style="solid"];
"torch._dynamo.graph_region_tracker" [color="black", label=<torch._dynamo.graph_region_tracker>, shape="box", style="solid"];
"torch._dynamo.guards" [color="black", label=<torch._dynamo.guards>, shape="box", style="solid"];
"torch._dynamo.hooks" [color="black", label=<torch._dynamo.hooks>, shape="box", style="solid"];
"torch._dynamo.logging" [color="black", label=<torch._dynamo.logging>, shape="box", style="solid"];
"torch._dynamo.metrics_context" [color="black", label=<torch._dynamo.metrics_context>, shape="box", style="solid"];
"torch._dynamo.mutation_guard" [color="black", label=<torch._dynamo.mutation_guard>, shape="box", style="solid"];
"torch._dynamo.output_graph" [color="black", label=<torch._dynamo.output_graph>, shape="box", style="solid"];
"torch._dynamo.pgo" [color="black", label=<torch._dynamo.pgo>, shape="box", style="solid"];
"torch._dynamo.polyfills" [color="black", label=<torch._dynamo.polyfills>, shape="box", style="solid"];
"torch._dynamo.polyfills.builtins" [color="black", label=<torch._dynamo.polyfills.builtins>, shape="box", style="solid"];
"torch._dynamo.polyfills.functools" [color="black", label=<torch._dynamo.polyfills.functools>, shape="box", style="solid"];
"torch._dynamo.polyfills.itertools" [color="black", label=<torch._dynamo.polyfills.itertools>, shape="box", style="solid"];
"torch._dynamo.polyfills.loader" [color="black", label=<torch._dynamo.polyfills.loader>, shape="box", style="solid"];
"torch._dynamo.polyfills.operator" [color="black", label=<torch._dynamo.polyfills.operator>, shape="box", style="solid"];
"torch._dynamo.polyfills.os" [color="black", label=<torch._dynamo.polyfills.os>, shape="box", style="solid"];
"torch._dynamo.polyfills.pytree" [color="black", label=<torch._dynamo.polyfills.pytree>, shape="box", style="solid"];
"torch._dynamo.polyfills.sys" [color="black", label=<torch._dynamo.polyfills.sys>, shape="box", style="solid"];
"torch._dynamo.profiler" [color="black", label=<torch._dynamo.profiler>, shape="box", style="solid"];
"torch._dynamo.replay_record" [color="black", label=<torch._dynamo.replay_record>, shape="box", style="solid"];
"torch._dynamo.repro" [color="black", label=<torch._dynamo.repro>, shape="box", style="solid"];
"torch._dynamo.repro.after_aot" [color="black", label=<torch._dynamo.repro.after_aot>, shape="box", style="solid"];
"torch._dynamo.repro.after_dynamo" [color="black", label=<torch._dynamo.repro.after_dynamo>, shape="box", style="solid"];
"torch._dynamo.repro.aoti" [color="black", label=<torch._dynamo.repro.aoti>, shape="box", style="solid"];
"torch._dynamo.resume_execution" [color="black", label=<torch._dynamo.resume_execution>, shape="box", style="solid"];
"torch._dynamo.side_effects" [color="black", label=<torch._dynamo.side_effects>, shape="box", style="solid"];
"torch._dynamo.source" [color="black", label=<torch._dynamo.source>, shape="box", style="solid"];
"torch._dynamo.symbolic_convert" [color="black", label=<torch._dynamo.symbolic_convert>, shape="box", style="solid"];
"torch._dynamo.tensor_version_op" [color="black", label=<torch._dynamo.tensor_version_op>, shape="box", style="solid"];
"torch._dynamo.test_case" [color="black", label=<torch._dynamo.test_case>, shape="box", style="solid"];
"torch._dynamo.test_minifier_common" [color="black", label=<torch._dynamo.test_minifier_common>, shape="box", style="solid"];
"torch._dynamo.testing" [color="black", label=<torch._dynamo.testing>, shape="box", style="solid"];
"torch._dynamo.trace_rules" [color="black", label=<torch._dynamo.trace_rules>, shape="box", style="solid"];
"torch._dynamo.types" [color="black", label=<torch._dynamo.types>, shape="box", style="solid"];
"torch._dynamo.utils" [color="black", label=<torch._dynamo.utils>, shape="box", style="solid"];
"torch._dynamo.variables" [color="black", label=<torch._dynamo.variables>, shape="box", style="solid"];
"torch._dynamo.variables.base" [color="black", label=<torch._dynamo.variables.base>, shape="box", style="solid"];
"torch._dynamo.variables.builder" [color="black", label=<torch._dynamo.variables.builder>, shape="box", style="solid"];
"torch._dynamo.variables.builtin" [color="black", label=<torch._dynamo.variables.builtin>, shape="box", style="solid"];
"torch._dynamo.variables.constant" [color="black", label=<torch._dynamo.variables.constant>, shape="box", style="solid"];
"torch._dynamo.variables.ctx_manager" [color="black", label=<torch._dynamo.variables.ctx_manager>, shape="box", style="solid"];
"torch._dynamo.variables.dicts" [color="black", label=<torch._dynamo.variables.dicts>, shape="box", style="solid"];
"torch._dynamo.variables.distributed" [color="black", label=<torch._dynamo.variables.distributed>, shape="box", style="solid"];
"torch._dynamo.variables.functions" [color="black", label=<torch._dynamo.variables.functions>, shape="box", style="solid"];
"torch._dynamo.variables.higher_order_ops" [color="black", label=<torch._dynamo.variables.higher_order_ops>, shape="box", style="solid"];
"torch._dynamo.variables.iter" [color="black", label=<torch._dynamo.variables.iter>, shape="box", style="solid"];
"torch._dynamo.variables.lazy" [color="black", label=<torch._dynamo.variables.lazy>, shape="box", style="solid"];
"torch._dynamo.variables.lists" [color="black", label=<torch._dynamo.variables.lists>, shape="box", style="solid"];
"torch._dynamo.variables.misc" [color="black", label=<torch._dynamo.variables.misc>, shape="box", style="solid"];
"torch._dynamo.variables.nn_module" [color="black", label=<torch._dynamo.variables.nn_module>, shape="box", style="solid"];
"torch._dynamo.variables.optimizer" [color="black", label=<torch._dynamo.variables.optimizer>, shape="box", style="solid"];
"torch._dynamo.variables.script_object" [color="black", label=<torch._dynamo.variables.script_object>, shape="box", style="solid"];
"torch._dynamo.variables.sdpa" [color="black", label=<torch._dynamo.variables.sdpa>, shape="box", style="solid"];
"torch._dynamo.variables.tensor" [color="black", label=<torch._dynamo.variables.tensor>, shape="box", style="solid"];
"torch._dynamo.variables.torch" [color="black", label=<torch._dynamo.variables.torch>, shape="box", style="solid"];
"torch._dynamo.variables.torch_function" [color="black", label=<torch._dynamo.variables.torch_function>, shape="box", style="solid"];
"torch._dynamo.variables.user_defined" [color="black", label=<torch._dynamo.variables.user_defined>, shape="box", style="solid"];
"torch._environment" [color="black", label=<torch._environment>, shape="box", style="solid"];
"torch._export" [color="black", label=<torch._export>, shape="box", style="solid"];
"torch._export.converter" [color="black", label=<torch._export.converter>, shape="box", style="solid"];
"torch._export.db" [color="black", label=<torch._export.db>, shape="box", style="solid"];
"torch._export.db.case" [color="black", label=<torch._export.db.case>, shape="box", style="solid"];
"torch._export.db.examples" [color="black", label=<torch._export.db.examples>, shape="box", style="solid"];
"torch._export.db.examples.assume_constant_result" [color="black", label=<torch._export.db.examples.assume_constant_result>, shape="box", style="solid"];
"torch._export.db.examples.autograd_function" [color="black", label=<torch._export.db.examples.autograd_function>, shape="box", style="solid"];
"torch._export.db.examples.class_method" [color="black", label=<torch._export.db.examples.class_method>, shape="box", style="solid"];
"torch._export.db.examples.cond_branch_class_method" [color="black", label=<torch._export.db.examples.cond_branch_class_method>, shape="box", style="solid"];
"torch._export.db.examples.cond_branch_nested_function" [color="black", label=<torch._export.db.examples.cond_branch_nested_function>, shape="box", style="solid"];
"torch._export.db.examples.cond_branch_nonlocal_variables" [color="black", label=<torch._export.db.examples.cond_branch_nonlocal_variables>, shape="box", style="solid"];
"torch._export.db.examples.cond_closed_over_variable" [color="black", label=<torch._export.db.examples.cond_closed_over_variable>, shape="box", style="solid"];
"torch._export.db.examples.cond_operands" [color="black", label=<torch._export.db.examples.cond_operands>, shape="box", style="solid"];
"torch._export.db.examples.cond_predicate" [color="black", label=<torch._export.db.examples.cond_predicate>, shape="box", style="solid"];
"torch._export.db.examples.constrain_as_size_example" [color="black", label=<torch._export.db.examples.constrain_as_size_example>, shape="box", style="solid"];
"torch._export.db.examples.constrain_as_value_example" [color="black", label=<torch._export.db.examples.constrain_as_value_example>, shape="box", style="solid"];
"torch._export.db.examples.decorator" [color="black", label=<torch._export.db.examples.decorator>, shape="box", style="solid"];
"torch._export.db.examples.dictionary" [color="black", label=<torch._export.db.examples.dictionary>, shape="box", style="solid"];
"torch._export.db.examples.dynamic_shape_assert" [color="black", label=<torch._export.db.examples.dynamic_shape_assert>, shape="box", style="solid"];
"torch._export.db.examples.dynamic_shape_constructor" [color="black", label=<torch._export.db.examples.dynamic_shape_constructor>, shape="box", style="solid"];
"torch._export.db.examples.dynamic_shape_if_guard" [color="black", label=<torch._export.db.examples.dynamic_shape_if_guard>, shape="box", style="solid"];
"torch._export.db.examples.dynamic_shape_map" [color="black", label=<torch._export.db.examples.dynamic_shape_map>, shape="box", style="solid"];
"torch._export.db.examples.dynamic_shape_round" [color="black", label=<torch._export.db.examples.dynamic_shape_round>, shape="box", style="solid"];
"torch._export.db.examples.dynamic_shape_slicing" [color="black", label=<torch._export.db.examples.dynamic_shape_slicing>, shape="box", style="solid"];
"torch._export.db.examples.dynamic_shape_view" [color="black", label=<torch._export.db.examples.dynamic_shape_view>, shape="box", style="solid"];
"torch._export.db.examples.fn_with_kwargs" [color="black", label=<torch._export.db.examples.fn_with_kwargs>, shape="box", style="solid"];
"torch._export.db.examples.list_contains" [color="black", label=<torch._export.db.examples.list_contains>, shape="box", style="solid"];
"torch._export.db.examples.list_unpack" [color="black", label=<torch._export.db.examples.list_unpack>, shape="box", style="solid"];
"torch._export.db.examples.model_attr_mutation" [color="black", label=<torch._export.db.examples.model_attr_mutation>, shape="box", style="solid"];
"torch._export.db.examples.nested_function" [color="black", label=<torch._export.db.examples.nested_function>, shape="box", style="solid"];
"torch._export.db.examples.null_context_manager" [color="black", label=<torch._export.db.examples.null_context_manager>, shape="box", style="solid"];
"torch._export.db.examples.optional_input" [color="black", label=<torch._export.db.examples.optional_input>, shape="box", style="solid"];
"torch._export.db.examples.pytree_flatten" [color="black", label=<torch._export.db.examples.pytree_flatten>, shape="box", style="solid"];
"torch._export.db.examples.scalar_output" [color="black", label=<torch._export.db.examples.scalar_output>, shape="box", style="solid"];
"torch._export.db.examples.specialized_attribute" [color="black", label=<torch._export.db.examples.specialized_attribute>, shape="box", style="solid"];
"torch._export.db.examples.static_for_loop" [color="black", label=<torch._export.db.examples.static_for_loop>, shape="box", style="solid"];
"torch._export.db.examples.static_if" [color="black", label=<torch._export.db.examples.static_if>, shape="box", style="solid"];
"torch._export.db.examples.tensor_setattr" [color="black", label=<torch._export.db.examples.tensor_setattr>, shape="box", style="solid"];
"torch._export.db.examples.type_reflection_method" [color="black", label=<torch._export.db.examples.type_reflection_method>, shape="box", style="solid"];
"torch._export.db.examples.unsupported_operator" [color="black", label=<torch._export.db.examples.unsupported_operator>, shape="box", style="solid"];
"torch._export.db.examples.user_input_mutation" [color="black", label=<torch._export.db.examples.user_input_mutation>, shape="box", style="solid"];
"torch._export.db.gen_example" [color="black", label=<torch._export.db.gen_example>, shape="box", style="solid"];
"torch._export.db.logging" [color="black", label=<torch._export.db.logging>, shape="box", style="solid"];
"torch._export.error" [color="black", label=<torch._export.error>, shape="box", style="solid"];
"torch._export.non_strict_utils" [color="black", label=<torch._export.non_strict_utils>, shape="box", style="solid"];
"torch._export.pass_base" [color="black", label=<torch._export.pass_base>, shape="box", style="solid"];
"torch._export.pass_infra" [color="black", label=<torch._export.pass_infra>, shape="box", style="solid"];
"torch._export.pass_infra.node_metadata" [color="black", label=<torch._export.pass_infra.node_metadata>, shape="box", style="solid"];
"torch._export.pass_infra.proxy_value" [color="black", label=<torch._export.pass_infra.proxy_value>, shape="box", style="solid"];
"torch._export.passes" [color="black", label=<torch._export.passes>, shape="box", style="solid"];
"torch._export.passes._node_metadata_hook" [color="black", label=<torch._export.passes._node_metadata_hook>, shape="box", style="solid"];
"torch._export.passes.add_runtime_assertions_for_constraints_pass" [color="black", label=<torch._export.passes.add_runtime_assertions_for_constraints_pass>, shape="box", style="solid"];
"torch._export.passes.collect_tracepoints_pass" [color="black", label=<torch._export.passes.collect_tracepoints_pass>, shape="box", style="solid"];
"torch._export.passes.constant_folding" [color="black", label=<torch._export.passes.constant_folding>, shape="box", style="solid"];
"torch._export.passes.functionalize_side_effectful_ops_pass" [color="black", label=<torch._export.passes.functionalize_side_effectful_ops_pass>, shape="box", style="solid"];
"torch._export.passes.insert_custom_op_guards" [color="black", label=<torch._export.passes.insert_custom_op_guards>, shape="box", style="solid"];
"torch._export.passes.lift_constants_pass" [color="black", label=<torch._export.passes.lift_constants_pass>, shape="box", style="solid"];
"torch._export.passes.remove_runtime_assertions" [color="black", label=<torch._export.passes.remove_runtime_assertions>, shape="box", style="solid"];
"torch._export.passes.replace_autocast_with_hop_pass" [color="black", label=<torch._export.passes.replace_autocast_with_hop_pass>, shape="box", style="solid"];
"torch._export.passes.replace_quantized_ops_with_standard_ops_pass" [color="black", label=<torch._export.passes.replace_quantized_ops_with_standard_ops_pass>, shape="box", style="solid"];
"torch._export.passes.replace_set_grad_with_hop_pass" [color="black", label=<torch._export.passes.replace_set_grad_with_hop_pass>, shape="box", style="solid"];
"torch._export.passes.replace_view_ops_with_view_copy_ops_pass" [color="black", label=<torch._export.passes.replace_view_ops_with_view_copy_ops_pass>, shape="box", style="solid"];
"torch._export.passes.replace_with_hop_pass_util" [color="black", label=<torch._export.passes.replace_with_hop_pass_util>, shape="box", style="solid"];
"torch._export.serde" [color="black", label=<torch._export.serde>, shape="box", style="solid"];
"torch._export.serde.aoti_schema" [color="black", label=<torch._export.serde.aoti_schema>, shape="box", style="solid"];
"torch._export.serde.dynamic_shapes" [color="black", label=<torch._export.serde.dynamic_shapes>, shape="box", style="solid"];
"torch._export.serde.schema" [color="black", label=<torch._export.serde.schema>, shape="box", style="solid"];
"torch._export.serde.schema_check" [color="black", label=<torch._export.serde.schema_check>, shape="box", style="solid"];
"torch._export.serde.serialize" [color="black", label=<torch._export.serde.serialize>, shape="box", style="solid"];
"torch._export.serde.union" [color="black", label=<torch._export.serde.union>, shape="box", style="solid"];
"torch._export.tools" [color="black", label=<torch._export.tools>, shape="box", style="solid"];
"torch._export.utils" [color="black", label=<torch._export.utils>, shape="box", style="solid"];
"torch._export.verifier" [color="black", label=<torch._export.verifier>, shape="box", style="solid"];
"torch._export.wrappers" [color="black", label=<torch._export.wrappers>, shape="box", style="solid"];
"torch._functorch" [color="black", label=<torch._functorch>, shape="box", style="solid"];
"torch._functorch._activation_checkpointing" [color="black", label=<torch._functorch._activation_checkpointing>, shape="box", style="solid"];
"torch._functorch._activation_checkpointing.knapsack" [color="black", label=<torch._functorch._activation_checkpointing.knapsack>, shape="box", style="solid"];
"torch._functorch._aot_autograd" [color="black", label=<torch._functorch._aot_autograd>, shape="box", style="solid"];
"torch._functorch._aot_autograd.autograd_cache" [color="black", label=<torch._functorch._aot_autograd.autograd_cache>, shape="box", style="solid"];
"torch._functorch._aot_autograd.collect_metadata_analysis" [color="black", label=<torch._functorch._aot_autograd.collect_metadata_analysis>, shape="box", style="solid"];
"torch._functorch._aot_autograd.dispatch_and_compile_graph" [color="black", label=<torch._functorch._aot_autograd.dispatch_and_compile_graph>, shape="box", style="solid"];
"torch._functorch._aot_autograd.functional_utils" [color="black", label=<torch._functorch._aot_autograd.functional_utils>, shape="box", style="solid"];
"torch._functorch._aot_autograd.input_output_analysis" [color="black", label=<torch._functorch._aot_autograd.input_output_analysis>, shape="box", style="solid"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" [color="black", label=<torch._functorch._aot_autograd.jit_compile_runtime_wrappers>, shape="box", style="solid"];
"torch._functorch._aot_autograd.logging_utils" [color="black", label=<torch._functorch._aot_autograd.logging_utils>, shape="box", style="solid"];
"torch._functorch._aot_autograd.runtime_wrappers" [color="black", label=<torch._functorch._aot_autograd.runtime_wrappers>, shape="box", style="solid"];
"torch._functorch._aot_autograd.schemas" [color="black", label=<torch._functorch._aot_autograd.schemas>, shape="box", style="solid"];
"torch._functorch._aot_autograd.subclass_parametrization" [color="black", label=<torch._functorch._aot_autograd.subclass_parametrization>, shape="box", style="solid"];
"torch._functorch._aot_autograd.subclass_utils" [color="black", label=<torch._functorch._aot_autograd.subclass_utils>, shape="box", style="solid"];
"torch._functorch._aot_autograd.traced_function_transforms" [color="black", label=<torch._functorch._aot_autograd.traced_function_transforms>, shape="box", style="solid"];
"torch._functorch._aot_autograd.utils" [color="black", label=<torch._functorch._aot_autograd.utils>, shape="box", style="solid"];
"torch._functorch.aot_autograd" [color="black", label=<torch._functorch.aot_autograd>, shape="box", style="solid"];
"torch._functorch.apis" [color="black", label=<torch._functorch.apis>, shape="box", style="solid"];
"torch._functorch.autograd_function" [color="black", label=<torch._functorch.autograd_function>, shape="box", style="solid"];
"torch._functorch.batch_norm_replacement" [color="black", label=<torch._functorch.batch_norm_replacement>, shape="box", style="solid"];
"torch._functorch.benchmark_utils" [color="black", label=<torch._functorch.benchmark_utils>, shape="box", style="solid"];
"torch._functorch.compile_utils" [color="black", label=<torch._functorch.compile_utils>, shape="box", style="solid"];
"torch._functorch.compilers" [color="black", label=<torch._functorch.compilers>, shape="box", style="solid"];
"torch._functorch.config" [color="black", label=<torch._functorch.config>, shape="box", style="solid"];
"torch._functorch.deprecated" [color="black", label=<torch._functorch.deprecated>, shape="box", style="solid"];
"torch._functorch.eager_transforms" [color="black", label=<torch._functorch.eager_transforms>, shape="box", style="solid"];
"torch._functorch.functional_call" [color="black", label=<torch._functorch.functional_call>, shape="box", style="solid"];
"torch._functorch.fx_minifier" [color="black", label=<torch._functorch.fx_minifier>, shape="box", style="solid"];
"torch._functorch.make_functional" [color="black", label=<torch._functorch.make_functional>, shape="box", style="solid"];
"torch._functorch.partitioners" [color="black", label=<torch._functorch.partitioners>, shape="box", style="solid"];
"torch._functorch.pyfunctorch" [color="black", label=<torch._functorch.pyfunctorch>, shape="box", style="solid"];
"torch._functorch.python_key" [color="black", label=<torch._functorch.python_key>, shape="box", style="solid"];
"torch._functorch.pytree_hacks" [color="black", label=<torch._functorch.pytree_hacks>, shape="box", style="solid"];
"torch._functorch.top_operators_github_usage" [color="black", label=<torch._functorch.top_operators_github_usage>, shape="box", style="solid"];
"torch._functorch.utils" [color="black", label=<torch._functorch.utils>, shape="box", style="solid"];
"torch._functorch.vmap" [color="black", label=<torch._functorch.vmap>, shape="box", style="solid"];
"torch._guards" [color="black", label=<torch._guards>, shape="box", style="solid"];
"torch._higher_order_ops" [color="black", label=<torch._higher_order_ops>, shape="box", style="solid"];
"torch._higher_order_ops.associative_scan" [color="black", label=<torch._higher_order_ops.associative_scan>, shape="box", style="solid"];
"torch._higher_order_ops.auto_functionalize" [color="black", label=<torch._higher_order_ops.auto_functionalize>, shape="box", style="solid"];
"torch._higher_order_ops.cond" [color="black", label=<torch._higher_order_ops.cond>, shape="box", style="solid"];
"torch._higher_order_ops.effects" [color="black", label=<torch._higher_order_ops.effects>, shape="box", style="solid"];
"torch._higher_order_ops.executorch_call_delegate" [color="black", label=<torch._higher_order_ops.executorch_call_delegate>, shape="box", style="solid"];
"torch._higher_order_ops.flex_attention" [color="black", label=<torch._higher_order_ops.flex_attention>, shape="box", style="solid"];
"torch._higher_order_ops.foreach_map" [color="black", label=<torch._higher_order_ops.foreach_map>, shape="box", style="solid"];
"torch._higher_order_ops.hints_wrap" [color="black", label=<torch._higher_order_ops.hints_wrap>, shape="box", style="solid"];
"torch._higher_order_ops.invoke_subgraph" [color="black", label=<torch._higher_order_ops.invoke_subgraph>, shape="box", style="solid"];
"torch._higher_order_ops.map" [color="black", label=<torch._higher_order_ops.map>, shape="box", style="solid"];
"torch._higher_order_ops.out_dtype" [color="black", label=<torch._higher_order_ops.out_dtype>, shape="box", style="solid"];
"torch._higher_order_ops.prim_hop_base" [color="black", label=<torch._higher_order_ops.prim_hop_base>, shape="box", style="solid"];
"torch._higher_order_ops.run_const_graph" [color="black", label=<torch._higher_order_ops.run_const_graph>, shape="box", style="solid"];
"torch._higher_order_ops.scan" [color="black", label=<torch._higher_order_ops.scan>, shape="box", style="solid"];
"torch._higher_order_ops.strict_mode" [color="black", label=<torch._higher_order_ops.strict_mode>, shape="box", style="solid"];
"torch._higher_order_ops.torchbind" [color="black", label=<torch._higher_order_ops.torchbind>, shape="box", style="solid"];
"torch._higher_order_ops.triton_kernel_wrap" [color="black", label=<torch._higher_order_ops.triton_kernel_wrap>, shape="box", style="solid"];
"torch._higher_order_ops.utils" [color="black", label=<torch._higher_order_ops.utils>, shape="box", style="solid"];
"torch._higher_order_ops.while_loop" [color="black", label=<torch._higher_order_ops.while_loop>, shape="box", style="solid"];
"torch._higher_order_ops.wrap" [color="black", label=<torch._higher_order_ops.wrap>, shape="box", style="solid"];
"torch._inductor" [color="black", label=<torch._inductor>, shape="box", style="solid"];
"torch._inductor.aoti_eager" [color="black", label=<torch._inductor.aoti_eager>, shape="box", style="solid"];
"torch._inductor.async_compile" [color="black", label=<torch._inductor.async_compile>, shape="box", style="solid"];
"torch._inductor.autoheuristic" [color="black", label=<torch._inductor.autoheuristic>, shape="box", style="solid"];
"torch._inductor.autoheuristic.artifacts" [color="black", label=<torch._inductor.autoheuristic.artifacts>, shape="box", style="solid"];
"torch._inductor.autoheuristic.artifacts._MMRankingA100" [color="black", label=<torch._inductor.autoheuristic.artifacts._MMRankingA100>, shape="box", style="solid"];
"torch._inductor.autoheuristic.artifacts._MMRankingH100" [color="black", label=<torch._inductor.autoheuristic.artifacts._MMRankingH100>, shape="box", style="solid"];
"torch._inductor.autoheuristic.artifacts._MixedMMA100" [color="black", label=<torch._inductor.autoheuristic.artifacts._MixedMMA100>, shape="box", style="solid"];
"torch._inductor.autoheuristic.artifacts._MixedMMH100" [color="black", label=<torch._inductor.autoheuristic.artifacts._MixedMMH100>, shape="box", style="solid"];
"torch._inductor.autoheuristic.artifacts._PadMMA100" [color="black", label=<torch._inductor.autoheuristic.artifacts._PadMMA100>, shape="box", style="solid"];
"torch._inductor.autoheuristic.autoheuristic" [color="black", label=<torch._inductor.autoheuristic.autoheuristic>, shape="box", style="solid"];
"torch._inductor.autoheuristic.autoheuristic_utils" [color="black", label=<torch._inductor.autoheuristic.autoheuristic_utils>, shape="box", style="solid"];
"torch._inductor.autoheuristic.learned_heuristic_controller" [color="black", label=<torch._inductor.autoheuristic.learned_heuristic_controller>, shape="box", style="solid"];
"torch._inductor.autoheuristic.learnedheuristic_interface" [color="black", label=<torch._inductor.autoheuristic.learnedheuristic_interface>, shape="box", style="solid"];
"torch._inductor.autotune_process" [color="black", label=<torch._inductor.autotune_process>, shape="box", style="solid"];
"torch._inductor.bounds" [color="black", label=<torch._inductor.bounds>, shape="box", style="solid"];
"torch._inductor.choices" [color="black", label=<torch._inductor.choices>, shape="box", style="solid"];
"torch._inductor.codecache" [color="black", label=<torch._inductor.codecache>, shape="box", style="solid"];
"torch._inductor.codegen" [color="black", label=<torch._inductor.codegen>, shape="box", style="solid"];
"torch._inductor.codegen.aoti_hipify_utils" [color="black", label=<torch._inductor.codegen.aoti_hipify_utils>, shape="box", style="solid"];
"torch._inductor.codegen.block_analysis" [color="black", label=<torch._inductor.codegen.block_analysis>, shape="box", style="solid"];
"torch._inductor.codegen.common" [color="black", label=<torch._inductor.codegen.common>, shape="box", style="solid"];
"torch._inductor.codegen.cpp" [color="black", label=<torch._inductor.codegen.cpp>, shape="box", style="solid"];
"torch._inductor.codegen.cpp_bmm_template" [color="black", label=<torch._inductor.codegen.cpp_bmm_template>, shape="box", style="solid"];
"torch._inductor.codegen.cpp_flex_attention_template" [color="black", label=<torch._inductor.codegen.cpp_flex_attention_template>, shape="box", style="solid"];
"torch._inductor.codegen.cpp_gemm_template" [color="black", label=<torch._inductor.codegen.cpp_gemm_template>, shape="box", style="solid"];
"torch._inductor.codegen.cpp_micro_gemm" [color="black", label=<torch._inductor.codegen.cpp_micro_gemm>, shape="box", style="solid"];
"torch._inductor.codegen.cpp_template" [color="black", label=<torch._inductor.codegen.cpp_template>, shape="box", style="solid"];
"torch._inductor.codegen.cpp_template_kernel" [color="black", label=<torch._inductor.codegen.cpp_template_kernel>, shape="box", style="solid"];
"torch._inductor.codegen.cpp_utils" [color="black", label=<torch._inductor.codegen.cpp_utils>, shape="box", style="solid"];
"torch._inductor.codegen.cpp_wrapper_cpu" [color="black", label=<torch._inductor.codegen.cpp_wrapper_cpu>, shape="box", style="solid"];
"torch._inductor.codegen.cpp_wrapper_cpu_array_ref" [color="black", label=<torch._inductor.codegen.cpp_wrapper_cpu_array_ref>, shape="box", style="solid"];
"torch._inductor.codegen.cpp_wrapper_gpu" [color="black", label=<torch._inductor.codegen.cpp_wrapper_gpu>, shape="box", style="solid"];
"torch._inductor.codegen.cpu_device_op_overrides" [color="black", label=<torch._inductor.codegen.cpu_device_op_overrides>, shape="box", style="solid"];
"torch._inductor.codegen.cuda" [color="black", label=<torch._inductor.codegen.cuda>, shape="box", style="solid"];
"torch._inductor.codegen.cuda.cuda_cpp_scheduling" [color="black", label=<torch._inductor.codegen.cuda.cuda_cpp_scheduling>, shape="box", style="solid"];
"torch._inductor.codegen.cuda.cuda_env" [color="black", label=<torch._inductor.codegen.cuda.cuda_env>, shape="box", style="solid"];
"torch._inductor.codegen.cuda.cuda_kernel" [color="black", label=<torch._inductor.codegen.cuda.cuda_kernel>, shape="box", style="solid"];
"torch._inductor.codegen.cuda.cuda_template" [color="black", label=<torch._inductor.codegen.cuda.cuda_template>, shape="box", style="solid"];
"torch._inductor.codegen.cuda.cutlass_epilogue_gen" [color="black", label=<torch._inductor.codegen.cuda.cutlass_epilogue_gen>, shape="box", style="solid"];
"torch._inductor.codegen.cuda.cutlass_lib_extensions" [color="black", label=<torch._inductor.codegen.cuda.cutlass_lib_extensions>, shape="box", style="solid"];
"torch._inductor.codegen.cuda.cutlass_lib_extensions.gemm_operation_extensions" [color="black", label=<torch._inductor.codegen.cuda.cutlass_lib_extensions.gemm_operation_extensions>, shape="box", style="solid"];
"torch._inductor.codegen.cuda.cutlass_utils" [color="black", label=<torch._inductor.codegen.cuda.cutlass_utils>, shape="box", style="solid"];
"torch._inductor.codegen.cuda.device_op_overrides" [color="black", label=<torch._inductor.codegen.cuda.device_op_overrides>, shape="box", style="solid"];
"torch._inductor.codegen.cuda.gemm_template" [color="black", label=<torch._inductor.codegen.cuda.gemm_template>, shape="box", style="solid"];
"torch._inductor.codegen.cuda_combined_scheduling" [color="black", label=<torch._inductor.codegen.cuda_combined_scheduling>, shape="box", style="solid"];
"torch._inductor.codegen.debug_utils" [color="black", label=<torch._inductor.codegen.debug_utils>, shape="box", style="solid"];
"torch._inductor.codegen.halide" [color="black", label=<torch._inductor.codegen.halide>, shape="box", style="solid"];
"torch._inductor.codegen.memory_planning" [color="black", label=<torch._inductor.codegen.memory_planning>, shape="box", style="solid"];
"torch._inductor.codegen.multi_kernel" [color="black", label=<torch._inductor.codegen.multi_kernel>, shape="box", style="solid"];
"torch._inductor.codegen.rocm" [color="black", label=<torch._inductor.codegen.rocm>, shape="box", style="solid"];
"torch._inductor.codegen.rocm.ck_conv_template" [color="black", label=<torch._inductor.codegen.rocm.ck_conv_template>, shape="box", style="solid"];
"torch._inductor.codegen.rocm.ck_template" [color="black", label=<torch._inductor.codegen.rocm.ck_template>, shape="box", style="solid"];
"torch._inductor.codegen.rocm.ck_universal_gemm_template" [color="black", label=<torch._inductor.codegen.rocm.ck_universal_gemm_template>, shape="box", style="solid"];
"torch._inductor.codegen.rocm.compile_command" [color="black", label=<torch._inductor.codegen.rocm.compile_command>, shape="box", style="solid"];
"torch._inductor.codegen.rocm.rocm_benchmark_request" [color="black", label=<torch._inductor.codegen.rocm.rocm_benchmark_request>, shape="box", style="solid"];
"torch._inductor.codegen.rocm.rocm_cpp_scheduling" [color="black", label=<torch._inductor.codegen.rocm.rocm_cpp_scheduling>, shape="box", style="solid"];
"torch._inductor.codegen.rocm.rocm_kernel" [color="black", label=<torch._inductor.codegen.rocm.rocm_kernel>, shape="box", style="solid"];
"torch._inductor.codegen.rocm.rocm_template" [color="black", label=<torch._inductor.codegen.rocm.rocm_template>, shape="box", style="solid"];
"torch._inductor.codegen.rocm.rocm_template_buffer" [color="black", label=<torch._inductor.codegen.rocm.rocm_template_buffer>, shape="box", style="solid"];
"torch._inductor.codegen.simd" [color="black", label=<torch._inductor.codegen.simd>, shape="box", style="solid"];
"torch._inductor.codegen.simd_kernel_features" [color="black", label=<torch._inductor.codegen.simd_kernel_features>, shape="box", style="solid"];
"torch._inductor.codegen.triton" [color="black", label=<torch._inductor.codegen.triton>, shape="box", style="solid"];
"torch._inductor.codegen.triton_combo_kernel" [color="black", label=<torch._inductor.codegen.triton_combo_kernel>, shape="box", style="solid"];
"torch._inductor.codegen.triton_split_scan" [color="black", label=<torch._inductor.codegen.triton_split_scan>, shape="box", style="solid"];
"torch._inductor.codegen.triton_utils" [color="black", label=<torch._inductor.codegen.triton_utils>, shape="box", style="solid"];
"torch._inductor.codegen.wrapper" [color="black", label=<torch._inductor.codegen.wrapper>, shape="box", style="solid"];
"torch._inductor.codegen.xpu" [color="black", label=<torch._inductor.codegen.xpu>, shape="box", style="solid"];
"torch._inductor.codegen.xpu.device_op_overrides" [color="black", label=<torch._inductor.codegen.xpu.device_op_overrides>, shape="box", style="solid"];
"torch._inductor.comm_analysis" [color="black", label=<torch._inductor.comm_analysis>, shape="box", style="solid"];
"torch._inductor.comm_lowering" [color="black", label=<torch._inductor.comm_lowering>, shape="box", style="solid"];
"torch._inductor.comms" [color="black", label=<torch._inductor.comms>, shape="box", style="solid"];
"torch._inductor.compile_fx" [color="black", label=<torch._inductor.compile_fx>, shape="box", style="solid"];
"torch._inductor.compile_worker" [color="black", label=<torch._inductor.compile_worker>, shape="box", style="solid"];
"torch._inductor.compile_worker.__main__" [color="black", label=<torch._inductor.compile_worker.__main__>, shape="box", style="solid"];
"torch._inductor.compile_worker.subproc_pool" [color="black", label=<torch._inductor.compile_worker.subproc_pool>, shape="box", style="solid"];
"torch._inductor.compile_worker.watchdog" [color="black", label=<torch._inductor.compile_worker.watchdog>, shape="box", style="solid"];
"torch._inductor.compiler_bisector" [color="black", label=<torch._inductor.compiler_bisector>, shape="box", style="solid"];
"torch._inductor.config" [color="black", label=<torch._inductor.config>, shape="box", style="solid"];
"torch._inductor.constant_folding" [color="black", label=<torch._inductor.constant_folding>, shape="box", style="solid"];
"torch._inductor.cpp_builder" [color="black", label=<torch._inductor.cpp_builder>, shape="box", style="solid"];
"torch._inductor.cpu_vec_isa" [color="black", label=<torch._inductor.cpu_vec_isa>, shape="box", style="solid"];
"torch._inductor.cudagraph_trees" [color="black", label=<torch._inductor.cudagraph_trees>, shape="box", style="solid"];
"torch._inductor.cudagraph_utils" [color="black", label=<torch._inductor.cudagraph_utils>, shape="box", style="solid"];
"torch._inductor.custom_graph_pass" [color="black", label=<torch._inductor.custom_graph_pass>, shape="box", style="solid"];
"torch._inductor.debug" [color="black", label=<torch._inductor.debug>, shape="box", style="solid"];
"torch._inductor.decomposition" [color="black", label=<torch._inductor.decomposition>, shape="box", style="solid"];
"torch._inductor.dependencies" [color="black", label=<torch._inductor.dependencies>, shape="box", style="solid"];
"torch._inductor.dtype_propagation" [color="black", label=<torch._inductor.dtype_propagation>, shape="box", style="solid"];
"torch._inductor.exc" [color="black", label=<torch._inductor.exc>, shape="box", style="solid"];
"torch._inductor.extern_node_serializer" [color="black", label=<torch._inductor.extern_node_serializer>, shape="box", style="solid"];
"torch._inductor.freezing" [color="black", label=<torch._inductor.freezing>, shape="box", style="solid"];
"torch._inductor.fx_passes" [color="black", label=<torch._inductor.fx_passes>, shape="box", style="solid"];
"torch._inductor.fx_passes.b2b_gemm" [color="black", label=<torch._inductor.fx_passes.b2b_gemm>, shape="box", style="solid"];
"torch._inductor.fx_passes.binary_folding" [color="black", label=<torch._inductor.fx_passes.binary_folding>, shape="box", style="solid"];
"torch._inductor.fx_passes.ddp_fusion" [color="black", label=<torch._inductor.fx_passes.ddp_fusion>, shape="box", style="solid"];
"torch._inductor.fx_passes.decompose_mem_bound_mm" [color="black", label=<torch._inductor.fx_passes.decompose_mem_bound_mm>, shape="box", style="solid"];
"torch._inductor.fx_passes.dedupe_symint_uses" [color="black", label=<torch._inductor.fx_passes.dedupe_symint_uses>, shape="box", style="solid"];
"torch._inductor.fx_passes.efficient_conv_bn_eval" [color="black", label=<torch._inductor.fx_passes.efficient_conv_bn_eval>, shape="box", style="solid"];
"torch._inductor.fx_passes.freezing_patterns" [color="black", label=<torch._inductor.fx_passes.freezing_patterns>, shape="box", style="solid"];
"torch._inductor.fx_passes.fuse_attention" [color="black", label=<torch._inductor.fx_passes.fuse_attention>, shape="box", style="solid"];
"torch._inductor.fx_passes.group_batch_fusion" [color="black", label=<torch._inductor.fx_passes.group_batch_fusion>, shape="box", style="solid"];
"torch._inductor.fx_passes.joint_graph" [color="black", label=<torch._inductor.fx_passes.joint_graph>, shape="box", style="solid"];
"torch._inductor.fx_passes.micro_pipeline_tp" [color="black", label=<torch._inductor.fx_passes.micro_pipeline_tp>, shape="box", style="solid"];
"torch._inductor.fx_passes.misc_patterns" [color="black", label=<torch._inductor.fx_passes.misc_patterns>, shape="box", style="solid"];
"torch._inductor.fx_passes.mkldnn_fusion" [color="black", label=<torch._inductor.fx_passes.mkldnn_fusion>, shape="box", style="solid"];
"torch._inductor.fx_passes.numeric_utils" [color="black", label=<torch._inductor.fx_passes.numeric_utils>, shape="box", style="solid"];
"torch._inductor.fx_passes.pad_mm" [color="black", label=<torch._inductor.fx_passes.pad_mm>, shape="box", style="solid"];
"torch._inductor.fx_passes.post_grad" [color="black", label=<torch._inductor.fx_passes.post_grad>, shape="box", style="solid"];
"torch._inductor.fx_passes.pre_grad" [color="black", label=<torch._inductor.fx_passes.pre_grad>, shape="box", style="solid"];
"torch._inductor.fx_passes.quantization" [color="black", label=<torch._inductor.fx_passes.quantization>, shape="box", style="solid"];
"torch._inductor.fx_passes.reinplace" [color="black", label=<torch._inductor.fx_passes.reinplace>, shape="box", style="solid"];
"torch._inductor.fx_passes.replace_random" [color="black", label=<torch._inductor.fx_passes.replace_random>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns" [color="black", label=<torch._inductor.fx_passes.serialized_patterns>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_1" [color="black", label=<torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_1>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_10" [color="black", label=<torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_10>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_11" [color="black", label=<torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_11>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_12" [color="black", label=<torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_12>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_13" [color="black", label=<torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_13>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_14" [color="black", label=<torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_14>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_15" [color="black", label=<torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_15>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_16" [color="black", label=<torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_16>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_17" [color="black", label=<torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_17>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_18" [color="black", label=<torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_18>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_19" [color="black", label=<torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_19>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_2" [color="black", label=<torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_2>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_3" [color="black", label=<torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_3>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_4" [color="black", label=<torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_4>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_5" [color="black", label=<torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_5>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_6" [color="black", label=<torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_6>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_7" [color="black", label=<torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_7>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_8" [color="black", label=<torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_8>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_9" [color="black", label=<torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_9>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns.addmm_pattern" [color="black", label=<torch._inductor.fx_passes.serialized_patterns.addmm_pattern>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns.bmm_pattern" [color="black", label=<torch._inductor.fx_passes.serialized_patterns.bmm_pattern>, shape="box", style="solid"];
"torch._inductor.fx_passes.serialized_patterns.mm_pattern" [color="black", label=<torch._inductor.fx_passes.serialized_patterns.mm_pattern>, shape="box", style="solid"];
"torch._inductor.fx_passes.split_cat" [color="black", label=<torch._inductor.fx_passes.split_cat>, shape="box", style="solid"];
"torch._inductor.fx_utils" [color="black", label=<torch._inductor.fx_utils>, shape="box", style="solid"];
"torch._inductor.graph" [color="black", label=<torch._inductor.graph>, shape="box", style="solid"];
"torch._inductor.hooks" [color="black", label=<torch._inductor.hooks>, shape="box", style="solid"];
"torch._inductor.index_propagation" [color="black", label=<torch._inductor.index_propagation>, shape="box", style="solid"];
"torch._inductor.inductor_prims" [color="black", label=<torch._inductor.inductor_prims>, shape="box", style="solid"];
"torch._inductor.ir" [color="black", label=<torch._inductor.ir>, shape="box", style="solid"];
"torch._inductor.jagged_lowerings" [color="black", label=<torch._inductor.jagged_lowerings>, shape="box", style="solid"];
"torch._inductor.kernel" [color="black", label=<torch._inductor.kernel>, shape="box", style="solid"];
"torch._inductor.kernel.bmm" [color="black", label=<torch._inductor.kernel.bmm>, shape="box", style="solid"];
"torch._inductor.kernel.conv" [color="black", label=<torch._inductor.kernel.conv>, shape="box", style="solid"];
"torch._inductor.kernel.flex_attention" [color="black", label=<torch._inductor.kernel.flex_attention>, shape="box", style="solid"];
"torch._inductor.kernel.flex_decoding" [color="black", label=<torch._inductor.kernel.flex_decoding>, shape="box", style="solid"];
"torch._inductor.kernel.mm" [color="black", label=<torch._inductor.kernel.mm>, shape="box", style="solid"];
"torch._inductor.kernel.mm_common" [color="black", label=<torch._inductor.kernel.mm_common>, shape="box", style="solid"];
"torch._inductor.kernel.mm_plus_mm" [color="black", label=<torch._inductor.kernel.mm_plus_mm>, shape="box", style="solid"];
"torch._inductor.kernel.mm_scaled" [color="black", label=<torch._inductor.kernel.mm_scaled>, shape="box", style="solid"];
"torch._inductor.kernel.unpack_mixed_mm" [color="black", label=<torch._inductor.kernel.unpack_mixed_mm>, shape="box", style="solid"];
"torch._inductor.loop_body" [color="black", label=<torch._inductor.loop_body>, shape="box", style="solid"];
"torch._inductor.lowering" [color="black", label=<torch._inductor.lowering>, shape="box", style="solid"];
"torch._inductor.memory" [color="black", label=<torch._inductor.memory>, shape="box", style="solid"];
"torch._inductor.metrics" [color="black", label=<torch._inductor.metrics>, shape="box", style="solid"];
"torch._inductor.mkldnn_ir" [color="black", label=<torch._inductor.mkldnn_ir>, shape="box", style="solid"];
"torch._inductor.mkldnn_lowerings" [color="black", label=<torch._inductor.mkldnn_lowerings>, shape="box", style="solid"];
"torch._inductor.mock_cache" [color="black", label=<torch._inductor.mock_cache>, shape="box", style="solid"];
"torch._inductor.ops_handler" [color="black", label=<torch._inductor.ops_handler>, shape="box", style="solid"];
"torch._inductor.optimize_indexing" [color="black", label=<torch._inductor.optimize_indexing>, shape="box", style="solid"];
"torch._inductor.output_code" [color="black", label=<torch._inductor.output_code>, shape="box", style="solid"];
"torch._inductor.package" [color="black", label=<torch._inductor.package>, shape="box", style="solid"];
"torch._inductor.package.build_package" [color="black", label=<torch._inductor.package.build_package>, shape="box", style="solid"];
"torch._inductor.package.package" [color="black", label=<torch._inductor.package.package>, shape="box", style="solid"];
"torch._inductor.package.pt2_archive_constants" [color="black", label=<torch._inductor.package.pt2_archive_constants>, shape="box", style="solid"];
"torch._inductor.pattern_matcher" [color="black", label=<torch._inductor.pattern_matcher>, shape="box", style="solid"];
"torch._inductor.quantized_lowerings" [color="black", label=<torch._inductor.quantized_lowerings>, shape="box", style="solid"];
"torch._inductor.remote_cache" [color="black", label=<torch._inductor.remote_cache>, shape="box", style="solid"];
"torch._inductor.runtime" [color="black", label=<torch._inductor.runtime>, shape="box", style="solid"];
"torch._inductor.runtime.autotune_cache" [color="black", label=<torch._inductor.runtime.autotune_cache>, shape="box", style="solid"];
"torch._inductor.runtime.benchmarking" [color="black", label=<torch._inductor.runtime.benchmarking>, shape="box", style="solid"];
"torch._inductor.runtime.cache_dir_utils" [color="black", label=<torch._inductor.runtime.cache_dir_utils>, shape="box", style="solid"];
"torch._inductor.runtime.compile_tasks" [color="black", label=<torch._inductor.runtime.compile_tasks>, shape="box", style="solid"];
"torch._inductor.runtime.coordinate_descent_tuner" [color="black", label=<torch._inductor.runtime.coordinate_descent_tuner>, shape="box", style="solid"];
"torch._inductor.runtime.halide_helpers" [color="black", label=<torch._inductor.runtime.halide_helpers>, shape="box", style="solid"];
"torch._inductor.runtime.hints" [color="black", label=<torch._inductor.runtime.hints>, shape="box", style="solid"];
"torch._inductor.runtime.runtime_utils" [color="black", label=<torch._inductor.runtime.runtime_utils>, shape="box", style="solid"];
"torch._inductor.runtime.triton_helpers" [color="black", label=<torch._inductor.runtime.triton_helpers>, shape="box", style="solid"];
"torch._inductor.runtime.triton_heuristics" [color="black", label=<torch._inductor.runtime.triton_heuristics>, shape="box", style="solid"];
"torch._inductor.scheduler" [color="black", label=<torch._inductor.scheduler>, shape="box", style="solid"];
"torch._inductor.select_algorithm" [color="black", label=<torch._inductor.select_algorithm>, shape="box", style="solid"];
"torch._inductor.sizevars" [color="black", label=<torch._inductor.sizevars>, shape="box", style="solid"];
"torch._inductor.subgraph_lowering" [color="black", label=<torch._inductor.subgraph_lowering>, shape="box", style="solid"];
"torch._inductor.test_case" [color="black", label=<torch._inductor.test_case>, shape="box", style="solid"];
"torch._inductor.test_operators" [color="black", label=<torch._inductor.test_operators>, shape="box", style="solid"];
"torch._inductor.triton_bundler" [color="black", label=<torch._inductor.triton_bundler>, shape="box", style="solid"];
"torch._inductor.utils" [color="black", label=<torch._inductor.utils>, shape="box", style="solid"];
"torch._inductor.virtualized" [color="black", label=<torch._inductor.virtualized>, shape="box", style="solid"];
"torch._inductor.wrapper_benchmark" [color="black", label=<torch._inductor.wrapper_benchmark>, shape="box", style="solid"];
"torch._jit_internal" [color="black", label=<torch._jit_internal>, shape="box", style="solid"];
"torch._lazy" [color="black", label=<torch._lazy>, shape="box", style="solid"];
"torch._lazy.closure" [color="black", label=<torch._lazy.closure>, shape="box", style="solid"];
"torch._lazy.computation" [color="black", label=<torch._lazy.computation>, shape="box", style="solid"];
"torch._lazy.config" [color="black", label=<torch._lazy.config>, shape="box", style="solid"];
"torch._lazy.debug" [color="black", label=<torch._lazy.debug>, shape="box", style="solid"];
"torch._lazy.device_context" [color="black", label=<torch._lazy.device_context>, shape="box", style="solid"];
"torch._lazy.extract_compiled_graph" [color="black", label=<torch._lazy.extract_compiled_graph>, shape="box", style="solid"];
"torch._lazy.ir_cache" [color="black", label=<torch._lazy.ir_cache>, shape="box", style="solid"];
"torch._lazy.metrics" [color="black", label=<torch._lazy.metrics>, shape="box", style="solid"];
"torch._lazy.tensor_factory_functions" [color="black", label=<torch._lazy.tensor_factory_functions>, shape="box", style="solid"];
"torch._lazy.ts_backend" [color="black", label=<torch._lazy.ts_backend>, shape="box", style="solid"];
"torch._library" [color="black", label=<torch._library>, shape="box", style="solid"];
"torch._library.autograd" [color="black", label=<torch._library.autograd>, shape="box", style="solid"];
"torch._library.custom_ops" [color="black", label=<torch._library.custom_ops>, shape="box", style="solid"];
"torch._library.fake_class_registry" [color="black", label=<torch._library.fake_class_registry>, shape="box", style="solid"];
"torch._library.fake_impl" [color="black", label=<torch._library.fake_impl>, shape="box", style="solid"];
"torch._library.infer_schema" [color="black", label=<torch._library.infer_schema>, shape="box", style="solid"];
"torch._library.simple_registry" [color="black", label=<torch._library.simple_registry>, shape="box", style="solid"];
"torch._library.triton" [color="black", label=<torch._library.triton>, shape="box", style="solid"];
"torch._library.utils" [color="black", label=<torch._library.utils>, shape="box", style="solid"];
"torch._linalg_utils" [color="black", label=<torch._linalg_utils>, shape="box", style="solid"];
"torch._lobpcg" [color="black", label=<torch._lobpcg>, shape="box", style="solid"];
"torch._logging" [color="black", label=<torch._logging>, shape="box", style="solid"];
"torch._logging._internal" [color="black", label=<torch._logging._internal>, shape="box", style="solid"];
"torch._logging._registrations" [color="black", label=<torch._logging._registrations>, shape="box", style="solid"];
"torch._logging.scribe" [color="black", label=<torch._logging.scribe>, shape="box", style="solid"];
"torch._logging.structured" [color="black", label=<torch._logging.structured>, shape="box", style="solid"];
"torch._lowrank" [color="black", label=<torch._lowrank>, shape="box", style="solid"];
"torch._meta_registrations" [color="black", label=<torch._meta_registrations>, shape="box", style="solid"];
"torch._namedtensor_internals" [color="black", label=<torch._namedtensor_internals>, shape="box", style="solid"];
"torch._numpy" [color="black", label=<torch._numpy>, shape="box", style="solid"];
"torch._numpy._binary_ufuncs_impl" [color="black", label=<torch._numpy._binary_ufuncs_impl>, shape="box", style="solid"];
"torch._numpy._casting_dicts" [color="black", label=<torch._numpy._casting_dicts>, shape="box", style="solid"];
"torch._numpy._dtypes" [color="black", label=<torch._numpy._dtypes>, shape="box", style="solid"];
"torch._numpy._dtypes_impl" [color="black", label=<torch._numpy._dtypes_impl>, shape="box", style="solid"];
"torch._numpy._funcs" [color="black", label=<torch._numpy._funcs>, shape="box", style="solid"];
"torch._numpy._funcs_impl" [color="black", label=<torch._numpy._funcs_impl>, shape="box", style="solid"];
"torch._numpy._getlimits" [color="black", label=<torch._numpy._getlimits>, shape="box", style="solid"];
"torch._numpy._ndarray" [color="black", label=<torch._numpy._ndarray>, shape="box", style="solid"];
"torch._numpy._normalizations" [color="black", label=<torch._numpy._normalizations>, shape="box", style="solid"];
"torch._numpy._reductions_impl" [color="black", label=<torch._numpy._reductions_impl>, shape="box", style="solid"];
"torch._numpy._ufuncs" [color="black", label=<torch._numpy._ufuncs>, shape="box", style="solid"];
"torch._numpy._unary_ufuncs_impl" [color="black", label=<torch._numpy._unary_ufuncs_impl>, shape="box", style="solid"];
"torch._numpy._util" [color="black", label=<torch._numpy._util>, shape="box", style="solid"];
"torch._numpy.fft" [color="black", label=<torch._numpy.fft>, shape="box", style="solid"];
"torch._numpy.linalg" [color="black", label=<torch._numpy.linalg>, shape="box", style="solid"];
"torch._numpy.random" [color="black", label=<torch._numpy.random>, shape="box", style="solid"];
"torch._numpy.testing" [color="black", label=<torch._numpy.testing>, shape="box", style="solid"];
"torch._numpy.testing.utils" [color="black", label=<torch._numpy.testing.utils>, shape="box", style="solid"];
"torch._ops" [color="black", label=<torch._ops>, shape="box", style="solid"];
"torch._prims" [color="black", label=<torch._prims>, shape="box", style="solid"];
"torch._prims.context" [color="black", label=<torch._prims.context>, shape="box", style="solid"];
"torch._prims.debug_prims" [color="black", label=<torch._prims.debug_prims>, shape="box", style="solid"];
"torch._prims.executor" [color="black", label=<torch._prims.executor>, shape="box", style="solid"];
"torch._prims.rng_prims" [color="black", label=<torch._prims.rng_prims>, shape="box", style="solid"];
"torch._prims_common" [color="black", label=<torch._prims_common>, shape="box", style="solid"];
"torch._prims_common.wrappers" [color="black", label=<torch._prims_common.wrappers>, shape="box", style="solid"];
"torch._python_dispatcher" [color="black", label=<torch._python_dispatcher>, shape="box", style="solid"];
"torch._refs" [color="black", label=<torch._refs>, shape="box", style="solid"];
"torch._refs._conversions" [color="black", label=<torch._refs._conversions>, shape="box", style="solid"];
"torch._refs.fft" [color="black", label=<torch._refs.fft>, shape="box", style="solid"];
"torch._refs.linalg" [color="black", label=<torch._refs.linalg>, shape="box", style="solid"];
"torch._refs.nn" [color="black", label=<torch._refs.nn>, shape="box", style="solid"];
"torch._refs.nn.functional" [color="black", label=<torch._refs.nn.functional>, shape="box", style="solid"];
"torch._refs.special" [color="black", label=<torch._refs.special>, shape="box", style="solid"];
"torch._size_docs" [color="black", label=<torch._size_docs>, shape="box", style="solid"];
"torch._sources" [color="black", label=<torch._sources>, shape="box", style="solid"];
"torch._storage_docs" [color="black", label=<torch._storage_docs>, shape="box", style="solid"];
"torch._streambase" [color="black", label=<torch._streambase>, shape="box", style="solid"];
"torch._strobelight" [color="black", label=<torch._strobelight>, shape="box", style="solid"];
"torch._strobelight.cli_function_profiler" [color="black", label=<torch._strobelight.cli_function_profiler>, shape="box", style="solid"];
"torch._strobelight.compile_time_profiler" [color="black", label=<torch._strobelight.compile_time_profiler>, shape="box", style="solid"];
"torch._subclasses" [color="black", label=<torch._subclasses>, shape="box", style="solid"];
"torch._subclasses._fake_tensor_utils" [color="black", label=<torch._subclasses._fake_tensor_utils>, shape="box", style="solid"];
"torch._subclasses.fake_impls" [color="black", label=<torch._subclasses.fake_impls>, shape="box", style="solid"];
"torch._subclasses.fake_tensor" [color="black", label=<torch._subclasses.fake_tensor>, shape="box", style="solid"];
"torch._subclasses.fake_utils" [color="black", label=<torch._subclasses.fake_utils>, shape="box", style="solid"];
"torch._subclasses.functional_tensor" [color="black", label=<torch._subclasses.functional_tensor>, shape="box", style="solid"];
"torch._subclasses.meta_utils" [color="black", label=<torch._subclasses.meta_utils>, shape="box", style="solid"];
"torch._subclasses.schema_check_mode" [color="black", label=<torch._subclasses.schema_check_mode>, shape="box", style="solid"];
"torch._tensor" [color="black", label=<torch._tensor>, shape="box", style="solid"];
"torch._tensor_docs" [color="black", label=<torch._tensor_docs>, shape="box", style="solid"];
"torch._tensor_str" [color="black", label=<torch._tensor_str>, shape="box", style="solid"];
"torch._thread_safe_fork" [color="black", label=<torch._thread_safe_fork>, shape="box", style="solid"];
"torch._torch_docs" [color="black", label=<torch._torch_docs>, shape="box", style="solid"];
"torch._utils" [color="black", label=<torch._utils>, shape="box", style="solid"];
"torch._utils_internal" [color="black", label=<torch._utils_internal>, shape="box", style="solid"];
"torch._vendor" [color="black", label=<torch._vendor>, shape="box", style="solid"];
"torch._vendor.packaging" [color="black", label=<torch._vendor.packaging>, shape="box", style="solid"];
"torch._vendor.packaging._structures" [color="black", label=<torch._vendor.packaging._structures>, shape="box", style="solid"];
"torch._vendor.packaging.version" [color="black", label=<torch._vendor.packaging.version>, shape="box", style="solid"];
"torch._vmap_internals" [color="black", label=<torch._vmap_internals>, shape="box", style="solid"];
"torch._weights_only_unpickler" [color="black", label=<torch._weights_only_unpickler>, shape="box", style="solid"];
"torch.accelerator" [color="black", label=<torch.accelerator>, shape="box", style="solid"];
"torch.accelerator._utils" [color="black", label=<torch.accelerator._utils>, shape="box", style="solid"];
"torch.amp" [color="black", label=<torch.amp>, shape="box", style="solid"];
"torch.amp.autocast_mode" [color="black", label=<torch.amp.autocast_mode>, shape="box", style="solid"];
"torch.amp.grad_scaler" [color="black", label=<torch.amp.grad_scaler>, shape="box", style="solid"];
"torch.ao" [color="black", label=<torch.ao>, shape="box", style="solid"];
"torch.ao.nn" [color="black", label=<torch.ao.nn>, shape="box", style="solid"];
"torch.ao.nn.intrinsic" [color="black", label=<torch.ao.nn.intrinsic>, shape="box", style="solid"];
"torch.ao.nn.intrinsic.modules" [color="black", label=<torch.ao.nn.intrinsic.modules>, shape="box", style="solid"];
"torch.ao.nn.intrinsic.modules.fused" [color="black", label=<torch.ao.nn.intrinsic.modules.fused>, shape="box", style="solid"];
"torch.ao.nn.intrinsic.qat" [color="black", label=<torch.ao.nn.intrinsic.qat>, shape="box", style="solid"];
"torch.ao.nn.intrinsic.qat.modules" [color="black", label=<torch.ao.nn.intrinsic.qat.modules>, shape="box", style="solid"];
"torch.ao.nn.intrinsic.qat.modules.conv_fused" [color="black", label=<torch.ao.nn.intrinsic.qat.modules.conv_fused>, shape="box", style="solid"];
"torch.ao.nn.intrinsic.qat.modules.linear_fused" [color="black", label=<torch.ao.nn.intrinsic.qat.modules.linear_fused>, shape="box", style="solid"];
"torch.ao.nn.intrinsic.qat.modules.linear_relu" [color="black", label=<torch.ao.nn.intrinsic.qat.modules.linear_relu>, shape="box", style="solid"];
"torch.ao.nn.intrinsic.quantized" [color="black", label=<torch.ao.nn.intrinsic.quantized>, shape="box", style="solid"];
"torch.ao.nn.intrinsic.quantized.dynamic" [color="black", label=<torch.ao.nn.intrinsic.quantized.dynamic>, shape="box", style="solid"];
"torch.ao.nn.intrinsic.quantized.dynamic.modules" [color="black", label=<torch.ao.nn.intrinsic.quantized.dynamic.modules>, shape="box", style="solid"];
"torch.ao.nn.intrinsic.quantized.dynamic.modules.linear_relu" [color="black", label=<torch.ao.nn.intrinsic.quantized.dynamic.modules.linear_relu>, shape="box", style="solid"];
"torch.ao.nn.intrinsic.quantized.modules" [color="black", label=<torch.ao.nn.intrinsic.quantized.modules>, shape="box", style="solid"];
"torch.ao.nn.intrinsic.quantized.modules.bn_relu" [color="black", label=<torch.ao.nn.intrinsic.quantized.modules.bn_relu>, shape="box", style="solid"];
"torch.ao.nn.intrinsic.quantized.modules.conv_add" [color="black", label=<torch.ao.nn.intrinsic.quantized.modules.conv_add>, shape="box", style="solid"];
"torch.ao.nn.intrinsic.quantized.modules.conv_relu" [color="black", label=<torch.ao.nn.intrinsic.quantized.modules.conv_relu>, shape="box", style="solid"];
"torch.ao.nn.intrinsic.quantized.modules.linear_relu" [color="black", label=<torch.ao.nn.intrinsic.quantized.modules.linear_relu>, shape="box", style="solid"];
"torch.ao.nn.qat" [color="black", label=<torch.ao.nn.qat>, shape="box", style="solid"];
"torch.ao.nn.qat.dynamic" [color="black", label=<torch.ao.nn.qat.dynamic>, shape="box", style="solid"];
"torch.ao.nn.qat.dynamic.modules" [color="black", label=<torch.ao.nn.qat.dynamic.modules>, shape="box", style="solid"];
"torch.ao.nn.qat.dynamic.modules.linear" [color="black", label=<torch.ao.nn.qat.dynamic.modules.linear>, shape="box", style="solid"];
"torch.ao.nn.qat.modules" [color="black", label=<torch.ao.nn.qat.modules>, shape="box", style="solid"];
"torch.ao.nn.qat.modules.conv" [color="black", label=<torch.ao.nn.qat.modules.conv>, shape="box", style="solid"];
"torch.ao.nn.qat.modules.embedding_ops" [color="black", label=<torch.ao.nn.qat.modules.embedding_ops>, shape="box", style="solid"];
"torch.ao.nn.qat.modules.linear" [color="black", label=<torch.ao.nn.qat.modules.linear>, shape="box", style="solid"];
"torch.ao.nn.quantizable" [color="black", label=<torch.ao.nn.quantizable>, shape="box", style="solid"];
"torch.ao.nn.quantizable.modules" [color="black", label=<torch.ao.nn.quantizable.modules>, shape="box", style="solid"];
"torch.ao.nn.quantizable.modules.activation" [color="black", label=<torch.ao.nn.quantizable.modules.activation>, shape="box", style="solid"];
"torch.ao.nn.quantizable.modules.rnn" [color="black", label=<torch.ao.nn.quantizable.modules.rnn>, shape="box", style="solid"];
"torch.ao.nn.quantized" [color="black", label=<torch.ao.nn.quantized>, shape="box", style="solid"];
"torch.ao.nn.quantized.dynamic" [color="black", label=<torch.ao.nn.quantized.dynamic>, shape="box", style="solid"];
"torch.ao.nn.quantized.dynamic.modules" [color="black", label=<torch.ao.nn.quantized.dynamic.modules>, shape="box", style="solid"];
"torch.ao.nn.quantized.dynamic.modules.conv" [color="black", label=<torch.ao.nn.quantized.dynamic.modules.conv>, shape="box", style="solid"];
"torch.ao.nn.quantized.dynamic.modules.linear" [color="black", label=<torch.ao.nn.quantized.dynamic.modules.linear>, shape="box", style="solid"];
"torch.ao.nn.quantized.dynamic.modules.rnn" [color="black", label=<torch.ao.nn.quantized.dynamic.modules.rnn>, shape="box", style="solid"];
"torch.ao.nn.quantized.functional" [color="black", label=<torch.ao.nn.quantized.functional>, shape="box", style="solid"];
"torch.ao.nn.quantized.modules" [color="black", label=<torch.ao.nn.quantized.modules>, shape="box", style="solid"];
"torch.ao.nn.quantized.modules.activation" [color="black", label=<torch.ao.nn.quantized.modules.activation>, shape="box", style="solid"];
"torch.ao.nn.quantized.modules.batchnorm" [color="black", label=<torch.ao.nn.quantized.modules.batchnorm>, shape="box", style="solid"];
"torch.ao.nn.quantized.modules.conv" [color="black", label=<torch.ao.nn.quantized.modules.conv>, shape="box", style="solid"];
"torch.ao.nn.quantized.modules.dropout" [color="black", label=<torch.ao.nn.quantized.modules.dropout>, shape="box", style="solid"];
"torch.ao.nn.quantized.modules.embedding_ops" [color="black", label=<torch.ao.nn.quantized.modules.embedding_ops>, shape="box", style="solid"];
"torch.ao.nn.quantized.modules.functional_modules" [color="black", label=<torch.ao.nn.quantized.modules.functional_modules>, shape="box", style="solid"];
"torch.ao.nn.quantized.modules.linear" [color="black", label=<torch.ao.nn.quantized.modules.linear>, shape="box", style="solid"];
"torch.ao.nn.quantized.modules.normalization" [color="black", label=<torch.ao.nn.quantized.modules.normalization>, shape="box", style="solid"];
"torch.ao.nn.quantized.modules.rnn" [color="black", label=<torch.ao.nn.quantized.modules.rnn>, shape="box", style="solid"];
"torch.ao.nn.quantized.modules.utils" [color="black", label=<torch.ao.nn.quantized.modules.utils>, shape="box", style="solid"];
"torch.ao.nn.quantized.reference" [color="black", label=<torch.ao.nn.quantized.reference>, shape="box", style="solid"];
"torch.ao.nn.quantized.reference.modules" [color="black", label=<torch.ao.nn.quantized.reference.modules>, shape="box", style="solid"];
"torch.ao.nn.quantized.reference.modules.conv" [color="black", label=<torch.ao.nn.quantized.reference.modules.conv>, shape="box", style="solid"];
"torch.ao.nn.quantized.reference.modules.linear" [color="black", label=<torch.ao.nn.quantized.reference.modules.linear>, shape="box", style="solid"];
"torch.ao.nn.quantized.reference.modules.rnn" [color="black", label=<torch.ao.nn.quantized.reference.modules.rnn>, shape="box", style="solid"];
"torch.ao.nn.quantized.reference.modules.sparse" [color="black", label=<torch.ao.nn.quantized.reference.modules.sparse>, shape="box", style="solid"];
"torch.ao.nn.quantized.reference.modules.utils" [color="black", label=<torch.ao.nn.quantized.reference.modules.utils>, shape="box", style="solid"];
"torch.ao.nn.sparse" [color="black", label=<torch.ao.nn.sparse>, shape="box", style="solid"];
"torch.ao.nn.sparse.quantized" [color="black", label=<torch.ao.nn.sparse.quantized>, shape="box", style="solid"];
"torch.ao.nn.sparse.quantized.dynamic" [color="black", label=<torch.ao.nn.sparse.quantized.dynamic>, shape="box", style="solid"];
"torch.ao.nn.sparse.quantized.dynamic.linear" [color="black", label=<torch.ao.nn.sparse.quantized.dynamic.linear>, shape="box", style="solid"];
"torch.ao.nn.sparse.quantized.linear" [color="black", label=<torch.ao.nn.sparse.quantized.linear>, shape="box", style="solid"];
"torch.ao.nn.sparse.quantized.utils" [color="black", label=<torch.ao.nn.sparse.quantized.utils>, shape="box", style="solid"];
"torch.ao.ns" [color="black", label=<torch.ao.ns>, shape="box", style="solid"];
"torch.ao.ns._numeric_suite" [color="black", label=<torch.ao.ns._numeric_suite>, shape="box", style="solid"];
"torch.ao.ns._numeric_suite_fx" [color="black", label=<torch.ao.ns._numeric_suite_fx>, shape="box", style="solid"];
"torch.ao.ns.fx" [color="black", label=<torch.ao.ns.fx>, shape="box", style="solid"];
"torch.ao.ns.fx.graph_matcher" [color="black", label=<torch.ao.ns.fx.graph_matcher>, shape="box", style="solid"];
"torch.ao.ns.fx.graph_passes" [color="black", label=<torch.ao.ns.fx.graph_passes>, shape="box", style="solid"];
"torch.ao.ns.fx.mappings" [color="black", label=<torch.ao.ns.fx.mappings>, shape="box", style="solid"];
"torch.ao.ns.fx.n_shadows_utils" [color="black", label=<torch.ao.ns.fx.n_shadows_utils>, shape="box", style="solid"];
"torch.ao.ns.fx.ns_types" [color="black", label=<torch.ao.ns.fx.ns_types>, shape="box", style="solid"];
"torch.ao.ns.fx.pattern_utils" [color="black", label=<torch.ao.ns.fx.pattern_utils>, shape="box", style="solid"];
"torch.ao.ns.fx.qconfig_multi_mapping" [color="black", label=<torch.ao.ns.fx.qconfig_multi_mapping>, shape="box", style="solid"];
"torch.ao.ns.fx.utils" [color="black", label=<torch.ao.ns.fx.utils>, shape="box", style="solid"];
"torch.ao.ns.fx.weight_utils" [color="black", label=<torch.ao.ns.fx.weight_utils>, shape="box", style="solid"];
"torch.ao.pruning" [color="black", label=<torch.ao.pruning>, shape="box", style="solid"];
"torch.ao.pruning._experimental" [color="black", label=<torch.ao.pruning._experimental>, shape="box", style="solid"];
"torch.ao.pruning._experimental.activation_sparsifier" [color="black", label=<torch.ao.pruning._experimental.activation_sparsifier>, shape="box", style="solid"];
"torch.ao.pruning._experimental.activation_sparsifier.activation_sparsifier" [color="black", label=<torch.ao.pruning._experimental.activation_sparsifier.activation_sparsifier>, shape="box", style="solid"];
"torch.ao.pruning._experimental.data_scheduler" [color="black", label=<torch.ao.pruning._experimental.data_scheduler>, shape="box", style="solid"];
"torch.ao.pruning._experimental.data_scheduler.base_data_scheduler" [color="black", label=<torch.ao.pruning._experimental.data_scheduler.base_data_scheduler>, shape="box", style="solid"];
"torch.ao.pruning._experimental.data_sparsifier" [color="black", label=<torch.ao.pruning._experimental.data_sparsifier>, shape="box", style="solid"];
"torch.ao.pruning._experimental.data_sparsifier.base_data_sparsifier" [color="black", label=<torch.ao.pruning._experimental.data_sparsifier.base_data_sparsifier>, shape="box", style="solid"];
"torch.ao.pruning._experimental.data_sparsifier.data_norm_sparsifier" [color="black", label=<torch.ao.pruning._experimental.data_sparsifier.data_norm_sparsifier>, shape="box", style="solid"];
"torch.ao.pruning._experimental.data_sparsifier.lightning" [color="black", label=<torch.ao.pruning._experimental.data_sparsifier.lightning>, shape="box", style="solid"];
"torch.ao.pruning._experimental.data_sparsifier.lightning.callbacks" [color="black", label=<torch.ao.pruning._experimental.data_sparsifier.lightning.callbacks>, shape="box", style="solid"];
"torch.ao.pruning._experimental.data_sparsifier.lightning.callbacks._data_sparstity_utils" [color="black", label=<torch.ao.pruning._experimental.data_sparsifier.lightning.callbacks._data_sparstity_utils>, shape="box", style="solid"];
"torch.ao.pruning._experimental.data_sparsifier.lightning.callbacks.data_sparsity" [color="black", label=<torch.ao.pruning._experimental.data_sparsifier.lightning.callbacks.data_sparsity>, shape="box", style="solid"];
"torch.ao.pruning._experimental.data_sparsifier.quantization_utils" [color="black", label=<torch.ao.pruning._experimental.data_sparsifier.quantization_utils>, shape="box", style="solid"];
"torch.ao.pruning._experimental.pruner" [color="black", label=<torch.ao.pruning._experimental.pruner>, shape="box", style="solid"];
"torch.ao.pruning._experimental.pruner.FPGM_pruner" [color="black", label=<torch.ao.pruning._experimental.pruner.FPGM_pruner>, shape="box", style="solid"];
"torch.ao.pruning._experimental.pruner.base_structured_sparsifier" [color="black", label=<torch.ao.pruning._experimental.pruner.base_structured_sparsifier>, shape="box", style="solid"];
"torch.ao.pruning._experimental.pruner.lstm_saliency_pruner" [color="black", label=<torch.ao.pruning._experimental.pruner.lstm_saliency_pruner>, shape="box", style="solid"];
"torch.ao.pruning._experimental.pruner.match_utils" [color="black", label=<torch.ao.pruning._experimental.pruner.match_utils>, shape="box", style="solid"];
"torch.ao.pruning._experimental.pruner.parametrization" [color="black", label=<torch.ao.pruning._experimental.pruner.parametrization>, shape="box", style="solid"];
"torch.ao.pruning._experimental.pruner.prune_functions" [color="black", label=<torch.ao.pruning._experimental.pruner.prune_functions>, shape="box", style="solid"];
"torch.ao.pruning._experimental.pruner.saliency_pruner" [color="black", label=<torch.ao.pruning._experimental.pruner.saliency_pruner>, shape="box", style="solid"];
"torch.ao.pruning._mappings" [color="black", label=<torch.ao.pruning._mappings>, shape="box", style="solid"];
"torch.ao.pruning.scheduler" [color="black", label=<torch.ao.pruning.scheduler>, shape="box", style="solid"];
"torch.ao.pruning.scheduler.base_scheduler" [color="black", label=<torch.ao.pruning.scheduler.base_scheduler>, shape="box", style="solid"];
"torch.ao.pruning.scheduler.cubic_scheduler" [color="black", label=<torch.ao.pruning.scheduler.cubic_scheduler>, shape="box", style="solid"];
"torch.ao.pruning.scheduler.lambda_scheduler" [color="black", label=<torch.ao.pruning.scheduler.lambda_scheduler>, shape="box", style="solid"];
"torch.ao.pruning.sparsifier" [color="black", label=<torch.ao.pruning.sparsifier>, shape="box", style="solid"];
"torch.ao.pruning.sparsifier.base_sparsifier" [color="black", label=<torch.ao.pruning.sparsifier.base_sparsifier>, shape="box", style="solid"];
"torch.ao.pruning.sparsifier.nearly_diagonal_sparsifier" [color="black", label=<torch.ao.pruning.sparsifier.nearly_diagonal_sparsifier>, shape="box", style="solid"];
"torch.ao.pruning.sparsifier.utils" [color="black", label=<torch.ao.pruning.sparsifier.utils>, shape="box", style="solid"];
"torch.ao.pruning.sparsifier.weight_norm_sparsifier" [color="black", label=<torch.ao.pruning.sparsifier.weight_norm_sparsifier>, shape="box", style="solid"];
"torch.ao.quantization" [color="black", label=<torch.ao.quantization>, shape="box", style="solid"];
"torch.ao.quantization._correct_bias" [color="black", label=<torch.ao.quantization._correct_bias>, shape="box", style="solid"];
"torch.ao.quantization._equalize" [color="black", label=<torch.ao.quantization._equalize>, shape="box", style="solid"];
"torch.ao.quantization._learnable_fake_quantize" [color="black", label=<torch.ao.quantization._learnable_fake_quantize>, shape="box", style="solid"];
"torch.ao.quantization.backend_config" [color="black", label=<torch.ao.quantization.backend_config>, shape="box", style="solid"];
"torch.ao.quantization.backend_config._common_operator_config_utils" [color="black", label=<torch.ao.quantization.backend_config._common_operator_config_utils>, shape="box", style="solid"];
"torch.ao.quantization.backend_config._qnnpack_pt2e" [color="black", label=<torch.ao.quantization.backend_config._qnnpack_pt2e>, shape="box", style="solid"];
"torch.ao.quantization.backend_config.backend_config" [color="black", label=<torch.ao.quantization.backend_config.backend_config>, shape="box", style="solid"];
"torch.ao.quantization.backend_config.executorch" [color="black", label=<torch.ao.quantization.backend_config.executorch>, shape="box", style="solid"];
"torch.ao.quantization.backend_config.fbgemm" [color="black", label=<torch.ao.quantization.backend_config.fbgemm>, shape="box", style="solid"];
"torch.ao.quantization.backend_config.native" [color="black", label=<torch.ao.quantization.backend_config.native>, shape="box", style="solid"];
"torch.ao.quantization.backend_config.observation_type" [color="black", label=<torch.ao.quantization.backend_config.observation_type>, shape="box", style="solid"];
"torch.ao.quantization.backend_config.onednn" [color="black", label=<torch.ao.quantization.backend_config.onednn>, shape="box", style="solid"];
"torch.ao.quantization.backend_config.qnnpack" [color="black", label=<torch.ao.quantization.backend_config.qnnpack>, shape="box", style="solid"];
"torch.ao.quantization.backend_config.tensorrt" [color="black", label=<torch.ao.quantization.backend_config.tensorrt>, shape="box", style="solid"];
"torch.ao.quantization.backend_config.utils" [color="black", label=<torch.ao.quantization.backend_config.utils>, shape="box", style="solid"];
"torch.ao.quantization.backend_config.x86" [color="black", label=<torch.ao.quantization.backend_config.x86>, shape="box", style="solid"];
"torch.ao.quantization.fake_quantize" [color="black", label=<torch.ao.quantization.fake_quantize>, shape="box", style="solid"];
"torch.ao.quantization.fuse_modules" [color="black", label=<torch.ao.quantization.fuse_modules>, shape="box", style="solid"];
"torch.ao.quantization.fuser_method_mappings" [color="black", label=<torch.ao.quantization.fuser_method_mappings>, shape="box", style="solid"];
"torch.ao.quantization.fx" [color="black", label=<torch.ao.quantization.fx>, shape="box", style="solid"];
"torch.ao.quantization.fx._decomposed" [color="black", label=<torch.ao.quantization.fx._decomposed>, shape="box", style="solid"];
"torch.ao.quantization.fx._equalize" [color="black", label=<torch.ao.quantization.fx._equalize>, shape="box", style="solid"];
"torch.ao.quantization.fx._lower_to_native_backend" [color="black", label=<torch.ao.quantization.fx._lower_to_native_backend>, shape="box", style="solid"];
"torch.ao.quantization.fx._model_report" [color="black", label=<torch.ao.quantization.fx._model_report>, shape="box", style="solid"];
"torch.ao.quantization.fx._model_report.detector" [color="black", label=<torch.ao.quantization.fx._model_report.detector>, shape="box", style="solid"];
"torch.ao.quantization.fx._model_report.model_report" [color="black", label=<torch.ao.quantization.fx._model_report.model_report>, shape="box", style="solid"];
"torch.ao.quantization.fx._model_report.model_report_observer" [color="black", label=<torch.ao.quantization.fx._model_report.model_report_observer>, shape="box", style="solid"];
"torch.ao.quantization.fx._model_report.model_report_visualizer" [color="black", label=<torch.ao.quantization.fx._model_report.model_report_visualizer>, shape="box", style="solid"];
"torch.ao.quantization.fx.convert" [color="black", label=<torch.ao.quantization.fx.convert>, shape="box", style="solid"];
"torch.ao.quantization.fx.custom_config" [color="black", label=<torch.ao.quantization.fx.custom_config>, shape="box", style="solid"];
"torch.ao.quantization.fx.fuse" [color="black", label=<torch.ao.quantization.fx.fuse>, shape="box", style="solid"];
"torch.ao.quantization.fx.fuse_handler" [color="black", label=<torch.ao.quantization.fx.fuse_handler>, shape="box", style="solid"];
"torch.ao.quantization.fx.graph_module" [color="black", label=<torch.ao.quantization.fx.graph_module>, shape="box", style="solid"];
"torch.ao.quantization.fx.lower_to_fbgemm" [color="black", label=<torch.ao.quantization.fx.lower_to_fbgemm>, shape="box", style="solid"];
"torch.ao.quantization.fx.lower_to_qnnpack" [color="black", label=<torch.ao.quantization.fx.lower_to_qnnpack>, shape="box", style="solid"];
"torch.ao.quantization.fx.lstm_utils" [color="black", label=<torch.ao.quantization.fx.lstm_utils>, shape="box", style="solid"];
"torch.ao.quantization.fx.match_utils" [color="black", label=<torch.ao.quantization.fx.match_utils>, shape="box", style="solid"];
"torch.ao.quantization.fx.pattern_utils" [color="black", label=<torch.ao.quantization.fx.pattern_utils>, shape="box", style="solid"];
"torch.ao.quantization.fx.prepare" [color="black", label=<torch.ao.quantization.fx.prepare>, shape="box", style="solid"];
"torch.ao.quantization.fx.qconfig_mapping_utils" [color="black", label=<torch.ao.quantization.fx.qconfig_mapping_utils>, shape="box", style="solid"];
"torch.ao.quantization.fx.quantize_handler" [color="black", label=<torch.ao.quantization.fx.quantize_handler>, shape="box", style="solid"];
"torch.ao.quantization.fx.tracer" [color="black", label=<torch.ao.quantization.fx.tracer>, shape="box", style="solid"];
"torch.ao.quantization.fx.utils" [color="black", label=<torch.ao.quantization.fx.utils>, shape="box", style="solid"];
"torch.ao.quantization.observer" [color="black", label=<torch.ao.quantization.observer>, shape="box", style="solid"];
"torch.ao.quantization.pt2e" [color="black", label=<torch.ao.quantization.pt2e>, shape="box", style="solid"];
"torch.ao.quantization.pt2e._numeric_debugger" [color="black", label=<torch.ao.quantization.pt2e._numeric_debugger>, shape="box", style="solid"];
"torch.ao.quantization.pt2e.duplicate_dq_pass" [color="black", label=<torch.ao.quantization.pt2e.duplicate_dq_pass>, shape="box", style="solid"];
"torch.ao.quantization.pt2e.export_utils" [color="black", label=<torch.ao.quantization.pt2e.export_utils>, shape="box", style="solid"];
"torch.ao.quantization.pt2e.graph_utils" [color="black", label=<torch.ao.quantization.pt2e.graph_utils>, shape="box", style="solid"];
"torch.ao.quantization.pt2e.port_metadata_pass" [color="black", label=<torch.ao.quantization.pt2e.port_metadata_pass>, shape="box", style="solid"];
"torch.ao.quantization.pt2e.prepare" [color="black", label=<torch.ao.quantization.pt2e.prepare>, shape="box", style="solid"];
"torch.ao.quantization.pt2e.qat_utils" [color="black", label=<torch.ao.quantization.pt2e.qat_utils>, shape="box", style="solid"];
"torch.ao.quantization.pt2e.representation" [color="black", label=<torch.ao.quantization.pt2e.representation>, shape="box", style="solid"];
"torch.ao.quantization.pt2e.representation.rewrite" [color="black", label=<torch.ao.quantization.pt2e.representation.rewrite>, shape="box", style="solid"];
"torch.ao.quantization.pt2e.utils" [color="black", label=<torch.ao.quantization.pt2e.utils>, shape="box", style="solid"];
"torch.ao.quantization.qconfig" [color="black", label=<torch.ao.quantization.qconfig>, shape="box", style="solid"];
"torch.ao.quantization.qconfig_mapping" [color="black", label=<torch.ao.quantization.qconfig_mapping>, shape="box", style="solid"];
"torch.ao.quantization.quant_type" [color="black", label=<torch.ao.quantization.quant_type>, shape="box", style="solid"];
"torch.ao.quantization.quantization_mappings" [color="black", label=<torch.ao.quantization.quantization_mappings>, shape="box", style="solid"];
"torch.ao.quantization.quantize" [color="black", label=<torch.ao.quantization.quantize>, shape="box", style="solid"];
"torch.ao.quantization.quantize_fx" [color="black", label=<torch.ao.quantization.quantize_fx>, shape="box", style="solid"];
"torch.ao.quantization.quantize_jit" [color="black", label=<torch.ao.quantization.quantize_jit>, shape="box", style="solid"];
"torch.ao.quantization.quantize_pt2e" [color="black", label=<torch.ao.quantization.quantize_pt2e>, shape="box", style="solid"];
"torch.ao.quantization.quantizer" [color="black", label=<torch.ao.quantization.quantizer>, shape="box", style="solid"];
"torch.ao.quantization.quantizer.composable_quantizer" [color="black", label=<torch.ao.quantization.quantizer.composable_quantizer>, shape="box", style="solid"];
"torch.ao.quantization.quantizer.embedding_quantizer" [color="black", label=<torch.ao.quantization.quantizer.embedding_quantizer>, shape="box", style="solid"];
"torch.ao.quantization.quantizer.quantizer" [color="black", label=<torch.ao.quantization.quantizer.quantizer>, shape="box", style="solid"];
"torch.ao.quantization.quantizer.utils" [color="black", label=<torch.ao.quantization.quantizer.utils>, shape="box", style="solid"];
"torch.ao.quantization.quantizer.x86_inductor_quantizer" [color="black", label=<torch.ao.quantization.quantizer.x86_inductor_quantizer>, shape="box", style="solid"];
"torch.ao.quantization.quantizer.xnnpack_quantizer" [color="black", label=<torch.ao.quantization.quantizer.xnnpack_quantizer>, shape="box", style="solid"];
"torch.ao.quantization.quantizer.xnnpack_quantizer_utils" [color="black", label=<torch.ao.quantization.quantizer.xnnpack_quantizer_utils>, shape="box", style="solid"];
"torch.ao.quantization.quantizer.xpu_inductor_quantizer" [color="black", label=<torch.ao.quantization.quantizer.xpu_inductor_quantizer>, shape="box", style="solid"];
"torch.ao.quantization.stubs" [color="black", label=<torch.ao.quantization.stubs>, shape="box", style="solid"];
"torch.ao.quantization.utils" [color="black", label=<torch.ao.quantization.utils>, shape="box", style="solid"];
"torch.autograd" [color="black", label=<torch.autograd>, shape="box", style="solid"];
"torch.autograd._functions" [color="black", label=<torch.autograd._functions>, shape="box", style="solid"];
"torch.autograd._functions.tensor" [color="black", label=<torch.autograd._functions.tensor>, shape="box", style="solid"];
"torch.autograd._functions.utils" [color="black", label=<torch.autograd._functions.utils>, shape="box", style="solid"];
"torch.autograd.anomaly_mode" [color="black", label=<torch.autograd.anomaly_mode>, shape="box", style="solid"];
"torch.autograd.forward_ad" [color="black", label=<torch.autograd.forward_ad>, shape="box", style="solid"];
"torch.autograd.function" [color="black", label=<torch.autograd.function>, shape="box", style="solid"];
"torch.autograd.functional" [color="black", label=<torch.autograd.functional>, shape="box", style="solid"];
"torch.autograd.grad_mode" [color="black", label=<torch.autograd.grad_mode>, shape="box", style="solid"];
"torch.autograd.gradcheck" [color="black", label=<torch.autograd.gradcheck>, shape="box", style="solid"];
"torch.autograd.graph" [color="black", label=<torch.autograd.graph>, shape="box", style="solid"];
"torch.autograd.profiler" [color="black", label=<torch.autograd.profiler>, shape="box", style="solid"];
"torch.autograd.profiler_legacy" [color="black", label=<torch.autograd.profiler_legacy>, shape="box", style="solid"];
"torch.autograd.profiler_util" [color="black", label=<torch.autograd.profiler_util>, shape="box", style="solid"];
"torch.autograd.variable" [color="black", label=<torch.autograd.variable>, shape="box", style="solid"];
"torch.backends" [color="black", label=<torch.backends>, shape="box", style="solid"];
"torch.backends._coreml" [color="black", label=<torch.backends._coreml>, shape="box", style="solid"];
"torch.backends._coreml.preprocess" [color="black", label=<torch.backends._coreml.preprocess>, shape="box", style="solid"];
"torch.backends._nnapi" [color="black", label=<torch.backends._nnapi>, shape="box", style="solid"];
"torch.backends._nnapi.prepare" [color="black", label=<torch.backends._nnapi.prepare>, shape="box", style="solid"];
"torch.backends._nnapi.serializer" [color="black", label=<torch.backends._nnapi.serializer>, shape="box", style="solid"];
"torch.backends.cpu" [color="black", label=<torch.backends.cpu>, shape="box", style="solid"];
"torch.backends.cuda" [color="black", label=<torch.backends.cuda>, shape="box", style="solid"];
"torch.backends.cudnn" [color="black", label=<torch.backends.cudnn>, shape="box", style="solid"];
"torch.backends.cudnn.rnn" [color="black", label=<torch.backends.cudnn.rnn>, shape="box", style="solid"];
"torch.backends.cusparselt" [color="black", label=<torch.backends.cusparselt>, shape="box", style="solid"];
"torch.backends.mha" [color="black", label=<torch.backends.mha>, shape="box", style="solid"];
"torch.backends.mkl" [color="black", label=<torch.backends.mkl>, shape="box", style="solid"];
"torch.backends.mkldnn" [color="black", label=<torch.backends.mkldnn>, shape="box", style="solid"];
"torch.backends.mps" [color="black", label=<torch.backends.mps>, shape="box", style="solid"];
"torch.backends.nnpack" [color="black", label=<torch.backends.nnpack>, shape="box", style="solid"];
"torch.backends.openmp" [color="black", label=<torch.backends.openmp>, shape="box", style="solid"];
"torch.backends.opt_einsum" [color="black", label=<torch.backends.opt_einsum>, shape="box", style="solid"];
"torch.backends.quantized" [color="black", label=<torch.backends.quantized>, shape="box", style="solid"];
"torch.backends.xeon" [color="black", label=<torch.backends.xeon>, shape="box", style="solid"];
"torch.backends.xeon.run_cpu" [color="black", label=<torch.backends.xeon.run_cpu>, shape="box", style="solid"];
"torch.backends.xnnpack" [color="black", label=<torch.backends.xnnpack>, shape="box", style="solid"];
"torch.compiler" [color="black", label=<torch.compiler>, shape="box", style="solid"];
"torch.compiler.config" [color="black", label=<torch.compiler.config>, shape="box", style="solid"];
"torch.contrib" [color="black", label=<torch.contrib>, shape="box", style="solid"];
"torch.contrib._tensorboard_vis" [color="black", label=<torch.contrib._tensorboard_vis>, shape="box", style="solid"];
"torch.cpu" [color="black", label=<torch.cpu>, shape="box", style="solid"];
"torch.cpu.amp" [color="black", label=<torch.cpu.amp>, shape="box", style="solid"];
"torch.cpu.amp.autocast_mode" [color="black", label=<torch.cpu.amp.autocast_mode>, shape="box", style="solid"];
"torch.cpu.amp.grad_scaler" [color="black", label=<torch.cpu.amp.grad_scaler>, shape="box", style="solid"];
"torch.autograd.graph.save_on_cpu.__init__.torch.cuda" [color="black", label=<torch.cuda>, shape="box", style="solid"];
"torch.cuda._gpu_trace" [color="black", label=<torch.cuda._gpu_trace>, shape="box", style="solid"];
"torch.cuda._memory_viz" [color="black", label=<torch.cuda._memory_viz>, shape="box", style="solid"];
"torch.cuda._sanitizer" [color="black", label=<torch.cuda._sanitizer>, shape="box", style="solid"];
"torch.cuda._utils" [color="black", label=<torch.cuda._utils>, shape="box", style="solid"];
"torch.cuda.amp" [color="black", label=<torch.cuda.amp>, shape="box", style="solid"];
"torch.cuda.amp.autocast_mode" [color="black", label=<torch.cuda.amp.autocast_mode>, shape="box", style="solid"];
"torch.cuda.amp.common" [color="black", label=<torch.cuda.amp.common>, shape="box", style="solid"];
"torch.cuda.amp.grad_scaler" [color="black", label=<torch.cuda.amp.grad_scaler>, shape="box", style="solid"];
"torch.cuda.comm" [color="black", label=<torch.cuda.comm>, shape="box", style="solid"];
"torch.cuda.error" [color="black", label=<torch.cuda.error>, shape="box", style="solid"];
"torch.cuda.gds" [color="black", label=<torch.cuda.gds>, shape="box", style="solid"];
"torch.cuda.graphs" [color="black", label=<torch.cuda.graphs>, shape="box", style="solid"];
"torch.cuda.jiterator" [color="black", label=<torch.cuda.jiterator>, shape="box", style="solid"];
"torch.cuda.memory" [color="black", label=<torch.cuda.memory>, shape="box", style="solid"];
"torch.cuda.nccl" [color="black", label=<torch.cuda.nccl>, shape="box", style="solid"];
"torch.cuda.nvtx" [color="black", label=<torch.cuda.nvtx>, shape="box", style="solid"];
"torch.cuda.profiler" [color="black", label=<torch.cuda.profiler>, shape="box", style="solid"];
"torch.cuda.random" [color="black", label=<torch.cuda.random>, shape="box", style="solid"];
"torch.cuda.sparse" [color="black", label=<torch.cuda.sparse>, shape="box", style="solid"];
"torch.cuda.streams" [color="black", label=<torch.cuda.streams>, shape="box", style="solid"];
"torch.cuda.tunable" [color="black", label=<torch.cuda.tunable>, shape="box", style="solid"];
"torch.distributed" [color="black", label=<torch.distributed>, shape="box", style="solid"];
"torch.distributed._checkpointable" [color="black", label=<torch.distributed._checkpointable>, shape="box", style="solid"];
"torch.distributed._composable" [color="black", label=<torch.distributed._composable>, shape="box", style="solid"];
"torch.distributed._composable.checkpoint_activation" [color="black", label=<torch.distributed._composable.checkpoint_activation>, shape="box", style="solid"];
"torch.distributed._composable.contract" [color="black", label=<torch.distributed._composable.contract>, shape="box", style="solid"];
"torch.distributed._composable.fsdp" [color="black", label=<torch.distributed._composable.fsdp>, shape="box", style="solid"];
"torch.distributed._composable.fsdp.fully_shard" [color="black", label=<torch.distributed._composable.fsdp.fully_shard>, shape="box", style="solid"];
"torch.distributed._composable.replicate" [color="black", label=<torch.distributed._composable.replicate>, shape="box", style="solid"];
"torch.distributed._composable_state" [color="black", label=<torch.distributed._composable_state>, shape="box", style="solid"];
"torch.distributed._functional_collectives" [color="black", label=<torch.distributed._functional_collectives>, shape="box", style="solid"];
"torch.distributed._functional_collectives_impl" [color="black", label=<torch.distributed._functional_collectives_impl>, shape="box", style="solid"];
"torch.distributed._shard" [color="black", label=<torch.distributed._shard>, shape="box", style="solid"];
"torch.distributed._shard._utils" [color="black", label=<torch.distributed._shard._utils>, shape="box", style="solid"];
"torch.distributed._shard.api" [color="black", label=<torch.distributed._shard.api>, shape="box", style="solid"];
"torch.distributed._shard.checkpoint" [color="black", label=<torch.distributed._shard.checkpoint>, shape="box", style="solid"];
"torch.distributed._shard.common_op_utils" [color="black", label=<torch.distributed._shard.common_op_utils>, shape="box", style="solid"];
"torch.distributed._shard.metadata" [color="black", label=<torch.distributed._shard.metadata>, shape="box", style="solid"];
"torch.distributed._shard.op_registry_utils" [color="black", label=<torch.distributed._shard.op_registry_utils>, shape="box", style="solid"];
"torch.distributed._shard.sharded_optim" [color="black", label=<torch.distributed._shard.sharded_optim>, shape="box", style="solid"];
"torch.distributed._shard.sharded_optim.api" [color="black", label=<torch.distributed._shard.sharded_optim.api>, shape="box", style="solid"];
"torch.distributed._shard.sharded_tensor" [color="black", label=<torch.distributed._shard.sharded_tensor>, shape="box", style="solid"];
"torch.distributed._shard.sharded_tensor._ops" [color="black", label=<torch.distributed._shard.sharded_tensor._ops>, shape="box", style="solid"];
"torch.distributed._shard.sharded_tensor._ops._common" [color="black", label=<torch.distributed._shard.sharded_tensor._ops._common>, shape="box", style="solid"];
"torch.distributed._shard.sharded_tensor._ops.binary_cmp" [color="black", label=<torch.distributed._shard.sharded_tensor._ops.binary_cmp>, shape="box", style="solid"];
"torch.distributed._shard.sharded_tensor._ops.init" [color="black", label=<torch.distributed._shard.sharded_tensor._ops.init>, shape="box", style="solid"];
"torch.distributed._shard.sharded_tensor._ops.misc_ops" [color="black", label=<torch.distributed._shard.sharded_tensor._ops.misc_ops>, shape="box", style="solid"];
"torch.distributed._shard.sharded_tensor._ops.tensor_ops" [color="black", label=<torch.distributed._shard.sharded_tensor._ops.tensor_ops>, shape="box", style="solid"];
"torch.distributed._shard.sharded_tensor.api" [color="black", label=<torch.distributed._shard.sharded_tensor.api>, shape="box", style="solid"];
"torch.distributed._shard.sharded_tensor.logger" [color="black", label=<torch.distributed._shard.sharded_tensor.logger>, shape="box", style="solid"];
"torch.distributed._shard.sharded_tensor.logging_handlers" [color="black", label=<torch.distributed._shard.sharded_tensor.logging_handlers>, shape="box", style="solid"];
"torch.distributed._shard.sharded_tensor.metadata" [color="black", label=<torch.distributed._shard.sharded_tensor.metadata>, shape="box", style="solid"];
"torch.distributed._shard.sharded_tensor.reshard" [color="black", label=<torch.distributed._shard.sharded_tensor.reshard>, shape="box", style="solid"];
"torch.distributed._shard.sharded_tensor.shard" [color="black", label=<torch.distributed._shard.sharded_tensor.shard>, shape="box", style="solid"];
"torch.distributed._shard.sharded_tensor.utils" [color="black", label=<torch.distributed._shard.sharded_tensor.utils>, shape="box", style="solid"];
"torch.distributed._shard.sharder" [color="black", label=<torch.distributed._shard.sharder>, shape="box", style="solid"];
"torch.distributed._shard.sharding_plan" [color="black", label=<torch.distributed._shard.sharding_plan>, shape="box", style="solid"];
"torch.distributed._shard.sharding_plan.api" [color="black", label=<torch.distributed._shard.sharding_plan.api>, shape="box", style="solid"];
"torch.distributed._shard.sharding_spec" [color="black", label=<torch.distributed._shard.sharding_spec>, shape="box", style="solid"];
"torch.distributed._shard.sharding_spec._internals" [color="black", label=<torch.distributed._shard.sharding_spec._internals>, shape="box", style="solid"];
"torch.distributed._shard.sharding_spec.api" [color="black", label=<torch.distributed._shard.sharding_spec.api>, shape="box", style="solid"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec" [color="black", label=<torch.distributed._shard.sharding_spec.chunk_sharding_spec>, shape="box", style="solid"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops" [color="black", label=<torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops>, shape="box", style="solid"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops._common" [color="black", label=<torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops._common>, shape="box", style="solid"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding" [color="black", label=<torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding>, shape="box", style="solid"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding_bag" [color="black", label=<torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding_bag>, shape="box", style="solid"];
"torch.distributed._sharded_tensor" [color="black", label=<torch.distributed._sharded_tensor>, shape="box", style="solid"];
"torch.distributed._sharding_spec" [color="black", label=<torch.distributed._sharding_spec>, shape="box", style="solid"];
"torch.distributed._state_dict_utils" [color="black", label=<torch.distributed._state_dict_utils>, shape="box", style="solid"];
"torch.distributed._symmetric_memory" [color="black", label=<torch.distributed._symmetric_memory>, shape="box", style="solid"];
"torch.distributed._tensor" [color="black", label=<torch.distributed._tensor>, shape="box", style="solid"];
"torch.distributed._tensor.api" [color="black", label=<torch.distributed._tensor.api>, shape="box", style="solid"];
"torch.distributed._tensor.placement_types" [color="black", label=<torch.distributed._tensor.placement_types>, shape="box", style="solid"];
"torch.distributed._tools" [color="black", label=<torch.distributed._tools>, shape="box", style="solid"];
"torch.distributed._tools.fsdp2_mem_tracker" [color="black", label=<torch.distributed._tools.fsdp2_mem_tracker>, shape="box", style="solid"];
"torch.distributed._tools.ilp_utils" [color="black", label=<torch.distributed._tools.ilp_utils>, shape="box", style="solid"];
"torch.distributed._tools.mem_tracker" [color="black", label=<torch.distributed._tools.mem_tracker>, shape="box", style="solid"];
"torch.distributed._tools.memory_tracker" [color="black", label=<torch.distributed._tools.memory_tracker>, shape="box", style="solid"];
"torch.distributed._tools.mod_tracker" [color="black", label=<torch.distributed._tools.mod_tracker>, shape="box", style="solid"];
"torch.distributed._tools.runtime_estimator" [color="black", label=<torch.distributed._tools.runtime_estimator>, shape="box", style="solid"];
"torch.distributed._tools.sac_estimator" [color="black", label=<torch.distributed._tools.sac_estimator>, shape="box", style="solid"];
"torch.distributed._tools.sac_ilp" [color="black", label=<torch.distributed._tools.sac_ilp>, shape="box", style="solid"];
"torch.distributed.algorithms" [color="black", label=<torch.distributed.algorithms>, shape="box", style="solid"];
"torch.distributed.algorithms._checkpoint" [color="black", label=<torch.distributed.algorithms._checkpoint>, shape="box", style="solid"];
"torch.distributed.algorithms._checkpoint.checkpoint_wrapper" [color="black", label=<torch.distributed.algorithms._checkpoint.checkpoint_wrapper>, shape="box", style="solid"];
"torch.distributed.algorithms._comm_hooks" [color="black", label=<torch.distributed.algorithms._comm_hooks>, shape="box", style="solid"];
"torch.distributed.algorithms._comm_hooks.default_hooks" [color="black", label=<torch.distributed.algorithms._comm_hooks.default_hooks>, shape="box", style="solid"];
"torch.distributed.algorithms._optimizer_overlap" [color="black", label=<torch.distributed.algorithms._optimizer_overlap>, shape="box", style="solid"];
"torch.distributed.algorithms._optimizer_overlap.optimizer_overlap" [color="black", label=<torch.distributed.algorithms._optimizer_overlap.optimizer_overlap>, shape="box", style="solid"];
"torch.distributed.algorithms._quantization" [color="black", label=<torch.distributed.algorithms._quantization>, shape="box", style="solid"];
"torch.distributed.algorithms._quantization.quantization" [color="black", label=<torch.distributed.algorithms._quantization.quantization>, shape="box", style="solid"];
"torch.distributed.algorithms.ddp_comm_hooks" [color="black", label=<torch.distributed.algorithms.ddp_comm_hooks>, shape="box", style="solid"];
"torch.distributed.algorithms.ddp_comm_hooks.ddp_zero_hook" [color="black", label=<torch.distributed.algorithms.ddp_comm_hooks.ddp_zero_hook>, shape="box", style="solid"];
"torch.distributed.algorithms.ddp_comm_hooks.debugging_hooks" [color="black", label=<torch.distributed.algorithms.ddp_comm_hooks.debugging_hooks>, shape="box", style="solid"];
"torch.distributed.algorithms.ddp_comm_hooks.default_hooks" [color="black", label=<torch.distributed.algorithms.ddp_comm_hooks.default_hooks>, shape="box", style="solid"];
"torch.distributed.algorithms.ddp_comm_hooks.mixed_precision_hooks" [color="black", label=<torch.distributed.algorithms.ddp_comm_hooks.mixed_precision_hooks>, shape="box", style="solid"];
"torch.distributed.algorithms.ddp_comm_hooks.optimizer_overlap_hooks" [color="black", label=<torch.distributed.algorithms.ddp_comm_hooks.optimizer_overlap_hooks>, shape="box", style="solid"];
"torch.distributed.algorithms.ddp_comm_hooks.post_localSGD_hook" [color="black", label=<torch.distributed.algorithms.ddp_comm_hooks.post_localSGD_hook>, shape="box", style="solid"];
"torch.distributed.algorithms.ddp_comm_hooks.powerSGD_hook" [color="black", label=<torch.distributed.algorithms.ddp_comm_hooks.powerSGD_hook>, shape="box", style="solid"];
"torch.distributed.algorithms.ddp_comm_hooks.quantization_hooks" [color="black", label=<torch.distributed.algorithms.ddp_comm_hooks.quantization_hooks>, shape="box", style="solid"];
"torch.distributed.algorithms.join" [color="black", label=<torch.distributed.algorithms.join>, shape="box", style="solid"];
"torch.distributed.algorithms.model_averaging" [color="black", label=<torch.distributed.algorithms.model_averaging>, shape="box", style="solid"];
"torch.distributed.algorithms.model_averaging.averagers" [color="black", label=<torch.distributed.algorithms.model_averaging.averagers>, shape="box", style="solid"];
"torch.distributed.algorithms.model_averaging.hierarchical_model_averager" [color="black", label=<torch.distributed.algorithms.model_averaging.hierarchical_model_averager>, shape="box", style="solid"];
"torch.distributed.algorithms.model_averaging.utils" [color="black", label=<torch.distributed.algorithms.model_averaging.utils>, shape="box", style="solid"];
"torch.distributed.argparse_util" [color="black", label=<torch.distributed.argparse_util>, shape="box", style="solid"];
"torch.distributed.autograd" [color="black", label=<torch.distributed.autograd>, shape="box", style="solid"];
"torch.distributed.c10d_logger" [color="black", label=<torch.distributed.c10d_logger>, shape="box", style="solid"];
"torch.distributed.checkpoint" [color="black", label=<torch.distributed.checkpoint>, shape="box", style="solid"];
"torch.distributed.checkpoint._checkpointer" [color="black", label=<torch.distributed.checkpoint._checkpointer>, shape="box", style="solid"];
"torch.distributed.checkpoint._dedup_save_plans" [color="black", label=<torch.distributed.checkpoint._dedup_save_plans>, shape="box", style="solid"];
"torch.distributed.checkpoint._dedup_tensors" [color="black", label=<torch.distributed.checkpoint._dedup_tensors>, shape="box", style="solid"];
"torch.distributed.checkpoint._fsspec_filesystem" [color="black", label=<torch.distributed.checkpoint._fsspec_filesystem>, shape="box", style="solid"];
"torch.distributed.checkpoint._nested_dict" [color="black", label=<torch.distributed.checkpoint._nested_dict>, shape="box", style="solid"];
"torch.distributed.checkpoint._sharded_tensor_utils" [color="black", label=<torch.distributed.checkpoint._sharded_tensor_utils>, shape="box", style="solid"];
"torch.distributed.checkpoint._storage_utils" [color="black", label=<torch.distributed.checkpoint._storage_utils>, shape="box", style="solid"];
"torch.distributed.checkpoint._traverse" [color="black", label=<torch.distributed.checkpoint._traverse>, shape="box", style="solid"];
"torch.distributed.checkpoint._version" [color="black", label=<torch.distributed.checkpoint._version>, shape="box", style="solid"];
"torch.distributed.checkpoint.api" [color="black", label=<torch.distributed.checkpoint.api>, shape="box", style="solid"];
"torch.distributed.checkpoint.default_planner" [color="black", label=<torch.distributed.checkpoint.default_planner>, shape="box", style="solid"];
"torch.distributed.checkpoint.filesystem" [color="black", label=<torch.distributed.checkpoint.filesystem>, shape="box", style="solid"];
"torch.distributed.checkpoint.format_utils" [color="black", label=<torch.distributed.checkpoint.format_utils>, shape="box", style="solid"];
"torch.distributed.checkpoint.logger" [color="black", label=<torch.distributed.checkpoint.logger>, shape="box", style="solid"];
"torch.distributed.checkpoint.logging_handlers" [color="black", label=<torch.distributed.checkpoint.logging_handlers>, shape="box", style="solid"];
"torch.distributed.checkpoint.metadata" [color="black", label=<torch.distributed.checkpoint.metadata>, shape="box", style="solid"];
"torch.distributed.checkpoint.optimizer" [color="black", label=<torch.distributed.checkpoint.optimizer>, shape="box", style="solid"];
"torch.distributed.checkpoint.planner" [color="black", label=<torch.distributed.checkpoint.planner>, shape="box", style="solid"];
"torch.distributed.checkpoint.planner_helpers" [color="black", label=<torch.distributed.checkpoint.planner_helpers>, shape="box", style="solid"];
"torch.distributed.checkpoint.resharding" [color="black", label=<torch.distributed.checkpoint.resharding>, shape="box", style="solid"];
"torch.distributed.checkpoint.staging" [color="black", label=<torch.distributed.checkpoint.staging>, shape="box", style="solid"];
"torch.distributed.checkpoint.state_dict" [color="black", label=<torch.distributed.checkpoint.state_dict>, shape="box", style="solid"];
"torch.distributed.checkpoint.state_dict_loader" [color="black", label=<torch.distributed.checkpoint.state_dict_loader>, shape="box", style="solid"];
"torch.distributed.checkpoint.state_dict_saver" [color="black", label=<torch.distributed.checkpoint.state_dict_saver>, shape="box", style="solid"];
"torch.distributed.checkpoint.stateful" [color="black", label=<torch.distributed.checkpoint.stateful>, shape="box", style="solid"];
"torch.distributed.checkpoint.storage" [color="black", label=<torch.distributed.checkpoint.storage>, shape="box", style="solid"];
"torch.distributed.checkpoint.utils" [color="black", label=<torch.distributed.checkpoint.utils>, shape="box", style="solid"];
"torch.distributed.collective_utils" [color="black", label=<torch.distributed.collective_utils>, shape="box", style="solid"];
"torch.distributed.constants" [color="black", label=<torch.distributed.constants>, shape="box", style="solid"];
"torch.distributed.device_mesh" [color="black", label=<torch.distributed.device_mesh>, shape="box", style="solid"];
"torch.distributed.distributed_c10d" [color="black", label=<torch.distributed.distributed_c10d>, shape="box", style="solid"];
"torch.distributed.elastic" [color="black", label=<torch.distributed.elastic>, shape="box", style="solid"];
"torch.distributed.elastic.agent" [color="black", label=<torch.distributed.elastic.agent>, shape="box", style="solid"];
"torch.distributed.elastic.agent.server" [color="black", label=<torch.distributed.elastic.agent.server>, shape="box", style="solid"];
"torch.distributed.elastic.agent.server.api" [color="black", label=<torch.distributed.elastic.agent.server.api>, shape="box", style="solid"];
"torch.distributed.elastic.agent.server.health_check_server" [color="black", label=<torch.distributed.elastic.agent.server.health_check_server>, shape="box", style="solid"];
"torch.distributed.elastic.agent.server.local_elastic_agent" [color="black", label=<torch.distributed.elastic.agent.server.local_elastic_agent>, shape="box", style="solid"];
"torch.distributed.elastic.control_plane" [color="black", label=<torch.distributed.elastic.control_plane>, shape="box", style="solid"];
"torch.distributed.elastic.events" [color="black", label=<torch.distributed.elastic.events>, shape="box", style="solid"];
"torch.distributed.elastic.events.api" [color="black", label=<torch.distributed.elastic.events.api>, shape="box", style="solid"];
"torch.distributed.elastic.events.handlers" [color="black", label=<torch.distributed.elastic.events.handlers>, shape="box", style="solid"];
"torch.distributed.elastic.metrics" [color="black", label=<torch.distributed.elastic.metrics>, shape="box", style="solid"];
"torch.distributed.elastic.metrics.api" [color="black", label=<torch.distributed.elastic.metrics.api>, shape="box", style="solid"];
"torch.distributed.elastic.multiprocessing" [color="black", label=<torch.distributed.elastic.multiprocessing>, shape="box", style="solid"];
"torch.distributed.elastic.multiprocessing.api" [color="black", label=<torch.distributed.elastic.multiprocessing.api>, shape="box", style="solid"];
"torch.distributed.elastic.multiprocessing.errors" [color="black", label=<torch.distributed.elastic.multiprocessing.errors>, shape="box", style="solid"];
"torch.distributed.elastic.multiprocessing.errors.error_handler" [color="black", label=<torch.distributed.elastic.multiprocessing.errors.error_handler>, shape="box", style="solid"];
"torch.distributed.elastic.multiprocessing.errors.handlers" [color="black", label=<torch.distributed.elastic.multiprocessing.errors.handlers>, shape="box", style="solid"];
"torch.distributed.elastic.multiprocessing.redirects" [color="black", label=<torch.distributed.elastic.multiprocessing.redirects>, shape="box", style="solid"];
"torch.distributed.elastic.multiprocessing.subprocess_handler" [color="black", label=<torch.distributed.elastic.multiprocessing.subprocess_handler>, shape="box", style="solid"];
"torch.distributed.elastic.multiprocessing.subprocess_handler.handlers" [color="black", label=<torch.distributed.elastic.multiprocessing.subprocess_handler.handlers>, shape="box", style="solid"];
"torch.distributed.elastic.multiprocessing.subprocess_handler.subprocess_handler" [color="black", label=<torch.distributed.elastic.multiprocessing.subprocess_handler.subprocess_handler>, shape="box", style="solid"];
"torch.distributed.elastic.multiprocessing.tail_log" [color="black", label=<torch.distributed.elastic.multiprocessing.tail_log>, shape="box", style="solid"];
"torch.distributed.elastic.rendezvous" [color="black", label=<torch.distributed.elastic.rendezvous>, shape="box", style="solid"];
"torch.distributed.elastic.rendezvous.api" [color="black", label=<torch.distributed.elastic.rendezvous.api>, shape="box", style="solid"];
"torch.distributed.elastic.rendezvous.c10d_rendezvous_backend" [color="black", label=<torch.distributed.elastic.rendezvous.c10d_rendezvous_backend>, shape="box", style="solid"];
"torch.distributed.elastic.rendezvous.dynamic_rendezvous" [color="black", label=<torch.distributed.elastic.rendezvous.dynamic_rendezvous>, shape="box", style="solid"];
"torch.distributed.elastic.rendezvous.etcd_rendezvous" [color="black", label=<torch.distributed.elastic.rendezvous.etcd_rendezvous>, shape="box", style="solid"];
"torch.distributed.elastic.rendezvous.etcd_rendezvous_backend" [color="black", label=<torch.distributed.elastic.rendezvous.etcd_rendezvous_backend>, shape="box", style="solid"];
"torch.distributed.elastic.rendezvous.etcd_server" [color="black", label=<torch.distributed.elastic.rendezvous.etcd_server>, shape="box", style="solid"];
"torch.distributed.elastic.rendezvous.etcd_store" [color="black", label=<torch.distributed.elastic.rendezvous.etcd_store>, shape="box", style="solid"];
"torch.distributed.elastic.rendezvous.registry" [color="black", label=<torch.distributed.elastic.rendezvous.registry>, shape="box", style="solid"];
"torch.distributed.elastic.rendezvous.static_tcp_rendezvous" [color="black", label=<torch.distributed.elastic.rendezvous.static_tcp_rendezvous>, shape="box", style="solid"];
"torch.distributed.elastic.rendezvous.utils" [color="black", label=<torch.distributed.elastic.rendezvous.utils>, shape="box", style="solid"];
"torch.distributed.elastic.timer" [color="black", label=<torch.distributed.elastic.timer>, shape="box", style="solid"];
"torch.distributed.elastic.timer.api" [color="black", label=<torch.distributed.elastic.timer.api>, shape="box", style="solid"];
"torch.distributed.elastic.timer.debug_info_logging" [color="black", label=<torch.distributed.elastic.timer.debug_info_logging>, shape="box", style="solid"];
"torch.distributed.elastic.timer.file_based_local_timer" [color="black", label=<torch.distributed.elastic.timer.file_based_local_timer>, shape="box", style="solid"];
"torch.distributed.elastic.timer.local_timer" [color="black", label=<torch.distributed.elastic.timer.local_timer>, shape="box", style="solid"];
"torch.distributed.elastic.utils" [color="black", label=<torch.distributed.elastic.utils>, shape="box", style="solid"];
"torch.distributed.elastic.utils.api" [color="black", label=<torch.distributed.elastic.utils.api>, shape="box", style="solid"];
"torch.distributed.elastic.utils.data" [color="black", label=<torch.distributed.elastic.utils.data>, shape="box", style="solid"];
"torch.distributed.elastic.utils.data.cycling_iterator" [color="black", label=<torch.distributed.elastic.utils.data.cycling_iterator>, shape="box", style="solid"];
"torch.distributed.elastic.utils.data.elastic_distributed_sampler" [color="black", label=<torch.distributed.elastic.utils.data.elastic_distributed_sampler>, shape="box", style="solid"];
"torch.distributed.elastic.utils.distributed" [color="black", label=<torch.distributed.elastic.utils.distributed>, shape="box", style="solid"];
"torch.distributed.elastic.utils.log_level" [color="black", label=<torch.distributed.elastic.utils.log_level>, shape="box", style="solid"];
"torch.distributed.elastic.utils.logging" [color="black", label=<torch.distributed.elastic.utils.logging>, shape="box", style="solid"];
"torch.distributed.elastic.utils.store" [color="black", label=<torch.distributed.elastic.utils.store>, shape="box", style="solid"];
"torch.distributed.fsdp" [color="black", label=<torch.distributed.fsdp>, shape="box", style="solid"];
"torch.distributed.fsdp._common_utils" [color="black", label=<torch.distributed.fsdp._common_utils>, shape="box", style="solid"];
"torch.distributed.fsdp._debug_utils" [color="black", label=<torch.distributed.fsdp._debug_utils>, shape="box", style="solid"];
"torch.distributed.fsdp._dynamo_utils" [color="black", label=<torch.distributed.fsdp._dynamo_utils>, shape="box", style="solid"];
"torch.distributed.fsdp._exec_order_utils" [color="black", label=<torch.distributed.fsdp._exec_order_utils>, shape="box", style="solid"];
"torch.distributed.fsdp._flat_param" [color="black", label=<torch.distributed.fsdp._flat_param>, shape="box", style="solid"];
"torch.distributed.fsdp._fsdp_extensions" [color="black", label=<torch.distributed.fsdp._fsdp_extensions>, shape="box", style="solid"];
"torch.distributed.fsdp._fully_shard" [color="black", label=<torch.distributed.fsdp._fully_shard>, shape="box", style="solid"];
"torch.distributed.fsdp._fully_shard._fsdp_api" [color="black", label=<torch.distributed.fsdp._fully_shard._fsdp_api>, shape="box", style="solid"];
"torch.distributed.fsdp._fully_shard._fsdp_collectives" [color="black", label=<torch.distributed.fsdp._fully_shard._fsdp_collectives>, shape="box", style="solid"];
"torch.distributed.fsdp._fully_shard._fsdp_common" [color="black", label=<torch.distributed.fsdp._fully_shard._fsdp_common>, shape="box", style="solid"];
"torch.distributed.fsdp._fully_shard._fsdp_init" [color="black", label=<torch.distributed.fsdp._fully_shard._fsdp_init>, shape="box", style="solid"];
"torch.distributed.fsdp._fully_shard._fsdp_param" [color="black", label=<torch.distributed.fsdp._fully_shard._fsdp_param>, shape="box", style="solid"];
"torch.distributed.fsdp._fully_shard._fsdp_param_group" [color="black", label=<torch.distributed.fsdp._fully_shard._fsdp_param_group>, shape="box", style="solid"];
"torch.distributed.fsdp._fully_shard._fsdp_state" [color="black", label=<torch.distributed.fsdp._fully_shard._fsdp_state>, shape="box", style="solid"];
"torch.distributed.fsdp._fully_shard._fully_shard" [color="black", label=<torch.distributed.fsdp._fully_shard._fully_shard>, shape="box", style="solid"];
"torch.distributed.fsdp._init_utils" [color="black", label=<torch.distributed.fsdp._init_utils>, shape="box", style="solid"];
"torch.distributed.fsdp._limiter_utils" [color="black", label=<torch.distributed.fsdp._limiter_utils>, shape="box", style="solid"];
"torch.distributed.fsdp._optim_utils" [color="black", label=<torch.distributed.fsdp._optim_utils>, shape="box", style="solid"];
"torch.distributed.fsdp._runtime_utils" [color="black", label=<torch.distributed.fsdp._runtime_utils>, shape="box", style="solid"];
"torch.distributed.fsdp._shard_utils" [color="black", label=<torch.distributed.fsdp._shard_utils>, shape="box", style="solid"];
"torch.distributed.fsdp._state_dict_utils" [color="black", label=<torch.distributed.fsdp._state_dict_utils>, shape="box", style="solid"];
"torch.distributed.fsdp._trace_utils" [color="black", label=<torch.distributed.fsdp._trace_utils>, shape="box", style="solid"];
"torch.distributed.fsdp._traversal_utils" [color="black", label=<torch.distributed.fsdp._traversal_utils>, shape="box", style="solid"];
"torch.distributed.fsdp._unshard_param_utils" [color="black", label=<torch.distributed.fsdp._unshard_param_utils>, shape="box", style="solid"];
"torch.distributed.fsdp._wrap_utils" [color="black", label=<torch.distributed.fsdp._wrap_utils>, shape="box", style="solid"];
"torch.distributed.fsdp.api" [color="black", label=<torch.distributed.fsdp.api>, shape="box", style="solid"];
"torch.distributed.fsdp.fully_sharded_data_parallel" [color="black", label=<torch.distributed.fsdp.fully_sharded_data_parallel>, shape="box", style="solid"];
"torch.distributed.fsdp.sharded_grad_scaler" [color="black", label=<torch.distributed.fsdp.sharded_grad_scaler>, shape="box", style="solid"];
"torch.distributed.fsdp.wrap" [color="black", label=<torch.distributed.fsdp.wrap>, shape="box", style="solid"];
"torch.distributed.launch" [color="black", label=<torch.distributed.launch>, shape="box", style="solid"];
"torch.distributed.launcher" [color="black", label=<torch.distributed.launcher>, shape="box", style="solid"];
"torch.distributed.launcher.api" [color="black", label=<torch.distributed.launcher.api>, shape="box", style="solid"];
"torch.distributed.logging_handlers" [color="black", label=<torch.distributed.logging_handlers>, shape="box", style="solid"];
"torch.distributed.nn" [color="black", label=<torch.distributed.nn>, shape="box", style="solid"];
"torch.distributed.nn.api" [color="black", label=<torch.distributed.nn.api>, shape="box", style="solid"];
"torch.distributed.nn.api.remote_module" [color="black", label=<torch.distributed.nn.api.remote_module>, shape="box", style="solid"];
"torch.distributed.nn.functional" [color="black", label=<torch.distributed.nn.functional>, shape="box", style="solid"];
"torch.distributed.nn.jit" [color="black", label=<torch.distributed.nn.jit>, shape="box", style="solid"];
"torch.distributed.nn.jit.instantiator" [color="black", label=<torch.distributed.nn.jit.instantiator>, shape="box", style="solid"];
"torch.distributed.nn.jit.templates" [color="black", label=<torch.distributed.nn.jit.templates>, shape="box", style="solid"];
"torch.distributed.nn.jit.templates.remote_module_template" [color="black", label=<torch.distributed.nn.jit.templates.remote_module_template>, shape="box", style="solid"];
"torch.distributed.optim" [color="black", label=<torch.distributed.optim>, shape="box", style="solid"];
"torch.distributed.optim._deprecation_warning" [color="black", label=<torch.distributed.optim._deprecation_warning>, shape="box", style="solid"];
"torch.distributed.optim.apply_optimizer_in_backward" [color="black", label=<torch.distributed.optim.apply_optimizer_in_backward>, shape="box", style="solid"];
"torch.distributed.optim.functional_adadelta" [color="black", label=<torch.distributed.optim.functional_adadelta>, shape="box", style="solid"];
"torch.distributed.optim.functional_adagrad" [color="black", label=<torch.distributed.optim.functional_adagrad>, shape="box", style="solid"];
"torch.distributed.optim.functional_adam" [color="black", label=<torch.distributed.optim.functional_adam>, shape="box", style="solid"];
"torch.distributed.optim.functional_adamax" [color="black", label=<torch.distributed.optim.functional_adamax>, shape="box", style="solid"];
"torch.distributed.optim.functional_adamw" [color="black", label=<torch.distributed.optim.functional_adamw>, shape="box", style="solid"];
"torch.distributed.optim.functional_rmsprop" [color="black", label=<torch.distributed.optim.functional_rmsprop>, shape="box", style="solid"];
"torch.distributed.optim.functional_rprop" [color="black", label=<torch.distributed.optim.functional_rprop>, shape="box", style="solid"];
"torch.distributed.optim.functional_sgd" [color="black", label=<torch.distributed.optim.functional_sgd>, shape="box", style="solid"];
"torch.distributed.optim.named_optimizer" [color="black", label=<torch.distributed.optim.named_optimizer>, shape="box", style="solid"];
"torch.distributed.optim.optimizer" [color="black", label=<torch.distributed.optim.optimizer>, shape="box", style="solid"];
"torch.distributed.optim.post_localSGD_optimizer" [color="black", label=<torch.distributed.optim.post_localSGD_optimizer>, shape="box", style="solid"];
"torch.distributed.optim.utils" [color="black", label=<torch.distributed.optim.utils>, shape="box", style="solid"];
"torch.distributed.optim.zero_redundancy_optimizer" [color="black", label=<torch.distributed.optim.zero_redundancy_optimizer>, shape="box", style="solid"];
"torch.distributed.pipelining" [color="black", label=<torch.distributed.pipelining>, shape="box", style="solid"];
"torch.distributed.pipelining._IR" [color="black", label=<torch.distributed.pipelining._IR>, shape="box", style="solid"];
"torch.distributed.pipelining._backward" [color="black", label=<torch.distributed.pipelining._backward>, shape="box", style="solid"];
"torch.distributed.pipelining._debug" [color="black", label=<torch.distributed.pipelining._debug>, shape="box", style="solid"];
"torch.distributed.pipelining._unflatten" [color="black", label=<torch.distributed.pipelining._unflatten>, shape="box", style="solid"];
"torch.distributed.pipelining._utils" [color="black", label=<torch.distributed.pipelining._utils>, shape="box", style="solid"];
"torch.distributed.pipelining.microbatch" [color="black", label=<torch.distributed.pipelining.microbatch>, shape="box", style="solid"];
"torch.distributed.pipelining.schedules" [color="black", label=<torch.distributed.pipelining.schedules>, shape="box", style="solid"];
"torch.distributed.pipelining.stage" [color="black", label=<torch.distributed.pipelining.stage>, shape="box", style="solid"];
"torch.distributed.remote_device" [color="black", label=<torch.distributed.remote_device>, shape="box", style="solid"];
"torch.distributed.rendezvous" [color="black", label=<torch.distributed.rendezvous>, shape="box", style="solid"];
"torch.distributed.rpc" [color="black", label=<torch.distributed.rpc>, shape="box", style="solid"];
"torch.distributed.rpc._testing" [color="black", label=<torch.distributed.rpc._testing>, shape="box", style="solid"];
"torch.distributed.rpc._testing.faulty_agent_backend_registry" [color="black", label=<torch.distributed.rpc._testing.faulty_agent_backend_registry>, shape="box", style="solid"];
"torch.distributed.rpc._utils" [color="black", label=<torch.distributed.rpc._utils>, shape="box", style="solid"];
"torch.distributed.rpc.api" [color="black", label=<torch.distributed.rpc.api>, shape="box", style="solid"];
"torch.distributed.rpc.backend_registry" [color="black", label=<torch.distributed.rpc.backend_registry>, shape="box", style="solid"];
"torch.distributed.rpc.constants" [color="black", label=<torch.distributed.rpc.constants>, shape="box", style="solid"];
"torch.distributed.rpc.functions" [color="black", label=<torch.distributed.rpc.functions>, shape="box", style="solid"];
"torch.distributed.rpc.internal" [color="black", label=<torch.distributed.rpc.internal>, shape="box", style="solid"];
"torch.distributed.rpc.options" [color="black", label=<torch.distributed.rpc.options>, shape="box", style="solid"];
"torch.distributed.rpc.rref_proxy" [color="black", label=<torch.distributed.rpc.rref_proxy>, shape="box", style="solid"];
"torch.distributed.rpc.server_process_global_profiler" [color="black", label=<torch.distributed.rpc.server_process_global_profiler>, shape="box", style="solid"];
"torch.distributed.run" [color="black", label=<torch.distributed.run>, shape="box", style="solid"];
"torch.distributed.tensor" [color="black", label=<torch.distributed.tensor>, shape="box", style="solid"];
"torch.distributed.tensor._api" [color="black", label=<torch.distributed.tensor._api>, shape="box", style="solid"];
"torch.distributed.tensor._collective_utils" [color="black", label=<torch.distributed.tensor._collective_utils>, shape="box", style="solid"];
"torch.distributed.tensor._dispatch" [color="black", label=<torch.distributed.tensor._dispatch>, shape="box", style="solid"];
"torch.distributed.tensor._dtensor_spec" [color="black", label=<torch.distributed.tensor._dtensor_spec>, shape="box", style="solid"];
"torch.distributed.tensor._op_schema" [color="black", label=<torch.distributed.tensor._op_schema>, shape="box", style="solid"];
"torch.distributed.tensor._ops" [color="black", label=<torch.distributed.tensor._ops>, shape="box", style="solid"];
"torch.distributed.tensor._ops._common_rules" [color="black", label=<torch.distributed.tensor._ops._common_rules>, shape="box", style="solid"];
"torch.distributed.tensor._ops._conv_ops" [color="black", label=<torch.distributed.tensor._ops._conv_ops>, shape="box", style="solid"];
"torch.distributed.tensor._ops._einsum_strategy" [color="black", label=<torch.distributed.tensor._ops._einsum_strategy>, shape="box", style="solid"];
"torch.distributed.tensor._ops._embedding_ops" [color="black", label=<torch.distributed.tensor._ops._embedding_ops>, shape="box", style="solid"];
"torch.distributed.tensor._ops._experimental_ops" [color="black", label=<torch.distributed.tensor._ops._experimental_ops>, shape="box", style="solid"];
"torch.distributed.tensor._ops._math_ops" [color="black", label=<torch.distributed.tensor._ops._math_ops>, shape="box", style="solid"];
"torch.distributed.tensor._ops._matrix_ops" [color="black", label=<torch.distributed.tensor._ops._matrix_ops>, shape="box", style="solid"];
"torch.distributed.tensor._ops._pointwise_ops" [color="black", label=<torch.distributed.tensor._ops._pointwise_ops>, shape="box", style="solid"];
"torch.distributed.tensor._ops._random_ops" [color="black", label=<torch.distributed.tensor._ops._random_ops>, shape="box", style="solid"];
"torch.distributed.tensor._ops._tensor_ops" [color="black", label=<torch.distributed.tensor._ops._tensor_ops>, shape="box", style="solid"];
"torch.distributed.tensor._ops._view_ops" [color="black", label=<torch.distributed.tensor._ops._view_ops>, shape="box", style="solid"];
"torch.distributed.tensor._ops.utils" [color="black", label=<torch.distributed.tensor._ops.utils>, shape="box", style="solid"];
"torch.distributed.tensor._random" [color="black", label=<torch.distributed.tensor._random>, shape="box", style="solid"];
"torch.distributed.tensor._redistribute" [color="black", label=<torch.distributed.tensor._redistribute>, shape="box", style="solid"];
"torch.distributed.tensor._sharding_prop" [color="black", label=<torch.distributed.tensor._sharding_prop>, shape="box", style="solid"];
"torch.distributed.tensor._shards_wrapper" [color="black", label=<torch.distributed.tensor._shards_wrapper>, shape="box", style="solid"];
"torch.distributed.tensor._tp_conv" [color="black", label=<torch.distributed.tensor._tp_conv>, shape="box", style="solid"];
"torch.distributed.tensor._utils" [color="black", label=<torch.distributed.tensor._utils>, shape="box", style="solid"];
"torch.distributed.tensor.debug" [color="black", label=<torch.distributed.tensor.debug>, shape="box", style="solid"];
"torch.distributed.tensor.debug._comm_mode" [color="black", label=<torch.distributed.tensor.debug._comm_mode>, shape="box", style="solid"];
"torch.distributed.tensor.debug._op_coverage" [color="black", label=<torch.distributed.tensor.debug._op_coverage>, shape="box", style="solid"];
"torch.distributed.tensor.debug._visualize_sharding" [color="black", label=<torch.distributed.tensor.debug._visualize_sharding>, shape="box", style="solid"];
"torch.distributed.tensor.device_mesh" [color="black", label=<torch.distributed.tensor.device_mesh>, shape="box", style="solid"];
"torch.distributed.tensor.experimental" [color="black", label=<torch.distributed.tensor.experimental>, shape="box", style="solid"];
"torch.distributed.tensor.experimental._attention" [color="black", label=<torch.distributed.tensor.experimental._attention>, shape="box", style="solid"];
"torch.distributed.tensor.experimental._func_map" [color="black", label=<torch.distributed.tensor.experimental._func_map>, shape="box", style="solid"];
"torch.distributed.tensor.experimental._register_sharding" [color="black", label=<torch.distributed.tensor.experimental._register_sharding>, shape="box", style="solid"];
"torch.distributed.tensor.experimental._tp_transform" [color="black", label=<torch.distributed.tensor.experimental._tp_transform>, shape="box", style="solid"];
"torch.distributed.tensor.parallel" [color="black", label=<torch.distributed.tensor.parallel>, shape="box", style="solid"];
"torch.distributed.tensor.parallel._data_parallel_utils" [color="black", label=<torch.distributed.tensor.parallel._data_parallel_utils>, shape="box", style="solid"];
"torch.distributed.tensor.parallel._utils" [color="black", label=<torch.distributed.tensor.parallel._utils>, shape="box", style="solid"];
"torch.distributed.tensor.parallel.api" [color="black", label=<torch.distributed.tensor.parallel.api>, shape="box", style="solid"];
"torch.distributed.tensor.parallel.ddp" [color="black", label=<torch.distributed.tensor.parallel.ddp>, shape="box", style="solid"];
"torch.distributed.tensor.parallel.fsdp" [color="black", label=<torch.distributed.tensor.parallel.fsdp>, shape="box", style="solid"];
"torch.distributed.tensor.parallel.input_reshard" [color="black", label=<torch.distributed.tensor.parallel.input_reshard>, shape="box", style="solid"];
"torch.distributed.tensor.parallel.loss" [color="black", label=<torch.distributed.tensor.parallel.loss>, shape="box", style="solid"];
"torch.distributed.tensor.parallel.style" [color="black", label=<torch.distributed.tensor.parallel.style>, shape="box", style="solid"];
"torch.distributed.tensor.placement_types" [color="black", label=<torch.distributed.tensor.placement_types>, shape="box", style="solid"];
"torch.distributed.utils" [color="black", label=<torch.distributed.utils>, shape="box", style="solid"];
"torch.distributions" [color="black", label=<torch.distributions>, shape="box", style="solid"];
"torch.distributions.bernoulli" [color="black", label=<torch.distributions.bernoulli>, shape="box", style="solid"];
"torch.distributions.beta" [color="black", label=<torch.distributions.beta>, shape="box", style="solid"];
"torch.distributions.binomial" [color="black", label=<torch.distributions.binomial>, shape="box", style="solid"];
"torch.distributions.categorical" [color="black", label=<torch.distributions.categorical>, shape="box", style="solid"];
"torch.distributions.cauchy" [color="black", label=<torch.distributions.cauchy>, shape="box", style="solid"];
"torch.distributions.chi2" [color="black", label=<torch.distributions.chi2>, shape="box", style="solid"];
"torch.distributions.constraint_registry" [color="black", label=<torch.distributions.constraint_registry>, shape="box", style="solid"];
"torch.distributions.constraints" [color="black", label=<torch.distributions.constraints>, shape="box", style="solid"];
"torch.distributions.continuous_bernoulli" [color="black", label=<torch.distributions.continuous_bernoulli>, shape="box", style="solid"];
"torch.distributions.dirichlet" [color="black", label=<torch.distributions.dirichlet>, shape="box", style="solid"];
"torch.distributions.distribution" [color="black", label=<torch.distributions.distribution>, shape="box", style="solid"];
"torch.distributions.exp_family" [color="black", label=<torch.distributions.exp_family>, shape="box", style="solid"];
"torch.distributions.exponential" [color="black", label=<torch.distributions.exponential>, shape="box", style="solid"];
"torch.distributions.fishersnedecor" [color="black", label=<torch.distributions.fishersnedecor>, shape="box", style="solid"];
"torch.distributions.gamma" [color="black", label=<torch.distributions.gamma>, shape="box", style="solid"];
"torch.distributions.geometric" [color="black", label=<torch.distributions.geometric>, shape="box", style="solid"];
"torch.distributions.gumbel" [color="black", label=<torch.distributions.gumbel>, shape="box", style="solid"];
"torch.distributions.half_cauchy" [color="black", label=<torch.distributions.half_cauchy>, shape="box", style="solid"];
"torch.distributions.half_normal" [color="black", label=<torch.distributions.half_normal>, shape="box", style="solid"];
"torch.distributions.independent" [color="black", label=<torch.distributions.independent>, shape="box", style="solid"];
"torch.distributions.inverse_gamma" [color="black", label=<torch.distributions.inverse_gamma>, shape="box", style="solid"];
"torch.distributions.kl" [color="black", label=<torch.distributions.kl>, shape="box", style="solid"];
"torch.distributions.kumaraswamy" [color="black", label=<torch.distributions.kumaraswamy>, shape="box", style="solid"];
"torch.distributions.laplace" [color="black", label=<torch.distributions.laplace>, shape="box", style="solid"];
"torch.distributions.lkj_cholesky" [color="black", label=<torch.distributions.lkj_cholesky>, shape="box", style="solid"];
"torch.distributions.log_normal" [color="black", label=<torch.distributions.log_normal>, shape="box", style="solid"];
"torch.distributions.logistic_normal" [color="black", label=<torch.distributions.logistic_normal>, shape="box", style="solid"];
"torch.distributions.lowrank_multivariate_normal" [color="black", label=<torch.distributions.lowrank_multivariate_normal>, shape="box", style="solid"];
"torch.distributions.mixture_same_family" [color="black", label=<torch.distributions.mixture_same_family>, shape="box", style="solid"];
"torch.distributions.multinomial" [color="black", label=<torch.distributions.multinomial>, shape="box", style="solid"];
"torch.distributions.multivariate_normal" [color="black", label=<torch.distributions.multivariate_normal>, shape="box", style="solid"];
"torch.distributions.negative_binomial" [color="black", label=<torch.distributions.negative_binomial>, shape="box", style="solid"];
"torch.distributions.normal" [color="black", label=<torch.distributions.normal>, shape="box", style="solid"];
"torch.distributions.one_hot_categorical" [color="black", label=<torch.distributions.one_hot_categorical>, shape="box", style="solid"];
"torch.distributions.pareto" [color="black", label=<torch.distributions.pareto>, shape="box", style="solid"];
"torch.distributions.poisson" [color="black", label=<torch.distributions.poisson>, shape="box", style="solid"];
"torch.distributions.relaxed_bernoulli" [color="black", label=<torch.distributions.relaxed_bernoulli>, shape="box", style="solid"];
"torch.distributions.relaxed_categorical" [color="black", label=<torch.distributions.relaxed_categorical>, shape="box", style="solid"];
"torch.distributions.studentT" [color="black", label=<torch.distributions.studentT>, shape="box", style="solid"];
"torch.distributions.transformed_distribution" [color="black", label=<torch.distributions.transformed_distribution>, shape="box", style="solid"];
"torch.distributions.transforms" [color="black", label=<torch.distributions.transforms>, shape="box", style="solid"];
"torch.distributions.uniform" [color="black", label=<torch.distributions.uniform>, shape="box", style="solid"];
"torch.distributions.utils" [color="black", label=<torch.distributions.utils>, shape="box", style="solid"];
"torch.distributions.von_mises" [color="black", label=<torch.distributions.von_mises>, shape="box", style="solid"];
"torch.distributions.weibull" [color="black", label=<torch.distributions.weibull>, shape="box", style="solid"];
"torch.distributions.wishart" [color="black", label=<torch.distributions.wishart>, shape="box", style="solid"];
"torch.export" [color="black", label=<torch.export>, shape="box", style="solid"];
"torch.export._draft_export" [color="black", label=<torch.export._draft_export>, shape="box", style="solid"];
"torch.export._remove_auto_functionalized_pass" [color="black", label=<torch.export._remove_auto_functionalized_pass>, shape="box", style="solid"];
"torch.export._remove_effect_tokens_pass" [color="black", label=<torch.export._remove_effect_tokens_pass>, shape="box", style="solid"];
"torch.export._safeguard" [color="black", label=<torch.export._safeguard>, shape="box", style="solid"];
"torch.export._swap" [color="black", label=<torch.export._swap>, shape="box", style="solid"];
"torch.export._trace" [color="black", label=<torch.export._trace>, shape="box", style="solid"];
"torch.export._tree_utils" [color="black", label=<torch.export._tree_utils>, shape="box", style="solid"];
"torch.export._unlift" [color="black", label=<torch.export._unlift>, shape="box", style="solid"];
"torch.export.custom_obj" [color="black", label=<torch.export.custom_obj>, shape="box", style="solid"];
"torch.export.decomp_utils" [color="black", label=<torch.export.decomp_utils>, shape="box", style="solid"];
"torch.export.dynamic_shapes" [color="black", label=<torch.export.dynamic_shapes>, shape="box", style="solid"];
"torch.export.experimental" [color="black", label=<torch.export.experimental>, shape="box", style="solid"];
"torch.export.exported_program" [color="black", label=<torch.export.exported_program>, shape="box", style="solid"];
"torch.export.graph_signature" [color="black", label=<torch.export.graph_signature>, shape="box", style="solid"];
"torch.export.passes" [color="black", label=<torch.export.passes>, shape="box", style="solid"];
"torch.export.unflatten" [color="black", label=<torch.export.unflatten>, shape="box", style="solid"];
"torch.fft" [color="black", label=<torch.fft>, shape="box", style="solid"];
"torch.func" [color="black", label=<torch.func>, shape="box", style="solid"];
"torch.functional" [color="black", label=<torch.functional>, shape="box", style="solid"];
"torch.futures" [color="black", label=<torch.futures>, shape="box", style="solid"];
"torch.fx" [color="black", label=<torch.fx>, shape="box", style="solid"];
"torch.fx._compatibility" [color="black", label=<torch.fx._compatibility>, shape="box", style="solid"];
"torch.fx._lazy_graph_module" [color="black", label=<torch.fx._lazy_graph_module>, shape="box", style="solid"];
"torch.fx._pytree" [color="black", label=<torch.fx._pytree>, shape="box", style="solid"];
"torch.fx._symbolic_trace" [color="black", label=<torch.fx._symbolic_trace>, shape="box", style="solid"];
"torch.fx._utils" [color="black", label=<torch.fx._utils>, shape="box", style="solid"];
"torch.fx.annotate" [color="black", label=<torch.fx.annotate>, shape="box", style="solid"];
"torch.fx.config" [color="black", label=<torch.fx.config>, shape="box", style="solid"];
"torch.fx.experimental" [color="black", label=<torch.fx.experimental>, shape="box", style="solid"];
"torch.fx.experimental._backward_state" [color="black", label=<torch.fx.experimental._backward_state>, shape="box", style="solid"];
"torch.fx.experimental._config" [color="black", label=<torch.fx.experimental._config>, shape="box", style="solid"];
"torch.fx.experimental._constant_symnode" [color="black", label=<torch.fx.experimental._constant_symnode>, shape="box", style="solid"];
"torch.fx.experimental.accelerator_partitioner" [color="black", label=<torch.fx.experimental.accelerator_partitioner>, shape="box", style="solid"];
"torch.fx.experimental.const_fold" [color="black", label=<torch.fx.experimental.const_fold>, shape="box", style="solid"];
"torch.fx.experimental.debug" [color="black", label=<torch.fx.experimental.debug>, shape="box", style="solid"];
"torch.fx.experimental.graph_gradual_typechecker" [color="black", label=<torch.fx.experimental.graph_gradual_typechecker>, shape="box", style="solid"];
"torch.fx.experimental.merge_matmul" [color="black", label=<torch.fx.experimental.merge_matmul>, shape="box", style="solid"];
"torch.fx.experimental.meta_tracer" [color="black", label=<torch.fx.experimental.meta_tracer>, shape="box", style="solid"];
"torch.fx.experimental.migrate_gradual_types" [color="black", label=<torch.fx.experimental.migrate_gradual_types>, shape="box", style="solid"];
"torch.fx.experimental.migrate_gradual_types.constraint" [color="black", label=<torch.fx.experimental.migrate_gradual_types.constraint>, shape="box", style="solid"];
"torch.fx.experimental.migrate_gradual_types.constraint_generator" [color="black", label=<torch.fx.experimental.migrate_gradual_types.constraint_generator>, shape="box", style="solid"];
"torch.fx.experimental.migrate_gradual_types.constraint_transformation" [color="black", label=<torch.fx.experimental.migrate_gradual_types.constraint_transformation>, shape="box", style="solid"];
"torch.fx.experimental.migrate_gradual_types.operation" [color="black", label=<torch.fx.experimental.migrate_gradual_types.operation>, shape="box", style="solid"];
"torch.fx.experimental.migrate_gradual_types.transform_to_z3" [color="black", label=<torch.fx.experimental.migrate_gradual_types.transform_to_z3>, shape="box", style="solid"];
"torch.fx.experimental.migrate_gradual_types.util" [color="black", label=<torch.fx.experimental.migrate_gradual_types.util>, shape="box", style="solid"];
"torch.fx.experimental.migrate_gradual_types.z3_types" [color="black", label=<torch.fx.experimental.migrate_gradual_types.z3_types>, shape="box", style="solid"];
"torch.fx.experimental.normalize" [color="black", label=<torch.fx.experimental.normalize>, shape="box", style="solid"];
"torch.fx.experimental.optimization" [color="black", label=<torch.fx.experimental.optimization>, shape="box", style="solid"];
"torch.fx.experimental.partitioner_utils" [color="black", label=<torch.fx.experimental.partitioner_utils>, shape="box", style="solid"];
"torch.fx.experimental.proxy_tensor" [color="black", label=<torch.fx.experimental.proxy_tensor>, shape="box", style="solid"];
"torch.fx.experimental.recording" [color="black", label=<torch.fx.experimental.recording>, shape="box", style="solid"];
"torch.fx.experimental.refinement_types" [color="black", label=<torch.fx.experimental.refinement_types>, shape="box", style="solid"];
"torch.fx.experimental.rewriter" [color="black", label=<torch.fx.experimental.rewriter>, shape="box", style="solid"];
"torch.fx.experimental.schema_type_annotation" [color="black", label=<torch.fx.experimental.schema_type_annotation>, shape="box", style="solid"];
"torch.fx.experimental.sym_node" [color="black", label=<torch.fx.experimental.sym_node>, shape="box", style="solid"];
"torch.fx.experimental.symbolic_shapes" [color="black", label=<torch.fx.experimental.symbolic_shapes>, shape="box", style="solid"];
"torch.fx.experimental.unification" [color="black", label=<torch.fx.experimental.unification>, shape="box", style="solid"];
"torch.fx.experimental.unification.core" [color="black", label=<torch.fx.experimental.unification.core>, shape="box", style="solid"];
"torch.fx.experimental.unification.dispatch" [color="black", label=<torch.fx.experimental.unification.dispatch>, shape="box", style="solid"];
"torch.fx.experimental.unification.match" [color="black", label=<torch.fx.experimental.unification.match>, shape="box", style="solid"];
"torch.fx.experimental.unification.more" [color="black", label=<torch.fx.experimental.unification.more>, shape="box", style="solid"];
"torch.fx.experimental.unification.multipledispatch" [color="black", label=<torch.fx.experimental.unification.multipledispatch>, shape="box", style="solid"];
"torch.fx.experimental.unification.multipledispatch.conflict" [color="black", label=<torch.fx.experimental.unification.multipledispatch.conflict>, shape="box", style="solid"];
"torch.fx.experimental.unification.multipledispatch.core" [color="black", label=<torch.fx.experimental.unification.multipledispatch.core>, shape="box", style="solid"];
"torch.fx.experimental.unification.multipledispatch.dispatcher" [color="black", label=<torch.fx.experimental.unification.multipledispatch.dispatcher>, shape="box", style="solid"];
"torch.fx.experimental.unification.multipledispatch.utils" [color="black", label=<torch.fx.experimental.unification.multipledispatch.utils>, shape="box", style="solid"];
"torch.fx.experimental.unification.multipledispatch.variadic" [color="black", label=<torch.fx.experimental.unification.multipledispatch.variadic>, shape="box", style="solid"];
"torch.fx.experimental.unification.unification_tools" [color="black", label=<torch.fx.experimental.unification.unification_tools>, shape="box", style="solid"];
"torch.fx.experimental.unification.utils" [color="black", label=<torch.fx.experimental.unification.utils>, shape="box", style="solid"];
"torch.fx.experimental.unification.variable" [color="black", label=<torch.fx.experimental.unification.variable>, shape="box", style="solid"];
"torch.fx.experimental.unify_refinements" [color="black", label=<torch.fx.experimental.unify_refinements>, shape="box", style="solid"];
"torch.fx.experimental.validator" [color="black", label=<torch.fx.experimental.validator>, shape="box", style="solid"];
"torch.fx.graph" [color="black", label=<torch.fx.graph>, shape="box", style="solid"];
"torch.fx.graph_module" [color="black", label=<torch.fx.graph_module>, shape="box", style="solid"];
"torch.fx.immutable_collections" [color="black", label=<torch.fx.immutable_collections>, shape="box", style="solid"];
"torch.fx.interpreter" [color="black", label=<torch.fx.interpreter>, shape="box", style="solid"];
"torch.fx.node" [color="black", label=<torch.fx.node>, shape="box", style="solid"];
"torch.fx.operator_schemas" [color="black", label=<torch.fx.operator_schemas>, shape="box", style="solid"];
"torch.fx.passes" [color="black", label=<torch.fx.passes>, shape="box", style="solid"];
"torch.fx.passes._tensorify_python_scalars" [color="black", label=<torch.fx.passes._tensorify_python_scalars>, shape="box", style="solid"];
"torch.fx.passes.annotate_getitem_nodes" [color="black", label=<torch.fx.passes.annotate_getitem_nodes>, shape="box", style="solid"];
"torch.fx.passes.backends" [color="black", label=<torch.fx.passes.backends>, shape="box", style="solid"];
"torch.fx.passes.backends.cudagraphs" [color="black", label=<torch.fx.passes.backends.cudagraphs>, shape="box", style="solid"];
"torch.fx.passes.dialect" [color="black", label=<torch.fx.passes.dialect>, shape="box", style="solid"];
"torch.fx.passes.dialect.common" [color="black", label=<torch.fx.passes.dialect.common>, shape="box", style="solid"];
"torch.fx.passes.dialect.common.cse_pass" [color="black", label=<torch.fx.passes.dialect.common.cse_pass>, shape="box", style="solid"];
"torch.fx.passes.fake_tensor_prop" [color="black", label=<torch.fx.passes.fake_tensor_prop>, shape="box", style="solid"];
"torch.fx.passes.graph_drawer" [color="black", label=<torch.fx.passes.graph_drawer>, shape="box", style="solid"];
"torch.fx.passes.graph_manipulation" [color="black", label=<torch.fx.passes.graph_manipulation>, shape="box", style="solid"];
"torch.fx.passes.graph_transform_observer" [color="black", label=<torch.fx.passes.graph_transform_observer>, shape="box", style="solid"];
"torch.fx.passes.infra" [color="black", label=<torch.fx.passes.infra>, shape="box", style="solid"];
"torch.fx.passes.infra.partitioner" [color="black", label=<torch.fx.passes.infra.partitioner>, shape="box", style="solid"];
"torch.fx.passes.infra.pass_base" [color="black", label=<torch.fx.passes.infra.pass_base>, shape="box", style="solid"];
"torch.fx.passes.infra.pass_manager" [color="black", label=<torch.fx.passes.infra.pass_manager>, shape="box", style="solid"];
"torch.fx.passes.net_min_base" [color="black", label=<torch.fx.passes.net_min_base>, shape="box", style="solid"];
"torch.fx.passes.operator_support" [color="black", label=<torch.fx.passes.operator_support>, shape="box", style="solid"];
"torch.fx.passes.param_fetch" [color="black", label=<torch.fx.passes.param_fetch>, shape="box", style="solid"];
"torch.fx.passes.pass_manager" [color="black", label=<torch.fx.passes.pass_manager>, shape="box", style="solid"];
"torch.fx.passes.reinplace" [color="black", label=<torch.fx.passes.reinplace>, shape="box", style="solid"];
"torch.fx.passes.runtime_assert" [color="black", label=<torch.fx.passes.runtime_assert>, shape="box", style="solid"];
"torch.fx.passes.shape_prop" [color="black", label=<torch.fx.passes.shape_prop>, shape="box", style="solid"];
"torch.fx.passes.split_module" [color="black", label=<torch.fx.passes.split_module>, shape="box", style="solid"];
"torch.fx.passes.split_utils" [color="black", label=<torch.fx.passes.split_utils>, shape="box", style="solid"];
"torch.fx.passes.splitter_base" [color="black", label=<torch.fx.passes.splitter_base>, shape="box", style="solid"];
"torch.fx.passes.tests" [color="black", label=<torch.fx.passes.tests>, shape="box", style="solid"];
"torch.fx.passes.tests.test_pass_manager" [color="black", label=<torch.fx.passes.tests.test_pass_manager>, shape="box", style="solid"];
"torch.fx.passes.tools_common" [color="black", label=<torch.fx.passes.tools_common>, shape="box", style="solid"];
"torch.fx.passes.utils" [color="black", label=<torch.fx.passes.utils>, shape="box", style="solid"];
"torch.fx.passes.utils.common" [color="black", label=<torch.fx.passes.utils.common>, shape="box", style="solid"];
"torch.fx.passes.utils.fuser_utils" [color="black", label=<torch.fx.passes.utils.fuser_utils>, shape="box", style="solid"];
"torch.fx.passes.utils.matcher_utils" [color="black", label=<torch.fx.passes.utils.matcher_utils>, shape="box", style="solid"];
"torch.fx.passes.utils.matcher_with_name_node_map_utils" [color="black", label=<torch.fx.passes.utils.matcher_with_name_node_map_utils>, shape="box", style="solid"];
"torch.fx.passes.utils.source_matcher_utils" [color="black", label=<torch.fx.passes.utils.source_matcher_utils>, shape="box", style="solid"];
"torch.fx.proxy" [color="black", label=<torch.fx.proxy>, shape="box", style="solid"];
"torch.fx.subgraph_rewriter" [color="black", label=<torch.fx.subgraph_rewriter>, shape="box", style="solid"];
"torch.fx.tensor_type" [color="black", label=<torch.fx.tensor_type>, shape="box", style="solid"];
"torch.fx.traceback" [color="black", label=<torch.fx.traceback>, shape="box", style="solid"];
"torch.hub" [color="black", label=<torch.hub>, shape="box", style="solid"];
"torch.jit" [color="black", label=<torch.jit>, shape="box", style="solid"];
"torch.jit._async" [color="black", label=<torch.jit._async>, shape="box", style="solid"];
"torch.jit._await" [color="black", label=<torch.jit._await>, shape="box", style="solid"];
"torch.jit._builtins" [color="black", label=<torch.jit._builtins>, shape="box", style="solid"];
"torch.jit._check" [color="black", label=<torch.jit._check>, shape="box", style="solid"];
"torch.jit._dataclass_impls" [color="black", label=<torch.jit._dataclass_impls>, shape="box", style="solid"];
"torch.jit._decomposition_utils" [color="black", label=<torch.jit._decomposition_utils>, shape="box", style="solid"];
"torch.jit._decompositions" [color="black", label=<torch.jit._decompositions>, shape="box", style="solid"];
"torch.jit._freeze" [color="black", label=<torch.jit._freeze>, shape="box", style="solid"];
"torch.jit._fuser" [color="black", label=<torch.jit._fuser>, shape="box", style="solid"];
"torch.jit._ir_utils" [color="black", label=<torch.jit._ir_utils>, shape="box", style="solid"];
"torch.jit._logging" [color="black", label=<torch.jit._logging>, shape="box", style="solid"];
"torch.jit._monkeytype_config" [color="black", label=<torch.jit._monkeytype_config>, shape="box", style="solid"];
"torch.jit._passes" [color="black", label=<torch.jit._passes>, shape="box", style="solid"];
"torch.jit._passes._property_propagation" [color="black", label=<torch.jit._passes._property_propagation>, shape="box", style="solid"];
"torch.jit._pickle" [color="black", label=<torch.jit._pickle>, shape="box", style="solid"];
"torch.jit._recursive" [color="black", label=<torch.jit._recursive>, shape="box", style="solid"];
"torch.jit._script" [color="black", label=<torch.jit._script>, shape="box", style="solid"];
"torch.jit._serialization" [color="black", label=<torch.jit._serialization>, shape="box", style="solid"];
"torch.jit._shape_functions" [color="black", label=<torch.jit._shape_functions>, shape="box", style="solid"];
"torch.jit._state" [color="black", label=<torch.jit._state>, shape="box", style="solid"];
"torch.jit._trace" [color="black", label=<torch.jit._trace>, shape="box", style="solid"];
"torch.jit.annotations" [color="black", label=<torch.jit.annotations>, shape="box", style="solid"];
"torch.jit.frontend" [color="black", label=<torch.jit.frontend>, shape="box", style="solid"];
"torch.jit.generate_bytecode" [color="black", label=<torch.jit.generate_bytecode>, shape="box", style="solid"];
"torch.jit.mobile" [color="black", label=<torch.jit.mobile>, shape="box", style="solid"];
"torch.jit.quantized" [color="black", label=<torch.jit.quantized>, shape="box", style="solid"];
"torch.jit.supported_ops" [color="black", label=<torch.jit.supported_ops>, shape="box", style="solid"];
"torch.jit.unsupported_tensor_ops" [color="black", label=<torch.jit.unsupported_tensor_ops>, shape="box", style="solid"];
"torch.library" [color="black", label=<torch.library>, shape="box", style="solid"];
"torch.linalg" [color="black", label=<torch.linalg>, shape="box", style="solid"];
"torch.masked" [color="black", label=<torch.masked>, shape="box", style="solid"];
"torch.masked._docs" [color="black", label=<torch.masked._docs>, shape="box", style="solid"];
"torch.masked._ops" [color="black", label=<torch.masked._ops>, shape="box", style="solid"];
"torch.masked.maskedtensor" [color="black", label=<torch.masked.maskedtensor>, shape="box", style="solid"];
"torch.masked.maskedtensor._ops_refs" [color="black", label=<torch.masked.maskedtensor._ops_refs>, shape="box", style="solid"];
"torch.masked.maskedtensor.binary" [color="black", label=<torch.masked.maskedtensor.binary>, shape="box", style="solid"];
"torch.masked.maskedtensor.core" [color="black", label=<torch.masked.maskedtensor.core>, shape="box", style="solid"];
"torch.masked.maskedtensor.creation" [color="black", label=<torch.masked.maskedtensor.creation>, shape="box", style="solid"];
"torch.masked.maskedtensor.passthrough" [color="black", label=<torch.masked.maskedtensor.passthrough>, shape="box", style="solid"];
"torch.masked.maskedtensor.reductions" [color="black", label=<torch.masked.maskedtensor.reductions>, shape="box", style="solid"];
"torch.masked.maskedtensor.unary" [color="black", label=<torch.masked.maskedtensor.unary>, shape="box", style="solid"];
"torch.monitor" [color="black", label=<torch.monitor>, shape="box", style="solid"];
"torch.mps" [color="black", label=<torch.mps>, shape="box", style="solid"];
"torch.mps.event" [color="black", label=<torch.mps.event>, shape="box", style="solid"];
"torch.mps.profiler" [color="black", label=<torch.mps.profiler>, shape="box", style="solid"];
"torch.mtia" [color="black", label=<torch.mtia>, shape="box", style="solid"];
"torch.mtia._utils" [color="black", label=<torch.mtia._utils>, shape="box", style="solid"];
"torch.mtia.memory" [color="black", label=<torch.mtia.memory>, shape="box", style="solid"];
"torch.multiprocessing" [color="black", label=<torch.multiprocessing>, shape="box", style="solid"];
"torch.multiprocessing._atfork" [color="black", label=<torch.multiprocessing._atfork>, shape="box", style="solid"];
"torch.multiprocessing.pool" [color="black", label=<torch.multiprocessing.pool>, shape="box", style="solid"];
"torch.multiprocessing.queue" [color="black", label=<torch.multiprocessing.queue>, shape="box", style="solid"];
"torch.multiprocessing.reductions" [color="black", label=<torch.multiprocessing.reductions>, shape="box", style="solid"];
"torch.multiprocessing.spawn" [color="black", label=<torch.multiprocessing.spawn>, shape="box", style="solid"];
"torch.nested" [color="black", label=<torch.nested>, shape="box", style="solid"];
"torch.nested._internal" [color="black", label=<torch.nested._internal>, shape="box", style="solid"];
"torch.nested._internal.nested_int" [color="black", label=<torch.nested._internal.nested_int>, shape="box", style="solid"];
"torch.nested._internal.nested_tensor" [color="black", label=<torch.nested._internal.nested_tensor>, shape="box", style="solid"];
"torch.nested._internal.ops" [color="black", label=<torch.nested._internal.ops>, shape="box", style="solid"];
"torch.nested._internal.sdpa" [color="black", label=<torch.nested._internal.sdpa>, shape="box", style="solid"];
"torch.nn" [color="black", label=<torch.nn>, shape="box", style="solid"];
"torch.nn._reduction" [color="black", label=<torch.nn._reduction>, shape="box", style="solid"];
"torch.nn.attention" [color="black", label=<torch.nn.attention>, shape="box", style="solid"];
"torch.nn.attention._utils" [color="black", label=<torch.nn.attention._utils>, shape="box", style="solid"];
"torch.nn.attention.bias" [color="black", label=<torch.nn.attention.bias>, shape="box", style="solid"];
"torch.nn.attention.experimental" [color="black", label=<torch.nn.attention.experimental>, shape="box", style="solid"];
"torch.nn.attention.experimental._paged_attention" [color="black", label=<torch.nn.attention.experimental._paged_attention>, shape="box", style="solid"];
"torch.nn.attention.flex_attention" [color="black", label=<torch.nn.attention.flex_attention>, shape="box", style="solid"];
"torch.nn.backends" [color="black", label=<torch.nn.backends>, shape="box", style="solid"];
"torch.nn.backends.thnn" [color="black", label=<torch.nn.backends.thnn>, shape="box", style="solid"];
"torch.nn.common_types" [color="black", label=<torch.nn.common_types>, shape="box", style="solid"];
"torch.nn.cpp" [color="black", label=<torch.nn.cpp>, shape="box", style="solid"];
"torch.nn.functional" [color="black", label=<torch.nn.functional>, shape="box", style="solid"];
"torch.nn.grad" [color="black", label=<torch.nn.grad>, shape="box", style="solid"];
"torch.nn.init" [color="black", label=<torch.nn.init>, shape="box", style="solid"];
"torch.nn.intrinsic" [color="black", label=<torch.nn.intrinsic>, shape="box", style="solid"];
"torch.nn.intrinsic.modules" [color="black", label=<torch.nn.intrinsic.modules>, shape="box", style="solid"];
"torch.nn.intrinsic.modules.fused" [color="black", label=<torch.nn.intrinsic.modules.fused>, shape="box", style="solid"];
"torch.nn.intrinsic.qat" [color="black", label=<torch.nn.intrinsic.qat>, shape="box", style="solid"];
"torch.nn.intrinsic.qat.modules" [color="black", label=<torch.nn.intrinsic.qat.modules>, shape="box", style="solid"];
"torch.nn.intrinsic.qat.modules.conv_fused" [color="black", label=<torch.nn.intrinsic.qat.modules.conv_fused>, shape="box", style="solid"];
"torch.nn.intrinsic.qat.modules.linear_fused" [color="black", label=<torch.nn.intrinsic.qat.modules.linear_fused>, shape="box", style="solid"];
"torch.nn.intrinsic.qat.modules.linear_relu" [color="black", label=<torch.nn.intrinsic.qat.modules.linear_relu>, shape="box", style="solid"];
"torch.nn.intrinsic.quantized" [color="black", label=<torch.nn.intrinsic.quantized>, shape="box", style="solid"];
"torch.nn.intrinsic.quantized.dynamic" [color="black", label=<torch.nn.intrinsic.quantized.dynamic>, shape="box", style="solid"];
"torch.nn.intrinsic.quantized.dynamic.modules" [color="black", label=<torch.nn.intrinsic.quantized.dynamic.modules>, shape="box", style="solid"];
"torch.nn.intrinsic.quantized.dynamic.modules.linear_relu" [color="black", label=<torch.nn.intrinsic.quantized.dynamic.modules.linear_relu>, shape="box", style="solid"];
"torch.nn.intrinsic.quantized.modules" [color="black", label=<torch.nn.intrinsic.quantized.modules>, shape="box", style="solid"];
"torch.nn.intrinsic.quantized.modules.bn_relu" [color="black", label=<torch.nn.intrinsic.quantized.modules.bn_relu>, shape="box", style="solid"];
"torch.nn.intrinsic.quantized.modules.conv_relu" [color="black", label=<torch.nn.intrinsic.quantized.modules.conv_relu>, shape="box", style="solid"];
"torch.nn.intrinsic.quantized.modules.linear_relu" [color="black", label=<torch.nn.intrinsic.quantized.modules.linear_relu>, shape="box", style="solid"];
"torch.nn.modules" [color="black", label=<torch.nn.modules>, shape="box", style="solid"];
"torch.nn.modules._functions" [color="black", label=<torch.nn.modules._functions>, shape="box", style="solid"];
"torch.nn.modules.activation" [color="black", label=<torch.nn.modules.activation>, shape="box", style="solid"];
"torch.nn.modules.adaptive" [color="black", label=<torch.nn.modules.adaptive>, shape="box", style="solid"];
"torch.nn.modules.batchnorm" [color="black", label=<torch.nn.modules.batchnorm>, shape="box", style="solid"];
"torch.nn.modules.channelshuffle" [color="black", label=<torch.nn.modules.channelshuffle>, shape="box", style="solid"];
"torch.nn.modules.container" [color="black", label=<torch.nn.modules.container>, shape="box", style="solid"];
"torch.nn.modules.conv" [color="black", label=<torch.nn.modules.conv>, shape="box", style="solid"];
"torch.nn.modules.distance" [color="black", label=<torch.nn.modules.distance>, shape="box", style="solid"];
"torch.nn.modules.dropout" [color="black", label=<torch.nn.modules.dropout>, shape="box", style="solid"];
"torch.nn.modules.flatten" [color="black", label=<torch.nn.modules.flatten>, shape="box", style="solid"];
"torch.nn.modules.fold" [color="black", label=<torch.nn.modules.fold>, shape="box", style="solid"];
"torch.nn.modules.instancenorm" [color="black", label=<torch.nn.modules.instancenorm>, shape="box", style="solid"];
"torch.nn.modules.lazy" [color="black", label=<torch.nn.modules.lazy>, shape="box", style="solid"];
"torch.nn.modules.linear" [color="black", label=<torch.nn.modules.linear>, shape="box", style="solid"];
"torch.nn.modules.loss" [color="black", label=<torch.nn.modules.loss>, shape="box", style="solid"];
"torch.nn.modules.module" [color="black", label=<torch.nn.modules.module>, shape="box", style="solid"];
"torch.nn.modules.normalization" [color="black", label=<torch.nn.modules.normalization>, shape="box", style="solid"];
"torch.nn.modules.padding" [color="black", label=<torch.nn.modules.padding>, shape="box", style="solid"];
"torch.nn.modules.pixelshuffle" [color="black", label=<torch.nn.modules.pixelshuffle>, shape="box", style="solid"];
"torch.nn.modules.pooling" [color="black", label=<torch.nn.modules.pooling>, shape="box", style="solid"];
"torch.nn.modules.rnn" [color="black", label=<torch.nn.modules.rnn>, shape="box", style="solid"];
"torch.nn.modules.sparse" [color="black", label=<torch.nn.modules.sparse>, shape="box", style="solid"];
"torch.nn.modules.transformer" [color="black", label=<torch.nn.modules.transformer>, shape="box", style="solid"];
"torch.nn.modules.upsampling" [color="black", label=<torch.nn.modules.upsampling>, shape="box", style="solid"];
"torch.nn.modules.utils" [color="black", label=<torch.nn.modules.utils>, shape="box", style="solid"];
"torch.nn.parallel" [color="black", label=<torch.nn.parallel>, shape="box", style="solid"];
"torch.nn.parallel._functions" [color="black", label=<torch.nn.parallel._functions>, shape="box", style="solid"];
"torch.nn.parallel.comm" [color="black", label=<torch.nn.parallel.comm>, shape="box", style="solid"];
"torch.nn.parallel.data_parallel" [color="black", label=<torch.nn.parallel.data_parallel>, shape="box", style="solid"];
"torch.nn.parallel.distributed" [color="black", label=<torch.nn.parallel.distributed>, shape="box", style="solid"];
"torch.nn.parallel.parallel_apply" [color="black", label=<torch.nn.parallel.parallel_apply>, shape="box", style="solid"];
"torch.nn.parallel.replicate" [color="black", label=<torch.nn.parallel.replicate>, shape="box", style="solid"];
"torch.nn.parallel.scatter_gather" [color="black", label=<torch.nn.parallel.scatter_gather>, shape="box", style="solid"];
"torch.nn.parameter" [color="black", label=<torch.nn.parameter>, shape="box", style="solid"];
"torch.nn.qat" [color="black", label=<torch.nn.qat>, shape="box", style="solid"];
"torch.nn.qat.dynamic" [color="black", label=<torch.nn.qat.dynamic>, shape="box", style="solid"];
"torch.nn.qat.dynamic.modules" [color="black", label=<torch.nn.qat.dynamic.modules>, shape="box", style="solid"];
"torch.nn.qat.dynamic.modules.linear" [color="black", label=<torch.nn.qat.dynamic.modules.linear>, shape="box", style="solid"];
"torch.nn.qat.modules" [color="black", label=<torch.nn.qat.modules>, shape="box", style="solid"];
"torch.nn.qat.modules.conv" [color="black", label=<torch.nn.qat.modules.conv>, shape="box", style="solid"];
"torch.nn.qat.modules.embedding_ops" [color="black", label=<torch.nn.qat.modules.embedding_ops>, shape="box", style="solid"];
"torch.nn.qat.modules.linear" [color="black", label=<torch.nn.qat.modules.linear>, shape="box", style="solid"];
"torch.nn.quantizable" [color="black", label=<torch.nn.quantizable>, shape="box", style="solid"];
"torch.nn.quantizable.modules" [color="black", label=<torch.nn.quantizable.modules>, shape="box", style="solid"];
"torch.nn.quantizable.modules.activation" [color="black", label=<torch.nn.quantizable.modules.activation>, shape="box", style="solid"];
"torch.nn.quantizable.modules.rnn" [color="black", label=<torch.nn.quantizable.modules.rnn>, shape="box", style="solid"];
"torch.nn.quantized" [color="black", label=<torch.nn.quantized>, shape="box", style="solid"];
"torch.nn.quantized._reference" [color="black", label=<torch.nn.quantized._reference>, shape="box", style="solid"];
"torch.nn.quantized._reference.modules" [color="black", label=<torch.nn.quantized._reference.modules>, shape="box", style="solid"];
"torch.nn.quantized._reference.modules.conv" [color="black", label=<torch.nn.quantized._reference.modules.conv>, shape="box", style="solid"];
"torch.nn.quantized._reference.modules.linear" [color="black", label=<torch.nn.quantized._reference.modules.linear>, shape="box", style="solid"];
"torch.nn.quantized._reference.modules.rnn" [color="black", label=<torch.nn.quantized._reference.modules.rnn>, shape="box", style="solid"];
"torch.nn.quantized._reference.modules.sparse" [color="black", label=<torch.nn.quantized._reference.modules.sparse>, shape="box", style="solid"];
"torch.nn.quantized._reference.modules.utils" [color="black", label=<torch.nn.quantized._reference.modules.utils>, shape="box", style="solid"];
"torch.nn.quantized.dynamic" [color="black", label=<torch.nn.quantized.dynamic>, shape="box", style="solid"];
"torch.nn.quantized.dynamic.modules" [color="black", label=<torch.nn.quantized.dynamic.modules>, shape="box", style="solid"];
"torch.nn.quantized.dynamic.modules.conv" [color="black", label=<torch.nn.quantized.dynamic.modules.conv>, shape="box", style="solid"];
"torch.nn.quantized.dynamic.modules.linear" [color="black", label=<torch.nn.quantized.dynamic.modules.linear>, shape="box", style="solid"];
"torch.nn.quantized.dynamic.modules.rnn" [color="black", label=<torch.nn.quantized.dynamic.modules.rnn>, shape="box", style="solid"];
"torch.nn.quantized.functional" [color="black", label=<torch.nn.quantized.functional>, shape="box", style="solid"];
"torch.nn.quantized.modules" [color="black", label=<torch.nn.quantized.modules>, shape="box", style="solid"];
"torch.nn.quantized.modules.activation" [color="black", label=<torch.nn.quantized.modules.activation>, shape="box", style="solid"];
"torch.nn.quantized.modules.batchnorm" [color="black", label=<torch.nn.quantized.modules.batchnorm>, shape="box", style="solid"];
"torch.nn.quantized.modules.conv" [color="black", label=<torch.nn.quantized.modules.conv>, shape="box", style="solid"];
"torch.nn.quantized.modules.dropout" [color="black", label=<torch.nn.quantized.modules.dropout>, shape="box", style="solid"];
"torch.nn.quantized.modules.embedding_ops" [color="black", label=<torch.nn.quantized.modules.embedding_ops>, shape="box", style="solid"];
"torch.nn.quantized.modules.functional_modules" [color="black", label=<torch.nn.quantized.modules.functional_modules>, shape="box", style="solid"];
"torch.nn.quantized.modules.linear" [color="black", label=<torch.nn.quantized.modules.linear>, shape="box", style="solid"];
"torch.nn.quantized.modules.normalization" [color="black", label=<torch.nn.quantized.modules.normalization>, shape="box", style="solid"];
"torch.nn.quantized.modules.rnn" [color="black", label=<torch.nn.quantized.modules.rnn>, shape="box", style="solid"];
"torch.nn.quantized.modules.utils" [color="black", label=<torch.nn.quantized.modules.utils>, shape="box", style="solid"];
"torch.nn.utils" [color="black", label=<torch.nn.utils>, shape="box", style="solid"];
"torch.nn.utils._deprecation_utils" [color="black", label=<torch.nn.utils._deprecation_utils>, shape="box", style="solid"];
"torch.nn.utils._expanded_weights" [color="black", label=<torch.nn.utils._expanded_weights>, shape="box", style="solid"];
"torch.nn.utils._expanded_weights.conv_expanded_weights" [color="black", label=<torch.nn.utils._expanded_weights.conv_expanded_weights>, shape="box", style="solid"];
"torch.nn.utils._expanded_weights.conv_utils" [color="black", label=<torch.nn.utils._expanded_weights.conv_utils>, shape="box", style="solid"];
"torch.nn.utils._expanded_weights.embedding_expanded_weights" [color="black", label=<torch.nn.utils._expanded_weights.embedding_expanded_weights>, shape="box", style="solid"];
"torch.nn.utils._expanded_weights.expanded_weights_impl" [color="black", label=<torch.nn.utils._expanded_weights.expanded_weights_impl>, shape="box", style="solid"];
"torch.nn.utils._expanded_weights.expanded_weights_utils" [color="black", label=<torch.nn.utils._expanded_weights.expanded_weights_utils>, shape="box", style="solid"];
"torch.nn.utils._expanded_weights.group_norm_expanded_weights" [color="black", label=<torch.nn.utils._expanded_weights.group_norm_expanded_weights>, shape="box", style="solid"];
"torch.nn.utils._expanded_weights.instance_norm_expanded_weights" [color="black", label=<torch.nn.utils._expanded_weights.instance_norm_expanded_weights>, shape="box", style="solid"];
"torch.nn.utils._expanded_weights.layer_norm_expanded_weights" [color="black", label=<torch.nn.utils._expanded_weights.layer_norm_expanded_weights>, shape="box", style="solid"];
"torch.nn.utils._expanded_weights.linear_expanded_weights" [color="black", label=<torch.nn.utils._expanded_weights.linear_expanded_weights>, shape="box", style="solid"];
"torch.nn.utils._named_member_accessor" [color="black", label=<torch.nn.utils._named_member_accessor>, shape="box", style="solid"];
"torch.nn.utils._per_sample_grad" [color="black", label=<torch.nn.utils._per_sample_grad>, shape="box", style="solid"];
"torch.nn.utils.clip_grad" [color="black", label=<torch.nn.utils.clip_grad>, shape="box", style="solid"];
"torch.nn.utils.convert_parameters" [color="black", label=<torch.nn.utils.convert_parameters>, shape="box", style="solid"];
"torch.nn.utils.fusion" [color="black", label=<torch.nn.utils.fusion>, shape="box", style="solid"];
"torch.nn.utils.init" [color="black", label=<torch.nn.utils.init>, shape="box", style="solid"];
"torch.nn.utils.memory_format" [color="black", label=<torch.nn.utils.memory_format>, shape="box", style="solid"];
"torch.nn.utils.parametrizations" [color="black", label=<torch.nn.utils.parametrizations>, shape="box", style="solid"];
"torch.nn.utils.parametrize" [color="black", label=<torch.nn.utils.parametrize>, shape="box", style="solid"];
"torch.nn.utils.prune" [color="black", label=<torch.nn.utils.prune>, shape="box", style="solid"];
"torch.nn.utils.rnn" [color="black", label=<torch.nn.utils.rnn>, shape="box", style="solid"];
"torch.nn.utils.spectral_norm" [color="black", label=<torch.nn.utils.spectral_norm>, shape="box", style="solid"];
"torch.nn.utils.stateless" [color="black", label=<torch.nn.utils.stateless>, shape="box", style="solid"];
"torch.nn.utils.weight_norm" [color="black", label=<torch.nn.utils.weight_norm>, shape="box", style="solid"];
"torch.onnx" [color="black", label=<torch.onnx>, shape="box", style="solid"];
"torch.onnx._constants" [color="black", label=<torch.onnx._constants>, shape="box", style="solid"];
"torch.onnx._deprecation" [color="black", label=<torch.onnx._deprecation>, shape="box", style="solid"];
"torch.onnx._experimental" [color="black", label=<torch.onnx._experimental>, shape="box", style="solid"];
"torch.onnx._exporter_states" [color="black", label=<torch.onnx._exporter_states>, shape="box", style="solid"];
"torch.onnx._flags" [color="black", label=<torch.onnx._flags>, shape="box", style="solid"];
"torch.onnx._globals" [color="black", label=<torch.onnx._globals>, shape="box", style="solid"];
"torch.onnx._internal" [color="black", label=<torch.onnx._internal>, shape="box", style="solid"];
"torch.onnx._internal._exporter_legacy" [color="black", label=<torch.onnx._internal._exporter_legacy>, shape="box", style="solid"];
"torch.onnx._internal._lazy_import" [color="black", label=<torch.onnx._internal._lazy_import>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics" [color="black", label=<torch.onnx._internal.diagnostics>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics._diagnostic" [color="black", label=<torch.onnx._internal.diagnostics._diagnostic>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics._rules" [color="black", label=<torch.onnx._internal.diagnostics._rules>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra" [color="black", label=<torch.onnx._internal.diagnostics.infra>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra._infra" [color="black", label=<torch.onnx._internal.diagnostics.infra._infra>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.context" [color="black", label=<torch.onnx._internal.diagnostics.infra.context>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.decorator" [color="black", label=<torch.onnx._internal.diagnostics.infra.decorator>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.formatter" [color="black", label=<torch.onnx._internal.diagnostics.infra.formatter>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._address" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._address>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._artifact" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._artifact>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._artifact_change" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._artifact_change>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._artifact_content" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._artifact_content>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._artifact_location" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._artifact_location>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._attachment" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._attachment>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._code_flow" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._code_flow>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._configuration_override" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._configuration_override>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._conversion" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._conversion>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._edge" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._edge>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._edge_traversal" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._edge_traversal>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._exception" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._exception>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._external_properties" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._external_properties>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._external_property_file_reference" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._external_property_file_reference>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._external_property_file_references" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._external_property_file_references>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._fix" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._fix>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._graph" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._graph>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._graph_traversal" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._graph_traversal>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._invocation" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._invocation>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._location" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._location>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._location_relationship" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._location_relationship>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._logical_location" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._logical_location>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._message" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._message>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._multiformat_message_string" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._multiformat_message_string>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._node" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._node>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._notification" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._notification>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._physical_location" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._physical_location>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._property_bag" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._property_bag>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._rectangle" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._rectangle>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._region" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._region>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._replacement" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._replacement>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._reporting_configuration" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._reporting_configuration>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_relationship" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_relationship>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._result" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._result>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._result_provenance" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._result_provenance>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._run" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._run>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._run_automation_details" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._run_automation_details>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._sarif_log" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._sarif_log>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._special_locations" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._special_locations>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._stack" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._stack>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._stack_frame" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._stack_frame>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._suppression" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._suppression>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._thread_flow" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._thread_flow>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._tool" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._tool>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._tool_component" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._tool_component>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._tool_component_reference" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._tool_component_reference>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._translation_metadata" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._translation_metadata>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._version_control_details" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._version_control_details>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._web_request" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._web_request>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif._web_response" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif._web_response>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.sarif.version" [color="black", label=<torch.onnx._internal.diagnostics.infra.sarif.version>, shape="box", style="solid"];
"torch.onnx._internal.diagnostics.infra.utils" [color="black", label=<torch.onnx._internal.diagnostics.infra.utils>, shape="box", style="solid"];
"torch.onnx._internal.exporter" [color="black", label=<torch.onnx._internal.exporter>, shape="box", style="solid"];
"torch.onnx._internal.exporter._analysis" [color="black", label=<torch.onnx._internal.exporter._analysis>, shape="box", style="solid"];
"torch.onnx._internal.exporter._building" [color="black", label=<torch.onnx._internal.exporter._building>, shape="box", style="solid"];
"torch.onnx._internal.exporter._capture_strategies" [color="black", label=<torch.onnx._internal.exporter._capture_strategies>, shape="box", style="solid"];
"torch.onnx._internal.exporter._compat" [color="black", label=<torch.onnx._internal.exporter._compat>, shape="box", style="solid"];
"torch.onnx._internal.exporter._core" [color="black", label=<torch.onnx._internal.exporter._core>, shape="box", style="solid"];
"torch.onnx._internal.exporter._decomp" [color="black", label=<torch.onnx._internal.exporter._decomp>, shape="box", style="solid"];
"torch.onnx._internal.exporter._dispatching" [color="black", label=<torch.onnx._internal.exporter._dispatching>, shape="box", style="solid"];
"torch.onnx._internal.exporter._errors" [color="black", label=<torch.onnx._internal.exporter._errors>, shape="box", style="solid"];
"torch.onnx._internal.exporter._fx_passes" [color="black", label=<torch.onnx._internal.exporter._fx_passes>, shape="box", style="solid"];
"torch.onnx._internal.exporter._ir_passes" [color="black", label=<torch.onnx._internal.exporter._ir_passes>, shape="box", style="solid"];
"torch.onnx._internal.exporter._isolated" [color="black", label=<torch.onnx._internal.exporter._isolated>, shape="box", style="solid"];
"torch.onnx._internal.exporter._onnx_program" [color="black", label=<torch.onnx._internal.exporter._onnx_program>, shape="box", style="solid"];
"torch.onnx._internal.exporter._registration" [color="black", label=<torch.onnx._internal.exporter._registration>, shape="box", style="solid"];
"torch.onnx._internal.exporter._reporting" [color="black", label=<torch.onnx._internal.exporter._reporting>, shape="box", style="solid"];
"torch.onnx._internal.exporter._schemas" [color="black", label=<torch.onnx._internal.exporter._schemas>, shape="box", style="solid"];
"torch.onnx._internal.exporter._tensors" [color="black", label=<torch.onnx._internal.exporter._tensors>, shape="box", style="solid"];
"torch.onnx._internal.exporter._testing" [color="black", label=<torch.onnx._internal.exporter._testing>, shape="box", style="solid"];
"torch.onnx._internal.exporter._torchlib" [color="black", label=<torch.onnx._internal.exporter._torchlib>, shape="box", style="solid"];
"torch.onnx._internal.exporter._torchlib._torchlib_registry" [color="black", label=<torch.onnx._internal.exporter._torchlib._torchlib_registry>, shape="box", style="solid"];
"torch.onnx._internal.exporter._torchlib.ops" [color="black", label=<torch.onnx._internal.exporter._torchlib.ops>, shape="box", style="solid"];
"torch.onnx._internal.exporter._torchlib.ops.hop" [color="black", label=<torch.onnx._internal.exporter._torchlib.ops.hop>, shape="box", style="solid"];
"torch.onnx._internal.exporter._verification" [color="black", label=<torch.onnx._internal.exporter._verification>, shape="box", style="solid"];
"torch.onnx._internal.fx" [color="black", label=<torch.onnx._internal.fx>, shape="box", style="solid"];
"torch.onnx._internal.fx._pass" [color="black", label=<torch.onnx._internal.fx._pass>, shape="box", style="solid"];
"torch.onnx._internal.fx.analysis" [color="black", label=<torch.onnx._internal.fx.analysis>, shape="box", style="solid"];
"torch.onnx._internal.fx.analysis.unsupported_nodes" [color="black", label=<torch.onnx._internal.fx.analysis.unsupported_nodes>, shape="box", style="solid"];
"torch.onnx._internal.fx.decomposition_skip" [color="black", label=<torch.onnx._internal.fx.decomposition_skip>, shape="box", style="solid"];
"torch.onnx._internal.fx.decomposition_table" [color="black", label=<torch.onnx._internal.fx.decomposition_table>, shape="box", style="solid"];
"torch.onnx._internal.fx.diagnostics" [color="black", label=<torch.onnx._internal.fx.diagnostics>, shape="box", style="solid"];
"torch.onnx._internal.fx.dynamo_graph_extractor" [color="black", label=<torch.onnx._internal.fx.dynamo_graph_extractor>, shape="box", style="solid"];
"torch.onnx._internal.fx.fx_onnx_interpreter" [color="black", label=<torch.onnx._internal.fx.fx_onnx_interpreter>, shape="box", style="solid"];
"torch.onnx._internal.fx.fx_symbolic_graph_extractor" [color="black", label=<torch.onnx._internal.fx.fx_symbolic_graph_extractor>, shape="box", style="solid"];
"torch.onnx._internal.fx.onnxfunction_dispatcher" [color="black", label=<torch.onnx._internal.fx.onnxfunction_dispatcher>, shape="box", style="solid"];
"torch.onnx._internal.fx.passes" [color="black", label=<torch.onnx._internal.fx.passes>, shape="box", style="solid"];
"torch.onnx._internal.fx.passes._utils" [color="black", label=<torch.onnx._internal.fx.passes._utils>, shape="box", style="solid"];
"torch.onnx._internal.fx.passes.decomp" [color="black", label=<torch.onnx._internal.fx.passes.decomp>, shape="box", style="solid"];
"torch.onnx._internal.fx.passes.functionalization" [color="black", label=<torch.onnx._internal.fx.passes.functionalization>, shape="box", style="solid"];
"torch.onnx._internal.fx.passes.modularization" [color="black", label=<torch.onnx._internal.fx.passes.modularization>, shape="box", style="solid"];
"torch.onnx._internal.fx.passes.readability" [color="black", label=<torch.onnx._internal.fx.passes.readability>, shape="box", style="solid"];
"torch.onnx._internal.fx.passes.type_promotion" [color="black", label=<torch.onnx._internal.fx.passes.type_promotion>, shape="box", style="solid"];
"torch.onnx._internal.fx.passes.virtualization" [color="black", label=<torch.onnx._internal.fx.passes.virtualization>, shape="box", style="solid"];
"torch.onnx._internal.fx.patcher" [color="black", label=<torch.onnx._internal.fx.patcher>, shape="box", style="solid"];
"torch.onnx._internal.fx.registration" [color="black", label=<torch.onnx._internal.fx.registration>, shape="box", style="solid"];
"torch.onnx._internal.fx.serialization" [color="black", label=<torch.onnx._internal.fx.serialization>, shape="box", style="solid"];
"torch.onnx._internal.fx.type_utils" [color="black", label=<torch.onnx._internal.fx.type_utils>, shape="box", style="solid"];
"torch.onnx._internal.io_adapter" [color="black", label=<torch.onnx._internal.io_adapter>, shape="box", style="solid"];
"torch.onnx._internal.jit_utils" [color="black", label=<torch.onnx._internal.jit_utils>, shape="box", style="solid"];
"torch.onnx._internal.onnx_proto_utils" [color="black", label=<torch.onnx._internal.onnx_proto_utils>, shape="box", style="solid"];
"torch.onnx._internal.onnxruntime" [color="black", label=<torch.onnx._internal.onnxruntime>, shape="box", style="solid"];
"torch.onnx._internal.registration" [color="black", label=<torch.onnx._internal.registration>, shape="box", style="solid"];
"torch.onnx._onnx_supported_ops" [color="black", label=<torch.onnx._onnx_supported_ops>, shape="box", style="solid"];
"torch.onnx._type_utils" [color="black", label=<torch.onnx._type_utils>, shape="box", style="solid"];
"torch.onnx.errors" [color="black", label=<torch.onnx.errors>, shape="box", style="solid"];
"torch.onnx.operators" [color="black", label=<torch.onnx.operators>, shape="box", style="solid"];
"torch.onnx.symbolic_caffe2" [color="black", label=<torch.onnx.symbolic_caffe2>, shape="box", style="solid"];
"torch.onnx.symbolic_helper" [color="black", label=<torch.onnx.symbolic_helper>, shape="box", style="solid"];
"torch.onnx.symbolic_opset10" [color="black", label=<torch.onnx.symbolic_opset10>, shape="box", style="solid"];
"torch.onnx.symbolic_opset11" [color="black", label=<torch.onnx.symbolic_opset11>, shape="box", style="solid"];
"torch.onnx.symbolic_opset12" [color="black", label=<torch.onnx.symbolic_opset12>, shape="box", style="solid"];
"torch.onnx.symbolic_opset13" [color="black", label=<torch.onnx.symbolic_opset13>, shape="box", style="solid"];
"torch.onnx.symbolic_opset14" [color="black", label=<torch.onnx.symbolic_opset14>, shape="box", style="solid"];
"torch.onnx.symbolic_opset15" [color="black", label=<torch.onnx.symbolic_opset15>, shape="box", style="solid"];
"torch.onnx.symbolic_opset16" [color="black", label=<torch.onnx.symbolic_opset16>, shape="box", style="solid"];
"torch.onnx.symbolic_opset17" [color="black", label=<torch.onnx.symbolic_opset17>, shape="box", style="solid"];
"torch.onnx.symbolic_opset18" [color="black", label=<torch.onnx.symbolic_opset18>, shape="box", style="solid"];
"torch.onnx.symbolic_opset19" [color="black", label=<torch.onnx.symbolic_opset19>, shape="box", style="solid"];
"torch.onnx.symbolic_opset20" [color="black", label=<torch.onnx.symbolic_opset20>, shape="box", style="solid"];
"torch.onnx.symbolic_opset7" [color="black", label=<torch.onnx.symbolic_opset7>, shape="box", style="solid"];
"torch.onnx.symbolic_opset8" [color="black", label=<torch.onnx.symbolic_opset8>, shape="box", style="solid"];
"torch.onnx.symbolic_opset9" [color="black", label=<torch.onnx.symbolic_opset9>, shape="box", style="solid"];
"torch.onnx.utils" [color="black", label=<torch.onnx.utils>, shape="box", style="solid"];
"torch.onnx.verification" [color="black", label=<torch.onnx.verification>, shape="box", style="solid"];
"torch.optim" [color="black", label=<torch.optim>, shape="box", style="solid"];
"torch.optim._adafactor" [color="black", label=<torch.optim._adafactor>, shape="box", style="solid"];
"torch.optim._functional" [color="black", label=<torch.optim._functional>, shape="box", style="solid"];
"torch.optim._multi_tensor" [color="black", label=<torch.optim._multi_tensor>, shape="box", style="solid"];
"torch.optim.adadelta" [color="black", label=<torch.optim.adadelta>, shape="box", style="solid"];
"torch.optim.adagrad" [color="black", label=<torch.optim.adagrad>, shape="box", style="solid"];
"torch.optim.adam" [color="black", label=<torch.optim.adam>, shape="box", style="solid"];
"torch.optim.adamax" [color="black", label=<torch.optim.adamax>, shape="box", style="solid"];
"torch.optim.adamw" [color="black", label=<torch.optim.adamw>, shape="box", style="solid"];
"torch.optim.asgd" [color="black", label=<torch.optim.asgd>, shape="box", style="solid"];
"torch.optim.lbfgs" [color="black", label=<torch.optim.lbfgs>, shape="box", style="solid"];
"torch.optim.lr_scheduler" [color="black", label=<torch.optim.lr_scheduler>, shape="box", style="solid"];
"torch.optim.nadam" [color="black", label=<torch.optim.nadam>, shape="box", style="solid"];
"torch.optim.optimizer" [color="black", label=<torch.optim.optimizer>, shape="box", style="solid"];
"torch.optim.radam" [color="black", label=<torch.optim.radam>, shape="box", style="solid"];
"torch.optim.rmsprop" [color="black", label=<torch.optim.rmsprop>, shape="box", style="solid"];
"torch.optim.rprop" [color="black", label=<torch.optim.rprop>, shape="box", style="solid"];
"torch.optim.sgd" [color="black", label=<torch.optim.sgd>, shape="box", style="solid"];
"torch.optim.sparse_adam" [color="black", label=<torch.optim.sparse_adam>, shape="box", style="solid"];
"torch.optim.swa_utils" [color="black", label=<torch.optim.swa_utils>, shape="box", style="solid"];
"torch.overrides" [color="black", label=<torch.overrides>, shape="box", style="solid"];
"torch.package" [color="black", label=<torch.package>, shape="box", style="solid"];
"torch.package._digraph" [color="black", label=<torch.package._digraph>, shape="box", style="solid"];
"torch.package._directory_reader" [color="black", label=<torch.package._directory_reader>, shape="box", style="solid"];
"torch.package._importlib" [color="black", label=<torch.package._importlib>, shape="box", style="solid"];
"torch.package._mangling" [color="black", label=<torch.package._mangling>, shape="box", style="solid"];
"torch.package._mock" [color="black", label=<torch.package._mock>, shape="box", style="solid"];
"torch.package._package_pickler" [color="black", label=<torch.package._package_pickler>, shape="box", style="solid"];
"torch.package._package_unpickler" [color="black", label=<torch.package._package_unpickler>, shape="box", style="solid"];
"torch.package._stdlib" [color="black", label=<torch.package._stdlib>, shape="box", style="solid"];
"torch.package.analyze" [color="black", label=<torch.package.analyze>, shape="box", style="solid"];
"torch.package.analyze.find_first_use_of_broken_modules" [color="black", label=<torch.package.analyze.find_first_use_of_broken_modules>, shape="box", style="solid"];
"torch.package.analyze.is_from_package" [color="black", label=<torch.package.analyze.is_from_package>, shape="box", style="solid"];
"torch.package.analyze.trace_dependencies" [color="black", label=<torch.package.analyze.trace_dependencies>, shape="box", style="solid"];
"torch.package.file_structure_representation" [color="black", label=<torch.package.file_structure_representation>, shape="box", style="solid"];
"torch.package.find_file_dependencies" [color="black", label=<torch.package.find_file_dependencies>, shape="box", style="solid"];
"torch.package.glob_group" [color="black", label=<torch.package.glob_group>, shape="box", style="solid"];
"torch.package.importer" [color="black", label=<torch.package.importer>, shape="box", style="solid"];
"torch.package.package_exporter" [color="black", label=<torch.package.package_exporter>, shape="box", style="solid"];
"torch.package.package_importer" [color="black", label=<torch.package.package_importer>, shape="box", style="solid"];
"torch.profiler" [color="black", label=<torch.profiler>, shape="box", style="solid"];
"torch.profiler._memory_profiler" [color="black", label=<torch.profiler._memory_profiler>, shape="box", style="solid"];
"torch.profiler._pattern_matcher" [color="black", label=<torch.profiler._pattern_matcher>, shape="box", style="solid"];
"torch.profiler._utils" [color="black", label=<torch.profiler._utils>, shape="box", style="solid"];
"torch.profiler.itt" [color="black", label=<torch.profiler.itt>, shape="box", style="solid"];
"torch.profiler.profiler" [color="black", label=<torch.profiler.profiler>, shape="box", style="solid"];
"torch.profiler.python_tracer" [color="black", label=<torch.profiler.python_tracer>, shape="box", style="solid"];
"torch.quantization" [color="black", label=<torch.quantization>, shape="box", style="solid"];
"torch.quantization._numeric_suite" [color="black", label=<torch.quantization._numeric_suite>, shape="box", style="solid"];
"torch.quantization._numeric_suite_fx" [color="black", label=<torch.quantization._numeric_suite_fx>, shape="box", style="solid"];
"torch.quantization._quantized_conversions" [color="black", label=<torch.quantization._quantized_conversions>, shape="box", style="solid"];
"torch.quantization.fake_quantize" [color="black", label=<torch.quantization.fake_quantize>, shape="box", style="solid"];
"torch.quantization.fuse_modules" [color="black", label=<torch.quantization.fuse_modules>, shape="box", style="solid"];
"torch.quantization.fuser_method_mappings" [color="black", label=<torch.quantization.fuser_method_mappings>, shape="box", style="solid"];
"torch.quantization.fx" [color="black", label=<torch.quantization.fx>, shape="box", style="solid"];
"torch.quantization.fx._equalize" [color="black", label=<torch.quantization.fx._equalize>, shape="box", style="solid"];
"torch.quantization.fx.convert" [color="black", label=<torch.quantization.fx.convert>, shape="box", style="solid"];
"torch.quantization.fx.fuse" [color="black", label=<torch.quantization.fx.fuse>, shape="box", style="solid"];
"torch.quantization.fx.fusion_patterns" [color="black", label=<torch.quantization.fx.fusion_patterns>, shape="box", style="solid"];
"torch.quantization.fx.graph_module" [color="black", label=<torch.quantization.fx.graph_module>, shape="box", style="solid"];
"torch.quantization.fx.match_utils" [color="black", label=<torch.quantization.fx.match_utils>, shape="box", style="solid"];
"torch.quantization.fx.pattern_utils" [color="black", label=<torch.quantization.fx.pattern_utils>, shape="box", style="solid"];
"torch.quantization.fx.prepare" [color="black", label=<torch.quantization.fx.prepare>, shape="box", style="solid"];
"torch.quantization.fx.quantization_patterns" [color="black", label=<torch.quantization.fx.quantization_patterns>, shape="box", style="solid"];
"torch.quantization.fx.quantization_types" [color="black", label=<torch.quantization.fx.quantization_types>, shape="box", style="solid"];
"torch.quantization.fx.utils" [color="black", label=<torch.quantization.fx.utils>, shape="box", style="solid"];
"torch.quantization.observer" [color="black", label=<torch.quantization.observer>, shape="box", style="solid"];
"torch.quantization.qconfig" [color="black", label=<torch.quantization.qconfig>, shape="box", style="solid"];
"torch.quantization.quant_type" [color="black", label=<torch.quantization.quant_type>, shape="box", style="solid"];
"torch.quantization.quantization_mappings" [color="black", label=<torch.quantization.quantization_mappings>, shape="box", style="solid"];
"torch.quantization.quantize" [color="black", label=<torch.quantization.quantize>, shape="box", style="solid"];
"torch.quantization.quantize_fx" [color="black", label=<torch.quantization.quantize_fx>, shape="box", style="solid"];
"torch.quantization.quantize_jit" [color="black", label=<torch.quantization.quantize_jit>, shape="box", style="solid"];
"torch.quantization.stubs" [color="black", label=<torch.quantization.stubs>, shape="box", style="solid"];
"torch.quantization.utils" [color="black", label=<torch.quantization.utils>, shape="box", style="solid"];
"torch.quasirandom" [color="black", label=<torch.quasirandom>, shape="box", style="solid"];
"torch.random" [color="black", label=<torch.random>, shape="box", style="solid"];
"torch.return_types" [color="black", label=<torch.return_types>, shape="box", style="solid"];
"torch.serialization" [color="black", label=<torch.serialization>, shape="box", style="solid"];
"torch.signal" [color="black", label=<torch.signal>, shape="box", style="solid"];
"torch.signal.windows" [color="black", label=<torch.signal.windows>, shape="box", style="solid"];
"torch.signal.windows.windows" [color="black", label=<torch.signal.windows.windows>, shape="box", style="solid"];
"torch.sparse" [color="black", label=<torch.sparse>, shape="box", style="solid"];
"torch.sparse._semi_structured_conversions" [color="black", label=<torch.sparse._semi_structured_conversions>, shape="box", style="solid"];
"torch.sparse._semi_structured_ops" [color="black", label=<torch.sparse._semi_structured_ops>, shape="box", style="solid"];
"torch.sparse._triton_ops" [color="black", label=<torch.sparse._triton_ops>, shape="box", style="solid"];
"torch.sparse._triton_ops_meta" [color="black", label=<torch.sparse._triton_ops_meta>, shape="box", style="solid"];
"torch.sparse.semi_structured" [color="black", label=<torch.sparse.semi_structured>, shape="box", style="solid"];
"torch.special" [color="black", label=<torch.special>, shape="box", style="solid"];
"torch.storage" [color="black", label=<torch.storage>, shape="box", style="solid"];
"torch.testing" [color="black", label=<torch.testing>, shape="box", style="solid"];
"torch.testing._comparison" [color="black", label=<torch.testing._comparison>, shape="box", style="solid"];
"torch.testing._creation" [color="black", label=<torch.testing._creation>, shape="box", style="solid"];
"torch.testing._internal" [color="black", label=<torch.testing._internal>, shape="box", style="solid"];
"torch.testing._internal.autocast_test_lists" [color="black", label=<torch.testing._internal.autocast_test_lists>, shape="box", style="solid"];
"torch.testing._internal.autograd_function_db" [color="black", label=<torch.testing._internal.autograd_function_db>, shape="box", style="solid"];
"torch.testing._internal.check_kernel_launches" [color="black", label=<torch.testing._internal.check_kernel_launches>, shape="box", style="solid"];
"torch.testing._internal.codegen" [color="black", label=<torch.testing._internal.codegen>, shape="box", style="solid"];
"torch.testing._internal.common_cuda" [color="black", label=<torch.testing._internal.common_cuda>, shape="box", style="solid"];
"torch.testing._internal.common_device_type" [color="black", label=<torch.testing._internal.common_device_type>, shape="box", style="solid"];
"torch.testing._internal.common_dist_composable" [color="black", label=<torch.testing._internal.common_dist_composable>, shape="box", style="solid"];
"torch.testing._internal.common_distributed" [color="black", label=<torch.testing._internal.common_distributed>, shape="box", style="solid"];
"torch.testing._internal.common_dtype" [color="black", label=<torch.testing._internal.common_dtype>, shape="box", style="solid"];
"torch.testing._internal.common_fsdp" [color="black", label=<torch.testing._internal.common_fsdp>, shape="box", style="solid"];
"torch.testing._internal.common_jit" [color="black", label=<torch.testing._internal.common_jit>, shape="box", style="solid"];
"torch.testing._internal.common_methods_invocations" [color="black", label=<torch.testing._internal.common_methods_invocations>, shape="box", style="solid"];
"torch.testing._internal.common_mkldnn" [color="black", label=<torch.testing._internal.common_mkldnn>, shape="box", style="solid"];
"torch.testing._internal.common_modules" [color="black", label=<torch.testing._internal.common_modules>, shape="box", style="solid"];
"torch.testing._internal.common_nn" [color="black", label=<torch.testing._internal.common_nn>, shape="box", style="solid"];
"torch.testing._internal.common_optimizers" [color="black", label=<torch.testing._internal.common_optimizers>, shape="box", style="solid"];
"torch.testing._internal.common_pruning" [color="black", label=<torch.testing._internal.common_pruning>, shape="box", style="solid"];
"torch.testing._internal.common_quantization" [color="black", label=<torch.testing._internal.common_quantization>, shape="box", style="solid"];
"torch.testing._internal.common_quantized" [color="black", label=<torch.testing._internal.common_quantized>, shape="box", style="solid"];
"torch.testing._internal.common_subclass" [color="black", label=<torch.testing._internal.common_subclass>, shape="box", style="solid"];
"torch.testing._internal.common_utils" [color="black", label=<torch.testing._internal.common_utils>, shape="box", style="solid"];
"torch.testing._internal.composite_compliance" [color="black", label=<torch.testing._internal.composite_compliance>, shape="box", style="solid"];
"torch.testing._internal.custom_op_db" [color="black", label=<torch.testing._internal.custom_op_db>, shape="box", style="solid"];
"torch.testing._internal.custom_tensor" [color="black", label=<torch.testing._internal.custom_tensor>, shape="box", style="solid"];
"torch.testing._internal.data" [color="black", label=<torch.testing._internal.data>, shape="box", style="solid"];
"torch.testing._internal.data.network1" [color="black", label=<torch.testing._internal.data.network1>, shape="box", style="solid"];
"torch.testing._internal.data.network2" [color="black", label=<torch.testing._internal.data.network2>, shape="box", style="solid"];
"torch.testing._internal.dist_utils" [color="black", label=<torch.testing._internal.dist_utils>, shape="box", style="solid"];
"torch.testing._internal.distributed" [color="black", label=<torch.testing._internal.distributed>, shape="box", style="solid"];
"torch.testing._internal.distributed._shard" [color="black", label=<torch.testing._internal.distributed._shard>, shape="box", style="solid"];
"torch.testing._internal.distributed._shard.sharded_tensor" [color="black", label=<torch.testing._internal.distributed._shard.sharded_tensor>, shape="box", style="solid"];
"torch.testing._internal.distributed._shard.sharded_tensor._test_ops_common" [color="black", label=<torch.testing._internal.distributed._shard.sharded_tensor._test_ops_common>, shape="box", style="solid"];
"torch.testing._internal.distributed._shard.sharded_tensor._test_st_common" [color="black", label=<torch.testing._internal.distributed._shard.sharded_tensor._test_st_common>, shape="box", style="solid"];
"torch.testing._internal.distributed._shard.test_common" [color="black", label=<torch.testing._internal.distributed._shard.test_common>, shape="box", style="solid"];
"torch.testing._internal.distributed._tensor" [color="black", label=<torch.testing._internal.distributed._tensor>, shape="box", style="solid"];
"torch.testing._internal.distributed._tensor.common_dtensor" [color="black", label=<torch.testing._internal.distributed._tensor.common_dtensor>, shape="box", style="solid"];
"torch.testing._internal.distributed.checkpoint_utils" [color="black", label=<torch.testing._internal.distributed.checkpoint_utils>, shape="box", style="solid"];
"torch.testing._internal.distributed.common_state_dict" [color="black", label=<torch.testing._internal.distributed.common_state_dict>, shape="box", style="solid"];
"torch.testing._internal.distributed.ddp_under_dist_autograd_test" [color="black", label=<torch.testing._internal.distributed.ddp_under_dist_autograd_test>, shape="box", style="solid"];
"torch.testing._internal.distributed.distributed_test" [color="black", label=<torch.testing._internal.distributed.distributed_test>, shape="box", style="solid"];
"torch.testing._internal.distributed.distributed_utils" [color="black", label=<torch.testing._internal.distributed.distributed_utils>, shape="box", style="solid"];
"torch.testing._internal.distributed.fake_pg" [color="black", label=<torch.testing._internal.distributed.fake_pg>, shape="box", style="solid"];
"torch.testing._internal.distributed.multi_threaded_pg" [color="black", label=<torch.testing._internal.distributed.multi_threaded_pg>, shape="box", style="solid"];
"torch.testing._internal.distributed.nn" [color="black", label=<torch.testing._internal.distributed.nn>, shape="box", style="solid"];
"torch.testing._internal.distributed.nn.api" [color="black", label=<torch.testing._internal.distributed.nn.api>, shape="box", style="solid"];
"torch.testing._internal.distributed.nn.api.remote_module_test" [color="black", label=<torch.testing._internal.distributed.nn.api.remote_module_test>, shape="box", style="solid"];
"torch.testing._internal.distributed.rpc" [color="black", label=<torch.testing._internal.distributed.rpc>, shape="box", style="solid"];
"torch.testing._internal.distributed.rpc.dist_autograd_test" [color="black", label=<torch.testing._internal.distributed.rpc.dist_autograd_test>, shape="box", style="solid"];
"torch.testing._internal.distributed.rpc.dist_optimizer_test" [color="black", label=<torch.testing._internal.distributed.rpc.dist_optimizer_test>, shape="box", style="solid"];
"torch.testing._internal.distributed.rpc.examples" [color="black", label=<torch.testing._internal.distributed.rpc.examples>, shape="box", style="solid"];
"torch.testing._internal.distributed.rpc.examples.parameter_server_test" [color="black", label=<torch.testing._internal.distributed.rpc.examples.parameter_server_test>, shape="box", style="solid"];
"torch.testing._internal.distributed.rpc.examples.reinforcement_learning_rpc_test" [color="black", label=<torch.testing._internal.distributed.rpc.examples.reinforcement_learning_rpc_test>, shape="box", style="solid"];
"torch.testing._internal.distributed.rpc.faulty_agent_rpc_test" [color="black", label=<torch.testing._internal.distributed.rpc.faulty_agent_rpc_test>, shape="box", style="solid"];
"torch.testing._internal.distributed.rpc.faulty_rpc_agent_test_fixture" [color="black", label=<torch.testing._internal.distributed.rpc.faulty_rpc_agent_test_fixture>, shape="box", style="solid"];
"torch.testing._internal.distributed.rpc.jit" [color="black", label=<torch.testing._internal.distributed.rpc.jit>, shape="box", style="solid"];
"torch.testing._internal.distributed.rpc.jit.dist_autograd_test" [color="black", label=<torch.testing._internal.distributed.rpc.jit.dist_autograd_test>, shape="box", style="solid"];
"torch.testing._internal.distributed.rpc.jit.rpc_test" [color="black", label=<torch.testing._internal.distributed.rpc.jit.rpc_test>, shape="box", style="solid"];
"torch.testing._internal.distributed.rpc.jit.rpc_test_faulty" [color="black", label=<torch.testing._internal.distributed.rpc.jit.rpc_test_faulty>, shape="box", style="solid"];
"torch.testing._internal.distributed.rpc.rpc_agent_test_fixture" [color="black", label=<torch.testing._internal.distributed.rpc.rpc_agent_test_fixture>, shape="box", style="solid"];
"torch.testing._internal.distributed.rpc.rpc_test" [color="black", label=<torch.testing._internal.distributed.rpc.rpc_test>, shape="box", style="solid"];
"torch.testing._internal.distributed.rpc.tensorpipe_rpc_agent_test_fixture" [color="black", label=<torch.testing._internal.distributed.rpc.tensorpipe_rpc_agent_test_fixture>, shape="box", style="solid"];
"torch.testing._internal.distributed.rpc_utils" [color="black", label=<torch.testing._internal.distributed.rpc_utils>, shape="box", style="solid"];
"torch.testing._internal.dynamo_test_failures" [color="black", label=<torch.testing._internal.dynamo_test_failures>, shape="box", style="solid"];
"torch.testing._internal.fake_config_module" [color="black", label=<torch.testing._internal.fake_config_module>, shape="box", style="solid"];
"torch.testing._internal.generated" [color="black", label=<torch.testing._internal.generated>, shape="box", style="solid"];
"torch.testing._internal.hop_db" [color="black", label=<torch.testing._internal.hop_db>, shape="box", style="solid"];
"torch.testing._internal.hypothesis_utils" [color="black", label=<torch.testing._internal.hypothesis_utils>, shape="box", style="solid"];
"torch.testing._internal.inductor_utils" [color="black", label=<torch.testing._internal.inductor_utils>, shape="box", style="solid"];
"torch.testing._internal.jit_metaprogramming_utils" [color="black", label=<torch.testing._internal.jit_metaprogramming_utils>, shape="box", style="solid"];
"torch.testing._internal.jit_utils" [color="black", label=<torch.testing._internal.jit_utils>, shape="box", style="solid"];
"torch.testing._internal.logging_tensor" [color="black", label=<torch.testing._internal.logging_tensor>, shape="box", style="solid"];
"torch.testing._internal.logging_utils" [color="black", label=<torch.testing._internal.logging_utils>, shape="box", style="solid"];
"torch.testing._internal.opinfo" [color="black", label=<torch.testing._internal.opinfo>, shape="box", style="solid"];
"torch.testing._internal.opinfo.core" [color="black", label=<torch.testing._internal.opinfo.core>, shape="box", style="solid"];
"torch.testing._internal.opinfo.definitions" [color="black", label=<torch.testing._internal.opinfo.definitions>, shape="box", style="solid"];
"torch.testing._internal.opinfo.definitions._masked" [color="black", label=<torch.testing._internal.opinfo.definitions._masked>, shape="box", style="solid"];
"torch.testing._internal.opinfo.definitions.fft" [color="black", label=<torch.testing._internal.opinfo.definitions.fft>, shape="box", style="solid"];
"torch.testing._internal.opinfo.definitions.linalg" [color="black", label=<torch.testing._internal.opinfo.definitions.linalg>, shape="box", style="solid"];
"torch.testing._internal.opinfo.definitions.nested" [color="black", label=<torch.testing._internal.opinfo.definitions.nested>, shape="box", style="solid"];
"torch.testing._internal.opinfo.definitions.signal" [color="black", label=<torch.testing._internal.opinfo.definitions.signal>, shape="box", style="solid"];
"torch.testing._internal.opinfo.definitions.sparse" [color="black", label=<torch.testing._internal.opinfo.definitions.sparse>, shape="box", style="solid"];
"torch.testing._internal.opinfo.definitions.special" [color="black", label=<torch.testing._internal.opinfo.definitions.special>, shape="box", style="solid"];
"torch.testing._internal.opinfo.refs" [color="black", label=<torch.testing._internal.opinfo.refs>, shape="box", style="solid"];
"torch.testing._internal.opinfo.utils" [color="black", label=<torch.testing._internal.opinfo.utils>, shape="box", style="solid"];
"torch.testing._internal.optests" [color="black", label=<torch.testing._internal.optests>, shape="box", style="solid"];
"torch.testing._internal.optests.aot_autograd" [color="black", label=<torch.testing._internal.optests.aot_autograd>, shape="box", style="solid"];
"torch.testing._internal.optests.autograd_registration" [color="black", label=<torch.testing._internal.optests.autograd_registration>, shape="box", style="solid"];
"torch.testing._internal.optests.fake_tensor" [color="black", label=<torch.testing._internal.optests.fake_tensor>, shape="box", style="solid"];
"torch.testing._internal.optests.generate_tests" [color="black", label=<torch.testing._internal.optests.generate_tests>, shape="box", style="solid"];
"torch.testing._internal.optests.make_fx" [color="black", label=<torch.testing._internal.optests.make_fx>, shape="box", style="solid"];
"torch.testing._internal.quantization_torch_package_models" [color="black", label=<torch.testing._internal.quantization_torch_package_models>, shape="box", style="solid"];
"torch.testing._internal.static_module" [color="black", label=<torch.testing._internal.static_module>, shape="box", style="solid"];
"torch.testing._internal.subclasses" [color="black", label=<torch.testing._internal.subclasses>, shape="box", style="solid"];
"torch.testing._internal.test_module" [color="black", label=<torch.testing._internal.test_module>, shape="box", style="solid"];
"torch.testing._internal.test_module.future_div" [color="black", label=<torch.testing._internal.test_module.future_div>, shape="box", style="solid"];
"torch.testing._internal.test_module.no_future_div" [color="black", label=<torch.testing._internal.test_module.no_future_div>, shape="box", style="solid"];
"torch.testing._internal.torchbind_impls" [color="black", label=<torch.testing._internal.torchbind_impls>, shape="box", style="solid"];
"torch.testing._internal.triton_utils" [color="black", label=<torch.testing._internal.triton_utils>, shape="box", style="solid"];
"torch.testing._internal.two_tensor" [color="black", label=<torch.testing._internal.two_tensor>, shape="box", style="solid"];
"torch.testing._utils" [color="black", label=<torch.testing._utils>, shape="box", style="solid"];
"torch.torch_version" [color="black", label=<torch.torch_version>, shape="box", style="solid"];
"torch.types" [color="black", label=<torch.types>, shape="box", style="solid"];
"torch.utils" [color="black", label=<torch.utils>, shape="box", style="solid"];
"torch.utils._backport_slots" [color="black", label=<torch.utils._backport_slots>, shape="box", style="solid"];
"torch.utils._config_module" [color="black", label=<torch.utils._config_module>, shape="box", style="solid"];
"torch.utils._config_typing" [color="black", label=<torch.utils._config_typing>, shape="box", style="solid"];
"torch.utils._content_store" [color="black", label=<torch.utils._content_store>, shape="box", style="solid"];
"torch.utils._contextlib" [color="black", label=<torch.utils._contextlib>, shape="box", style="solid"];
"torch.utils._cpp_extension_versioner" [color="black", label=<torch.utils._cpp_extension_versioner>, shape="box", style="solid"];
"torch.utils._cxx_pytree" [color="black", label=<torch.utils._cxx_pytree>, shape="box", style="solid"];
"torch.utils._device" [color="black", label=<torch.utils._device>, shape="box", style="solid"];
"torch.utils._exposed_in" [color="black", label=<torch.utils._exposed_in>, shape="box", style="solid"];
"torch.utils._filelock" [color="black", label=<torch.utils._filelock>, shape="box", style="solid"];
"torch.utils._foreach_utils" [color="black", label=<torch.utils._foreach_utils>, shape="box", style="solid"];
"torch.utils._freeze" [color="black", label=<torch.utils._freeze>, shape="box", style="solid"];
"torch.utils._functools" [color="black", label=<torch.utils._functools>, shape="box", style="solid"];
"torch.utils._get_clean_triton" [color="black", label=<torch.utils._get_clean_triton>, shape="box", style="solid"];
"torch.utils._import_utils" [color="black", label=<torch.utils._import_utils>, shape="box", style="solid"];
"torch.utils._mode_utils" [color="black", label=<torch.utils._mode_utils>, shape="box", style="solid"];
"torch.utils._ordered_set" [color="black", label=<torch.utils._ordered_set>, shape="box", style="solid"];
"torch.utils._python_dispatch" [color="black", label=<torch.utils._python_dispatch>, shape="box", style="solid"];
"torch.utils._pytree" [color="black", label=<torch.utils._pytree>, shape="box", style="solid"];
"torch.utils._stats" [color="black", label=<torch.utils._stats>, shape="box", style="solid"];
"torch.utils._strobelight" [color="black", label=<torch.utils._strobelight>, shape="box", style="solid"];
"torch.utils._strobelight.cli_function_profiler" [color="black", label=<torch.utils._strobelight.cli_function_profiler>, shape="box", style="solid"];
"torch.utils._sympy" [color="black", label=<torch.utils._sympy>, shape="box", style="solid"];
"torch.utils._sympy.functions" [color="black", label=<torch.utils._sympy.functions>, shape="box", style="solid"];
"torch.utils._sympy.interp" [color="black", label=<torch.utils._sympy.interp>, shape="box", style="solid"];
"torch.utils._sympy.numbers" [color="black", label=<torch.utils._sympy.numbers>, shape="box", style="solid"];
"torch.utils._sympy.printers" [color="black", label=<torch.utils._sympy.printers>, shape="box", style="solid"];
"torch.utils._sympy.reference" [color="black", label=<torch.utils._sympy.reference>, shape="box", style="solid"];
"torch.utils._sympy.singleton_int" [color="black", label=<torch.utils._sympy.singleton_int>, shape="box", style="solid"];
"torch.utils._sympy.solve" [color="black", label=<torch.utils._sympy.solve>, shape="box", style="solid"];
"torch.utils._sympy.symbol" [color="black", label=<torch.utils._sympy.symbol>, shape="box", style="solid"];
"torch.utils._sympy.value_ranges" [color="black", label=<torch.utils._sympy.value_ranges>, shape="box", style="solid"];
"torch.utils._thunk" [color="black", label=<torch.utils._thunk>, shape="box", style="solid"];
"torch.utils._traceback" [color="black", label=<torch.utils._traceback>, shape="box", style="solid"];
"torch.utils._triton" [color="black", label=<torch.utils._triton>, shape="box", style="solid"];
"torch.utils._typing_utils" [color="black", label=<torch.utils._typing_utils>, shape="box", style="solid"];
"torch.utils._zip" [color="black", label=<torch.utils._zip>, shape="box", style="solid"];
"torch.utils.backcompat" [color="black", label=<torch.utils.backcompat>, shape="box", style="solid"];
"torch.utils.backend_registration" [color="black", label=<torch.utils.backend_registration>, shape="box", style="solid"];
"torch.utils.benchmark" [color="black", label=<torch.utils.benchmark>, shape="box", style="solid"];
"torch.utils.benchmark.examples" [color="black", label=<torch.utils.benchmark.examples>, shape="box", style="solid"];
"torch.utils.benchmark.examples.blas_compare_setup" [color="black", label=<torch.utils.benchmark.examples.blas_compare_setup>, shape="box", style="solid"];
"torch.utils.benchmark.examples.compare" [color="black", label=<torch.utils.benchmark.examples.compare>, shape="box", style="solid"];
"torch.utils.benchmark.examples.fuzzer" [color="black", label=<torch.utils.benchmark.examples.fuzzer>, shape="box", style="solid"];
"torch.utils.benchmark.examples.op_benchmark" [color="black", label=<torch.utils.benchmark.examples.op_benchmark>, shape="box", style="solid"];
"torch.utils.benchmark.examples.simple_timeit" [color="black", label=<torch.utils.benchmark.examples.simple_timeit>, shape="box", style="solid"];
"torch.utils.benchmark.examples.spectral_ops_fuzz_test" [color="black", label=<torch.utils.benchmark.examples.spectral_ops_fuzz_test>, shape="box", style="solid"];
"torch.utils.benchmark.op_fuzzers" [color="black", label=<torch.utils.benchmark.op_fuzzers>, shape="box", style="solid"];
"torch.utils.benchmark.op_fuzzers.binary" [color="black", label=<torch.utils.benchmark.op_fuzzers.binary>, shape="box", style="solid"];
"torch.utils.benchmark.op_fuzzers.sparse_binary" [color="black", label=<torch.utils.benchmark.op_fuzzers.sparse_binary>, shape="box", style="solid"];
"torch.utils.benchmark.op_fuzzers.sparse_unary" [color="black", label=<torch.utils.benchmark.op_fuzzers.sparse_unary>, shape="box", style="solid"];
"torch.utils.benchmark.op_fuzzers.spectral" [color="black", label=<torch.utils.benchmark.op_fuzzers.spectral>, shape="box", style="solid"];
"torch.utils.benchmark.op_fuzzers.unary" [color="black", label=<torch.utils.benchmark.op_fuzzers.unary>, shape="box", style="solid"];
"torch.utils.benchmark.utils" [color="black", label=<torch.utils.benchmark.utils>, shape="box", style="solid"];
"torch.utils.benchmark.utils._stubs" [color="black", label=<torch.utils.benchmark.utils._stubs>, shape="box", style="solid"];
"torch.utils.benchmark.utils.common" [color="black", label=<torch.utils.benchmark.utils.common>, shape="box", style="solid"];
"torch.utils.benchmark.utils.compare" [color="black", label=<torch.utils.benchmark.utils.compare>, shape="box", style="solid"];
"torch.utils.benchmark.utils.compile" [color="black", label=<torch.utils.benchmark.utils.compile>, shape="box", style="solid"];
"torch.utils.benchmark.utils.cpp_jit" [color="black", label=<torch.utils.benchmark.utils.cpp_jit>, shape="box", style="solid"];
"torch.utils.benchmark.utils.fuzzer" [color="black", label=<torch.utils.benchmark.utils.fuzzer>, shape="box", style="solid"];
"torch.utils.benchmark.utils.sparse_fuzzer" [color="black", label=<torch.utils.benchmark.utils.sparse_fuzzer>, shape="box", style="solid"];
"torch.utils.benchmark.utils.timer" [color="black", label=<torch.utils.benchmark.utils.timer>, shape="box", style="solid"];
"torch.utils.benchmark.utils.valgrind_wrapper" [color="black", label=<torch.utils.benchmark.utils.valgrind_wrapper>, shape="box", style="solid"];
"torch.utils.benchmark.utils.valgrind_wrapper.timer_interface" [color="black", label=<torch.utils.benchmark.utils.valgrind_wrapper.timer_interface>, shape="box", style="solid"];
"torch.utils.bottleneck" [color="black", label=<torch.utils.bottleneck>, shape="box", style="solid"];
"torch.utils.bottleneck.__main__" [color="black", label=<torch.utils.bottleneck.__main__>, shape="box", style="solid"];
"torch.utils.bundled_inputs" [color="black", label=<torch.utils.bundled_inputs>, shape="box", style="solid"];
"torch.utils.checkpoint" [color="black", label=<torch.utils.checkpoint>, shape="box", style="solid"];
"torch.utils.collect_env" [color="black", label=<torch.utils.collect_env>, shape="box", style="solid"];
"torch.utils.cpp_backtrace" [color="black", label=<torch.utils.cpp_backtrace>, shape="box", style="solid"];
"torch.utils.cpp_extension" [color="black", label=<torch.utils.cpp_extension>, shape="box", style="solid"];
"torch.utils.data" [color="black", label=<torch.utils.data>, shape="box", style="solid"];
"torch.utils.data._utils" [color="black", label=<torch.utils.data._utils>, shape="box", style="solid"];
"torch.utils.data._utils.collate" [color="black", label=<torch.utils.data._utils.collate>, shape="box", style="solid"];
"torch.utils.data._utils.fetch" [color="black", label=<torch.utils.data._utils.fetch>, shape="box", style="solid"];
"torch.utils.data._utils.pin_memory" [color="black", label=<torch.utils.data._utils.pin_memory>, shape="box", style="solid"];
"torch.utils.data._utils.signal_handling" [color="black", label=<torch.utils.data._utils.signal_handling>, shape="box", style="solid"];
"torch.utils.data._utils.worker" [color="black", label=<torch.utils.data._utils.worker>, shape="box", style="solid"];
"torch.utils.data.backward_compatibility" [color="black", label=<torch.utils.data.backward_compatibility>, shape="box", style="solid"];
"torch.utils.data.dataloader" [color="black", label=<torch.utils.data.dataloader>, shape="box", style="solid"];
"torch.utils.data.datapipes" [color="black", label=<torch.utils.data.datapipes>, shape="box", style="solid"];
"torch.utils.data.datapipes._decorator" [color="black", label=<torch.utils.data.datapipes._decorator>, shape="box", style="solid"];
"torch.utils.data.datapipes._hook_iterator" [color="black", label=<torch.utils.data.datapipes._hook_iterator>, shape="box", style="solid"];
"torch.utils.data.datapipes._typing" [color="black", label=<torch.utils.data.datapipes._typing>, shape="box", style="solid"];
"torch.utils.data.datapipes.dataframe" [color="black", label=<torch.utils.data.datapipes.dataframe>, shape="box", style="solid"];
"torch.utils.data.datapipes.dataframe.dataframe_wrapper" [color="black", label=<torch.utils.data.datapipes.dataframe.dataframe_wrapper>, shape="box", style="solid"];
"torch.utils.data.datapipes.dataframe.dataframes" [color="black", label=<torch.utils.data.datapipes.dataframe.dataframes>, shape="box", style="solid"];
"torch.utils.data.datapipes.dataframe.datapipes" [color="black", label=<torch.utils.data.datapipes.dataframe.datapipes>, shape="box", style="solid"];
"torch.utils.data.datapipes.dataframe.structures" [color="black", label=<torch.utils.data.datapipes.dataframe.structures>, shape="box", style="solid"];
"torch.utils.data.datapipes.datapipe" [color="black", label=<torch.utils.data.datapipes.datapipe>, shape="box", style="solid"];
"torch.utils.data.datapipes.gen_pyi" [color="black", label=<torch.utils.data.datapipes.gen_pyi>, shape="box", style="solid"];
"torch.utils.data.datapipes.iter" [color="black", label=<torch.utils.data.datapipes.iter>, shape="box", style="solid"];
"torch.utils.data.datapipes.iter.callable" [color="black", label=<torch.utils.data.datapipes.iter.callable>, shape="box", style="solid"];
"torch.utils.data.datapipes.iter.combinatorics" [color="black", label=<torch.utils.data.datapipes.iter.combinatorics>, shape="box", style="solid"];
"torch.utils.data.datapipes.iter.combining" [color="black", label=<torch.utils.data.datapipes.iter.combining>, shape="box", style="solid"];
"torch.utils.data.datapipes.iter.filelister" [color="black", label=<torch.utils.data.datapipes.iter.filelister>, shape="box", style="solid"];
"torch.utils.data.datapipes.iter.fileopener" [color="black", label=<torch.utils.data.datapipes.iter.fileopener>, shape="box", style="solid"];
"torch.utils.data.datapipes.iter.grouping" [color="black", label=<torch.utils.data.datapipes.iter.grouping>, shape="box", style="solid"];
"torch.utils.data.datapipes.iter.routeddecoder" [color="black", label=<torch.utils.data.datapipes.iter.routeddecoder>, shape="box", style="solid"];
"torch.utils.data.datapipes.iter.selecting" [color="black", label=<torch.utils.data.datapipes.iter.selecting>, shape="box", style="solid"];
"torch.utils.data.datapipes.iter.sharding" [color="black", label=<torch.utils.data.datapipes.iter.sharding>, shape="box", style="solid"];
"torch.utils.data.datapipes.iter.streamreader" [color="black", label=<torch.utils.data.datapipes.iter.streamreader>, shape="box", style="solid"];
"torch.utils.data.datapipes.iter.utils" [color="black", label=<torch.utils.data.datapipes.iter.utils>, shape="box", style="solid"];
"torch.utils.data.datapipes.map" [color="black", label=<torch.utils.data.datapipes.map>, shape="box", style="solid"];
"torch.utils.data.datapipes.map.callable" [color="black", label=<torch.utils.data.datapipes.map.callable>, shape="box", style="solid"];
"torch.utils.data.datapipes.map.combinatorics" [color="black", label=<torch.utils.data.datapipes.map.combinatorics>, shape="box", style="solid"];
"torch.utils.data.datapipes.map.combining" [color="black", label=<torch.utils.data.datapipes.map.combining>, shape="box", style="solid"];
"torch.utils.data.datapipes.map.grouping" [color="black", label=<torch.utils.data.datapipes.map.grouping>, shape="box", style="solid"];
"torch.utils.data.datapipes.map.utils" [color="black", label=<torch.utils.data.datapipes.map.utils>, shape="box", style="solid"];
"torch.utils.data.datapipes.utils" [color="black", label=<torch.utils.data.datapipes.utils>, shape="box", style="solid"];
"torch.utils.data.datapipes.utils.common" [color="black", label=<torch.utils.data.datapipes.utils.common>, shape="box", style="solid"];
"torch.utils.data.datapipes.utils.decoder" [color="black", label=<torch.utils.data.datapipes.utils.decoder>, shape="box", style="solid"];
"torch.utils.data.datapipes.utils.snapshot" [color="black", label=<torch.utils.data.datapipes.utils.snapshot>, shape="box", style="solid"];
"torch.utils.data.dataset" [color="black", label=<torch.utils.data.dataset>, shape="box", style="solid"];
"torch.utils.data.distributed" [color="black", label=<torch.utils.data.distributed>, shape="box", style="solid"];
"torch.utils.data.graph" [color="black", label=<torch.utils.data.graph>, shape="box", style="solid"];
"torch.utils.data.graph_settings" [color="black", label=<torch.utils.data.graph_settings>, shape="box", style="solid"];
"torch.utils.data.sampler" [color="black", label=<torch.utils.data.sampler>, shape="box", style="solid"];
"torch.utils.deterministic" [color="black", label=<torch.utils.deterministic>, shape="box", style="solid"];
"torch.utils.dlpack" [color="black", label=<torch.utils.dlpack>, shape="box", style="solid"];
"torch.utils.file_baton" [color="black", label=<torch.utils.file_baton>, shape="box", style="solid"];
"torch.utils.flop_counter" [color="black", label=<torch.utils.flop_counter>, shape="box", style="solid"];
"torch.utils.hipify" [color="black", label=<torch.utils.hipify>, shape="box", style="solid"];
"torch.utils.hipify.constants" [color="black", label=<torch.utils.hipify.constants>, shape="box", style="solid"];
"torch.utils.hipify.cuda_to_hip_mappings" [color="black", label=<torch.utils.hipify.cuda_to_hip_mappings>, shape="box", style="solid"];
"torch.utils.hipify.hipify_python" [color="black", label=<torch.utils.hipify.hipify_python>, shape="box", style="solid"];
"torch.utils.hipify.version" [color="black", label=<torch.utils.hipify.version>, shape="box", style="solid"];
"torch.utils.hooks" [color="black", label=<torch.utils.hooks>, shape="box", style="solid"];
"torch.utils.jit" [color="black", label=<torch.utils.jit>, shape="box", style="solid"];
"torch.utils.jit.log_extract" [color="black", label=<torch.utils.jit.log_extract>, shape="box", style="solid"];
"torch.utils.mkldnn" [color="black", label=<torch.utils.mkldnn>, shape="box", style="solid"];
"torch.utils.mobile_optimizer" [color="black", label=<torch.utils.mobile_optimizer>, shape="box", style="solid"];
"torch.utils.model_dump" [color="black", label=<torch.utils.model_dump>, shape="box", style="solid"];
"torch.utils.model_dump.__main__" [color="black", label=<torch.utils.model_dump.__main__>, shape="box", style="solid"];
"torch.utils.model_zoo" [color="black", label=<torch.utils.model_zoo>, shape="box", style="solid"];
"torch.utils.module_tracker" [color="black", label=<torch.utils.module_tracker>, shape="box", style="solid"];
"torch.utils.show_pickle" [color="black", label=<torch.utils.show_pickle>, shape="box", style="solid"];
"torch.utils.tensorboard" [color="black", label=<torch.utils.tensorboard>, shape="box", style="solid"];
"torch.utils.tensorboard._convert_np" [color="black", label=<torch.utils.tensorboard._convert_np>, shape="box", style="solid"];
"torch.utils.tensorboard._embedding" [color="black", label=<torch.utils.tensorboard._embedding>, shape="box", style="solid"];
"torch.utils.tensorboard._onnx_graph" [color="black", label=<torch.utils.tensorboard._onnx_graph>, shape="box", style="solid"];
"torch.utils.tensorboard._proto_graph" [color="black", label=<torch.utils.tensorboard._proto_graph>, shape="box", style="solid"];
"torch.utils.tensorboard._pytorch_graph" [color="black", label=<torch.utils.tensorboard._pytorch_graph>, shape="box", style="solid"];
"torch.utils.tensorboard._utils" [color="black", label=<torch.utils.tensorboard._utils>, shape="box", style="solid"];
"torch.utils.tensorboard.summary" [color="black", label=<torch.utils.tensorboard.summary>, shape="box", style="solid"];
"torch.utils.tensorboard.writer" [color="black", label=<torch.utils.tensorboard.writer>, shape="box", style="solid"];
"torch.utils.throughput_benchmark" [color="black", label=<torch.utils.throughput_benchmark>, shape="box", style="solid"];
"torch.utils.viz" [color="black", label=<torch.utils.viz>, shape="box", style="solid"];
"torch.utils.viz._cycles" [color="black", label=<torch.utils.viz._cycles>, shape="box", style="solid"];
"torch.utils.weak" [color="black", label=<torch.utils.weak>, shape="box", style="solid"];
"torch.xpu" [color="black", label=<torch.xpu>, shape="box", style="solid"];
"torch.xpu._gpu_trace" [color="black", label=<torch.xpu._gpu_trace>, shape="box", style="solid"];
"torch.xpu._utils" [color="black", label=<torch.xpu._utils>, shape="box", style="solid"];
"torch.xpu.memory" [color="black", label=<torch.xpu.memory>, shape="box", style="solid"];
"torch.xpu.random" [color="black", label=<torch.xpu.random>, shape="box", style="solid"];
"torch.xpu.streams" [color="black", label=<torch.xpu.streams>, shape="box", style="solid"];
"torch" -> "torch" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._VF" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.__config__" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.__future__" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._awaits" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._classes" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._compile" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._dynamo.backends.registry" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._higher_order_ops" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._higher_order_ops.cond" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._higher_order_ops.while_loop" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._inductor.compile_fx" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._inductor.compiler_bisector" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._inductor.cudagraph_trees" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._library" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._linalg_utils" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._lobpcg" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._meta_registrations" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._size_docs" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._storage_docs" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._tensor" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._tensor_docs" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._tensor_str" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._torch_docs" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.accelerator" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.amp" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.ao" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.autograd.graph.save_on_cpu.__init__.torch.cuda" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.backends" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.compiler" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.cpu" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.cuda._sanitizer" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.export" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.fft" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.func" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.functional" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.futures" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.fx.experimental.sym_node" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.hub" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.jit" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.library" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.linalg" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.masked" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.mps" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.mtia" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.multiprocessing" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.multiprocessing._atfork" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.nested" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.optim" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.profiler" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.quantization" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.quasirandom" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.random" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.return_types" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.serialization" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.signal" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.signal.windows" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.sparse" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.special" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.storage" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.testing" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.utils._device" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.utils.dlpack" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.xpu" [arrowhead="open", arrowtail="none"];
"torch._VF" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._VF" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.__config__" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._awaits" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._awaits" -> "torch.__future__" [arrowhead="open", arrowtail="none"];
"torch._classes" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch._compile" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch._custom_op.autograd" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._custom_op.autograd" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._custom_op.functional" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._custom_op.functional" -> "torch._custom_op.autograd" [arrowhead="open", arrowtail="none"];
"torch._custom_op.functional" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._custom_op.functional" -> "torch.library" [arrowhead="open", arrowtail="none"];
"torch._custom_op.functional" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._custom_op.impl" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._custom_op.impl" -> "torch._custom_op.autograd" [arrowhead="open", arrowtail="none"];
"torch._custom_op.impl" -> "torch._library.infer_schema" [arrowhead="open", arrowtail="none"];
"torch._custom_op.impl" -> "torch.library" [arrowhead="open", arrowtail="none"];
"torch._custom_ops" -> "torch._custom_op.impl" [arrowhead="open", arrowtail="none"];
"torch._custom_ops" -> "torch.library" [arrowhead="open", arrowtail="none"];
"torch._decomp" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._decomp" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._decomp" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._decomp" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._decomp" -> "torch.export.exported_program" [arrowhead="open", arrowtail="none"];
"torch._decomp" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._decomp" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._decomp.decompositions" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._decomp.decompositions" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch._decomp.decompositions" -> "torch._higher_order_ops.out_dtype" [arrowhead="open", arrowtail="none"];
"torch._decomp.decompositions" -> "torch._prims" [arrowhead="open", arrowtail="none"];
"torch._decomp.decompositions" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._decomp.decompositions" -> "torch._prims_common.wrappers" [arrowhead="open", arrowtail="none"];
"torch._decomp.decompositions" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._decomp.decompositions" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch._decomp.decompositions" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._decomp.decompositions" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._decomp.decompositions_for_jvp" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._decomp.decompositions_for_jvp" -> "torch._prims_common.wrappers" [arrowhead="open", arrowtail="none"];
"torch._decomp.decompositions_for_rng" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._decomp.decompositions_for_rng" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch._decomp.decompositions_for_rng" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._deploy" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._deploy" -> "torch.package" [arrowhead="open", arrowtail="none"];
"torch._deploy" -> "torch.package._package_pickler" [arrowhead="open", arrowtail="none"];
"torch._deploy" -> "torch.package._package_unpickler" [arrowhead="open", arrowtail="none"];
"torch._deploy" -> "torch.serialization" [arrowhead="open", arrowtail="none"];
"torch._dispatch.python" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dispatch.python" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._dispatch.python" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._dynamo" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo" -> "torch._dynamo.backends.registry" [arrowhead="open", arrowtail="none"];
"torch._dynamo" -> "torch._dynamo.callback" [arrowhead="open", arrowtail="none"];
"torch._dynamo" -> "torch._dynamo.code_context" [arrowhead="open", arrowtail="none"];
"torch._dynamo" -> "torch._dynamo.convert_frame" [arrowhead="open", arrowtail="none"];
"torch._dynamo" -> "torch._dynamo.decorators" [arrowhead="open", arrowtail="none"];
"torch._dynamo" -> "torch._dynamo.eval_frame" [arrowhead="open", arrowtail="none"];
"torch._dynamo" -> "torch._dynamo.external_utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo" -> "torch._dynamo.mutation_guard" [arrowhead="open", arrowtail="none"];
"torch._dynamo" -> "torch._dynamo.pgo" [arrowhead="open", arrowtail="none"];
"torch._dynamo" -> "torch._dynamo.polyfills" [arrowhead="open", arrowtail="none"];
"torch._dynamo" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none"];
"torch._dynamo" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo._trace_wrapped_higher_order_op" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo._trace_wrapped_higher_order_op" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo._trace_wrapped_higher_order_op" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._dynamo._trace_wrapped_higher_order_op" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch._dynamo._trace_wrapped_higher_order_op" -> "torch.fx.experimental._backward_state" [arrowhead="open", arrowtail="none"];
"torch._dynamo._trace_wrapped_higher_order_op" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo._trace_wrapped_higher_order_op" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch._dynamo._trace_wrapped_higher_order_op" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._dynamo._trace_wrapped_higher_order_op" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.common" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.common" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.common" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.common" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.common" -> "torch._functorch.aot_autograd" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.common" -> "torch._inductor.debug" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.common" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.cudagraphs" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.cudagraphs" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.cudagraphs" -> "torch._dynamo.backends.common" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.cudagraphs" -> "torch._dynamo.backends.debugging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.cudagraphs" -> "torch._dynamo.backends.registry" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.cudagraphs" -> "torch._dynamo.config" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.cudagraphs" -> "torch._inductor.cudagraph_trees" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.cudagraphs" -> "torch._inductor.cudagraph_utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.cudagraphs" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.cudagraphs" -> "torch.multiprocessing.reductions" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.debugging" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.debugging" -> "torch._dynamo.backends.common" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.debugging" -> "torch._dynamo.backends.registry" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.debugging" -> "torch._functorch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.debugging" -> "torch._functorch.compilers" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.debugging" -> "torch._functorch.config" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.debugging" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.debugging" -> "torch._inductor.compiler_bisector" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.debugging" -> "torch._subclasses.schema_check_mode" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.debugging" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.distributed" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.distributed" -> "torch._dynamo.output_graph" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.distributed" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.distributed" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.distributed" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.distributed" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.inductor" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.inductor" -> "torch._inductor.compile_fx" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.onnxrt" -> "torch._dynamo.backends.registry" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.onnxrt" -> "torch.onnx._internal.onnxruntime" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.registry" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.registry" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.torchxla" -> "torch._dynamo.backends.registry" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.tvm" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.tvm" -> "torch._dynamo.backends.common" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.tvm" -> "torch._dynamo.backends.registry" [arrowhead="open", arrowtail="none"];
"torch._dynamo.backends.tvm" -> "torch._dynamo.backends.tvm" [arrowhead="open", arrowtail="none"];
"torch._dynamo.bytecode_transformation" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.bytecode_transformation" -> "torch._dynamo.bytecode_analysis" [arrowhead="open", arrowtail="none"];
"torch._dynamo.bytecode_transformation" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.bytecode_transformation" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.cache_size" -> "torch._dynamo.logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.cache_size" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.cache_size" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.code_context" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.code_context" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.codegen" -> "torch._dynamo.bytecode_transformation" [arrowhead="open", arrowtail="none"];
"torch._dynamo.codegen" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.codegen" -> "torch._dynamo.source" [arrowhead="open", arrowtail="none"];
"torch._dynamo.codegen" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.codegen" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.codegen" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.codegen" -> "torch._dynamo.variables.nn_module" [arrowhead="open", arrowtail="none"];
"torch._dynamo.codegen" -> "torch._dynamo.variables.tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.codegen" -> "torch._dynamo.variables.torch_function" [arrowhead="open", arrowtail="none"];
"torch._dynamo.codegen" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch._dynamo.compiled_autograd" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.compiled_autograd" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch._dynamo.compiled_autograd" -> "torch._dynamo.eval_frame" [arrowhead="open", arrowtail="none"];
"torch._dynamo.compiled_autograd" -> "torch._dynamo.external_utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.compiled_autograd" -> "torch._dynamo.source" [arrowhead="open", arrowtail="none"];
"torch._dynamo.compiled_autograd" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.compiled_autograd" -> "torch._inductor.cudagraph_trees" [arrowhead="open", arrowtail="none"];
"torch._dynamo.compiled_autograd" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.compiled_autograd" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._dynamo.compiled_autograd" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch._dynamo.compiled_autograd" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._dynamo.compiled_autograd" -> "torch.fx.experimental._backward_state" [arrowhead="open", arrowtail="none"];
"torch._dynamo.compiled_autograd" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.compiled_autograd" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._dynamo.compiled_autograd" -> "torch.fx.traceback" [arrowhead="open", arrowtail="none"];
"torch._dynamo.compiled_autograd" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._dynamo.compiled_autograd" -> "torch.utils._traceback" [arrowhead="open", arrowtail="none"];
"torch._dynamo.comptime" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.comptime" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.comptime" -> "torch._dynamo.variables" [arrowhead="open", arrowtail="none"];
"torch._dynamo.comptime" -> "torch._dynamo.variables.constant" [arrowhead="open", arrowtail="none"];
"torch._dynamo.comptime" -> "torch._dynamo.variables.tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.comptime" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._dynamo.config" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.config" -> "torch._environment" [arrowhead="open", arrowtail="none"];
"torch._dynamo.config" -> "torch.utils._config_module" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.backends.debugging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.backends.distributed" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.bytecode_analysis" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.bytecode_transformation" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.cache_size" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.distributed" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.eval_frame" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.hooks" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.pgo" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.replay_record" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.resume_execution" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.trace_rules" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._dynamo.variables.torch_function" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._logging.structured" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch.fx._lazy_graph_module" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch.fx.experimental.validator" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch.monitor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch.nn.parallel.distributed" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch.utils._traceback" [arrowhead="open", arrowtail="none"];
"torch._dynamo.convert_frame" -> "torch.utils.hooks" [arrowhead="open", arrowtail="none"];
"torch._dynamo.create_parameter_op" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.debug_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.debug_utils" -> "torch._dynamo.logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.debug_utils" -> "torch._dynamo.testing" [arrowhead="open", arrowtail="none"];
"torch._dynamo.debug_utils" -> "torch._dynamo.testing" [arrowhead="open", arrowtail="none"];
"torch._dynamo.debug_utils" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.debug_utils" -> "torch._functorch.config" [arrowhead="open", arrowtail="none"];
"torch._dynamo.debug_utils" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._dynamo.debug_utils" -> "torch._tensor_str" [arrowhead="open", arrowtail="none"];
"torch._dynamo.debug_utils" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._dynamo.debug_utils" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch._dynamo.debug_utils" -> "torch.multiprocessing.reductions" [arrowhead="open", arrowtail="none"];
"torch._dynamo.debug_utils" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch._dynamo.debug_utils" -> "torch.utils._content_store" [arrowhead="open", arrowtail="none"];
"torch._dynamo.debug_utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._dynamo.decorators" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.decorators" -> "torch._dynamo.comptime" [arrowhead="open", arrowtail="none"];
"torch._dynamo.decorators" -> "torch._dynamo.eval_frame" [arrowhead="open", arrowtail="none"];
"torch._dynamo.decorators" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.decorators" -> "torch._dynamo.external_utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.decorators" -> "torch._dynamo.guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.decorators" -> "torch._dynamo.trace_rules" [arrowhead="open", arrowtail="none"];
"torch._dynamo.decorators" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.decorators" -> "torch._dynamo.variables" [arrowhead="open", arrowtail="none"];
"torch._dynamo.decorators" -> "torch._dynamo.variables.builder" [arrowhead="open", arrowtail="none"];
"torch._dynamo.decorators" -> "torch._dynamo.variables.builder" [arrowhead="open", arrowtail="none"];
"torch._dynamo.decorators" -> "torch.utils._contextlib" [arrowhead="open", arrowtail="none"];
"torch._dynamo.decorators" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.device_interface" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.distributed" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch._dynamo.backends.debugging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch._dynamo.backends.registry" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch._dynamo.code_context" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch._dynamo.decorators" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch._dynamo.hooks" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch._dynamo.logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch._dynamo.mutation_guard" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch._dynamo.repro.after_dynamo" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.export.dynamic_shapes" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.optim" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.optim.adadelta" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.optim.adagrad" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.optim.adam" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.optim.adamax" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.optim.adamw" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.optim.asgd" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.optim.lbfgs" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.optim.nadam" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.optim.radam" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.optim.rmsprop" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.optim.rprop" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.optim.sgd" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.optim.sparse_adam" [arrowhead="open", arrowtail="none"];
"torch._dynamo.eval_frame" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._dynamo.exc" -> "torch._dynamo.logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.exc" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.exc" -> "torch._dynamo.variables" [arrowhead="open", arrowtail="none"];
"torch._dynamo.exc" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.external_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.external_utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._dynamo.graph_deduplication" -> "torch._dynamo.graph_region_tracker" [arrowhead="open", arrowtail="none"];
"torch._dynamo.graph_deduplication" -> "torch._dynamo.logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.graph_deduplication" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.graph_deduplication" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._dynamo.graph_deduplication" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._dynamo.graph_region_tracker" -> "torch._dynamo.logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.graph_region_tracker" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._dynamo.graph_region_tracker" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.graph_region_tracker" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.graph_region_tracker" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch._dynamo.eval_frame" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch._dynamo.external_utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch._dynamo.logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch._dynamo.polyfills.loader" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch._dynamo.source" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch._dynamo.source" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch._logging.structured" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch.utils._device" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch.utils._traceback" [arrowhead="open", arrowtail="none"];
"torch._dynamo.guards" -> "torch.utils.weak" [arrowhead="open", arrowtail="none"];
"torch._dynamo.hooks" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.hooks" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.logging" -> "torch.hub" [arrowhead="open", arrowtail="none"];
"torch._dynamo.mutation_guard" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.mutation_guard" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.backends.registry" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.bytecode_transformation" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.code_context" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.codegen" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.current_scope_id" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.decorators" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.graph_deduplication" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.graph_region_tracker" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.mutation_guard" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.side_effects" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.source" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.variables.builder" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.variables.lists" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.variables.misc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.variables.nn_module" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.variables.tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._dynamo.variables.torch_function" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._functorch.config" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch.fx._lazy_graph_module" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch.fx.experimental._backward_state" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch.fx.experimental.sym_node" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch.fx.passes.runtime_assert" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.output_graph" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._dynamo.pgo" -> "torch._dynamo.config" [arrowhead="open", arrowtail="none"];
"torch._dynamo.pgo" -> "torch._dynamo.logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.pgo" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.pgo" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.pgo" -> "torch._environment" [arrowhead="open", arrowtail="none"];
"torch._dynamo.pgo" -> "torch._inductor.remote_cache" [arrowhead="open", arrowtail="none"];
"torch._dynamo.pgo" -> "torch._inductor.runtime.runtime_utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.pgo" -> "torch._logging._internal" [arrowhead="open", arrowtail="none"];
"torch._dynamo.pgo" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch._dynamo.pgo" -> "torch.utils._filelock" [arrowhead="open", arrowtail="none"];
"torch._dynamo.polyfills" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.polyfills" -> "torch._dynamo.polyfills.itertools" [arrowhead="open", arrowtail="none"];
"torch._dynamo.polyfills" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch._dynamo.polyfills.builtins" -> "torch._dynamo.polyfills.functools" [arrowhead="open", arrowtail="none"];
"torch._dynamo.polyfills.builtins" -> "torch._dynamo.polyfills.operator" [arrowhead="open", arrowtail="none"];
"torch._dynamo.polyfills.itertools" -> "torch._dynamo.polyfills.sys" [arrowhead="open", arrowtail="none"];
"torch._dynamo.polyfills.pytree" -> "torch._dynamo.polyfills.builtins" [arrowhead="open", arrowtail="none"];
"torch._dynamo.polyfills.pytree" -> "torch.utils._cxx_pytree" [arrowhead="open", arrowtail="none"];
"torch._dynamo.polyfills.pytree" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._dynamo.profiler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.profiler" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.replay_record" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.replay_record" -> "torch.utils._import_utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_aot" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_aot" -> "torch._dynamo.debug_utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_aot" -> "torch._dynamo.trace_rules" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_aot" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_aot" -> "torch._functorch.aot_autograd" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_aot" -> "torch._inductor.compile_fx" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_aot" -> "torch._inductor.hooks" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_aot" -> "torch._inductor.output_code" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_aot" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_aot" -> "torch.autograd.graph.save_on_cpu.__init__.torch.cuda" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_aot" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_aot" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_aot" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_aot" -> "torch.hub" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_aot" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_dynamo" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_dynamo" -> "torch._dynamo.backends.registry" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_dynamo" -> "torch._dynamo.debug_utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_dynamo" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_dynamo" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.after_dynamo" -> "torch.hub" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.aoti" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.aoti" -> "torch._dynamo.debug_utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.aoti" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.aoti" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.aoti" -> "torch._inductor.compile_fx" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.aoti" -> "torch.autograd.graph.save_on_cpu.__init__.torch.cuda" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.aoti" -> "torch.export" [arrowhead="open", arrowtail="none"];
"torch._dynamo.repro.aoti" -> "torch.hub" [arrowhead="open", arrowtail="none"];
"torch._dynamo.resume_execution" -> "torch._dynamo.bytecode_transformation" [arrowhead="open", arrowtail="none"];
"torch._dynamo.resume_execution" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.resume_execution" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.resume_execution" -> "torch._dynamo.variables.torch_function" [arrowhead="open", arrowtail="none"];
"torch._dynamo.side_effects" -> "torch._dynamo.bytecode_transformation" [arrowhead="open", arrowtail="none"];
"torch._dynamo.side_effects" -> "torch._dynamo.codegen" [arrowhead="open", arrowtail="none"];
"torch._dynamo.side_effects" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.side_effects" -> "torch._dynamo.source" [arrowhead="open", arrowtail="none"];
"torch._dynamo.side_effects" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.side_effects" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.side_effects" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.side_effects" -> "torch._dynamo.variables.misc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.side_effects" -> "torch._dynamo.variables.user_defined" [arrowhead="open", arrowtail="none"];
"torch._dynamo.side_effects" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch._dynamo.source" -> "torch._dynamo.bytecode_transformation" [arrowhead="open", arrowtail="none"];
"torch._dynamo.source" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.source" -> "torch._dynamo.variables.torch_function" [arrowhead="open", arrowtail="none"];
"torch._dynamo.source" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.bytecode_analysis" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.bytecode_transformation" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.code_context" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.codegen" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.funcname_cache" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.output_graph" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.replay_record" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.resume_execution" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.source" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.trace_rules" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.variables.builder" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.variables.builtin" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.variables.constant" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.variables.ctx_manager" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.variables.dicts" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.variables.functions" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.variables.iter" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.variables.lazy" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.variables.lazy" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.variables.lists" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.variables.misc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.variables.misc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.variables.nn_module" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.variables.tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.variables.torch_function" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._dynamo.variables.user_defined" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch._logging.structured" [arrowhead="open", arrowtail="none"];
"torch._dynamo.symbolic_convert" -> "torch.utils._functools" [arrowhead="open", arrowtail="none"];
"torch._dynamo.tensor_version_op" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.tensor_version_op" -> "torch._prims" [arrowhead="open", arrowtail="none"];
"torch._dynamo.tensor_version_op" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch._dynamo.tensor_version_op" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.test_case" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.test_case" -> "torch._dynamo.logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.test_case" -> "torch._logging._internal" [arrowhead="open", arrowtail="none"];
"torch._dynamo.test_case" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.test_minifier_common" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.test_minifier_common" -> "torch._dynamo.logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.test_minifier_common" -> "torch._dynamo.trace_rules" [arrowhead="open", arrowtail="none"];
"torch._dynamo.test_minifier_common" -> "torch.utils._traceback" [arrowhead="open", arrowtail="none"];
"torch._dynamo.testing" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.testing" -> "torch._dynamo.backends.debugging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.testing" -> "torch._dynamo.backends.registry" [arrowhead="open", arrowtail="none"];
"torch._dynamo.testing" -> "torch._dynamo.bytecode_transformation" [arrowhead="open", arrowtail="none"];
"torch._dynamo.testing" -> "torch._dynamo.guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.testing" -> "torch._dynamo.logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.testing" -> "torch._dynamo.output_graph" [arrowhead="open", arrowtail="none"];
"torch._dynamo.testing" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none"];
"torch._dynamo.testing" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.testing" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.testing" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.testing" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._dynamo.trace_rules" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.trace_rules" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch._dynamo.trace_rules" -> "torch._dynamo.logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.trace_rules" -> "torch._dynamo.resume_execution" [arrowhead="open", arrowtail="none"];
"torch._dynamo.trace_rules" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.trace_rules" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.trace_rules" -> "torch._dynamo.variables" [arrowhead="open", arrowtail="none"];
"torch._dynamo.trace_rules" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.trace_rules" -> "torch.utils._config_module" [arrowhead="open", arrowtail="none"];
"torch._dynamo.types" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._dynamo.eval_frame" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._dynamo.logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._dynamo.metrics_context" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._dynamo.source" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._dynamo.trace_rules" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._dynamo.variables" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._dynamo.variables" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._dynamo.variables.constant" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._dynamo.variables.higher_order_ops" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._dynamo.variables.tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._dynamo.variables.torch_function" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._higher_order_ops.invoke_subgraph" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._higher_order_ops.wrap" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._numpy" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._subclasses.meta_utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch.fx._utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch.monitor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch.nn.modules.lazy" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch.utils._sympy.value_ranges" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch.utils._triton" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch.utils.checkpoint" [arrowhead="open", arrowtail="none"];
"torch._dynamo.utils" -> "torch.utils.hooks" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables" -> "torch._dynamo.distributed" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables" -> "torch._dynamo.variables.builtin" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables" -> "torch._dynamo.variables.constant" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables" -> "torch._dynamo.variables.ctx_manager" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables" -> "torch._dynamo.variables.dicts" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables" -> "torch._dynamo.variables.functions" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables" -> "torch._dynamo.variables.higher_order_ops" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables" -> "torch._dynamo.variables.iter" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables" -> "torch._dynamo.variables.lazy" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables" -> "torch._dynamo.variables.lists" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables" -> "torch._dynamo.variables.misc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables" -> "torch._dynamo.variables.nn_module" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables" -> "torch._dynamo.variables.optimizer" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables" -> "torch._dynamo.variables.sdpa" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables" -> "torch._dynamo.variables.tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables" -> "torch._dynamo.variables.user_defined" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._dynamo.variables.constant" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._dynamo.variables.ctx_manager" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._dynamo.variables.dicts" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._dynamo.variables.distributed" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._dynamo.variables.functions" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._dynamo.variables.higher_order_ops" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._dynamo.variables.iter" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._dynamo.variables.lazy" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._dynamo.variables.lists" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._dynamo.variables.misc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._dynamo.variables.nn_module" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._dynamo.variables.optimizer" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._dynamo.variables.script_object" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._dynamo.variables.sdpa" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._dynamo.variables.tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._dynamo.variables.torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._dynamo.variables.torch_function" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._dynamo.variables.user_defined" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._higher_order_ops.torchbind" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._numpy" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._subclasses.meta_utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch.export.dynamic_shapes" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch.fx.experimental._backward_state" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch.fx.immutable_collections" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch.utils._sympy.value_ranges" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch.utils._triton" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builder" -> "torch.utils.weak" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builtin" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builtin" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builtin" -> "torch._dynamo.variables.builder" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builtin" -> "torch._dynamo.variables.builder" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builtin" -> "torch._dynamo.variables.constant" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builtin" -> "torch._dynamo.variables.ctx_manager" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builtin" -> "torch._dynamo.variables.dicts" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builtin" -> "torch._dynamo.variables.functions" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builtin" -> "torch._dynamo.variables.lazy" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builtin" -> "torch._dynamo.variables.lists" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builtin" -> "torch._dynamo.variables.nn_module" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builtin" -> "torch._dynamo.variables.tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builtin" -> "torch._dynamo.variables.torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builtin" -> "torch._dynamo.variables.torch_function" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builtin" -> "torch._dynamo.variables.user_defined" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.builtin" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.constant" -> "torch._dynamo.source" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.constant" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.constant" -> "torch._dynamo.variables.tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.constant" -> "torch._dynamo.variables.torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.ctx_manager" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.ctx_manager" -> "torch._dynamo.variables.builder" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.ctx_manager" -> "torch._dynamo.variables.functions" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.ctx_manager" -> "torch._dynamo.variables.user_defined" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.ctx_manager" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.dicts" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.dicts" -> "torch._dynamo.variables.constant" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.dicts" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.distributed" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.distributed" -> "torch._dynamo.variables.builder" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.distributed" -> "torch._dynamo.variables.constant" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.distributed" -> "torch._dynamo.variables.torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.distributed" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.distributed" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.distributed" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.distributed" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.distributed" -> "torch.fx.experimental._backward_state" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.distributed" -> "torch.testing._internal.distributed.fake_pg" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.functions" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.functions" -> "torch._dynamo.variables.constant" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.functions" -> "torch._dynamo.variables.dicts" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.functions" -> "torch._dynamo.variables.lists" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.functions" -> "torch._dynamo.variables.tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.functions" -> "torch._dynamo.variables.torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.functions" -> "torch._higher_order_ops.triton_kernel_wrap" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.functions" -> "torch.distributed._functional_collectives" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.functions" -> "torch.distributed.fsdp._fully_shard" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.functions" -> "torch.distributed.fsdp._fully_shard._fsdp_state" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._dynamo.variables" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._dynamo.variables.builder" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._dynamo.variables.builtin" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._dynamo.variables.dicts" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._dynamo.variables.functions" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._dynamo.variables.lazy" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._dynamo.variables.lists" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._dynamo.variables.tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._functorch._aot_autograd.autograd_cache" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._functorch._aot_autograd.schemas" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._functorch.autograd_function" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._higher_order_ops" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._higher_order_ops.scan" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._higher_order_ops.wrap" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch.fx.passes.shape_prop" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.higher_order_ops" -> "torch.utils.checkpoint" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.iter" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.iter" -> "torch._dynamo.variables.builtin" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.iter" -> "torch._dynamo.variables.constant" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.lazy" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.lazy" -> "torch._dynamo.variables.constant" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.lazy" -> "torch._dynamo.variables.tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.lists" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.lists" -> "torch._dynamo.variables.builtin" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.lists" -> "torch._dynamo.variables.constant" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.lists" -> "torch._dynamo.variables.functions" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.lists" -> "torch._dynamo.variables.iter" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.lists" -> "torch._dynamo.variables.tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.lists" -> "torch._dynamo.variables.torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.lists" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.misc" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.misc" -> "torch._dynamo.variables.builder" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.misc" -> "torch._dynamo.variables.functions" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.misc" -> "torch._dynamo.variables.higher_order_ops" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.misc" -> "torch._dynamo.variables.nn_module" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.misc" -> "torch._dynamo.variables.tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.misc" -> "torch._dynamo.variables.user_defined" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.misc" -> "torch._functorch.autograd_function" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.misc" -> "torch.autograd.function" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.nn_module" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.nn_module" -> "torch._dynamo.variables.builder" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.nn_module" -> "torch._dynamo.variables.functions" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.nn_module" -> "torch._dynamo.variables.lazy" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.nn_module" -> "torch._dynamo.variables.lists" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.nn_module" -> "torch._dynamo.variables.tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.nn_module" -> "torch._dynamo.variables.user_defined" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.optimizer" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.optimizer" -> "torch._dynamo.variables.constant" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.optimizer" -> "torch._dynamo.variables.dicts" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.optimizer" -> "torch._dynamo.variables.lazy" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.optimizer" -> "torch._dynamo.variables.lists" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.optimizer" -> "torch._dynamo.variables.misc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.optimizer" -> "torch._dynamo.variables.torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.optimizer" -> "torch._dynamo.variables.user_defined" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.optimizer" -> "torch._inductor.cudagraph_trees" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.optimizer" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.optimizer" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.script_object" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.script_object" -> "torch._dynamo.variables.higher_order_ops" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.script_object" -> "torch._dynamo.variables.torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.script_object" -> "torch._dynamo.variables.user_defined" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.script_object" -> "torch._higher_order_ops.torchbind" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.sdpa" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.sdpa" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.sdpa" -> "torch._dynamo.variables.builder" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.sdpa" -> "torch._dynamo.variables.misc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.sdpa" -> "torch.backends.cuda" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.tensor" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.tensor" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.tensor" -> "torch._dynamo.variables.builder" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.tensor" -> "torch._dynamo.variables.builtin" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.tensor" -> "torch._dynamo.variables.constant" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.tensor" -> "torch._dynamo.variables.lists" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.tensor" -> "torch._dynamo.variables.misc" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.tensor" -> "torch._dynamo.variables.torch_function" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.tensor" -> "torch._subclasses.meta_utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.tensor" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.tensor" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch" -> "torch._dynamo.variables.builder" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch" -> "torch._dynamo.variables.builder" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch" -> "torch._dynamo.variables.ctx_manager" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch" -> "torch._dynamo.variables.distributed" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch" -> "torch._dynamo.variables.lists" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch" -> "torch._dynamo.variables.torch_function" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch" -> "torch.backends.cuda" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch" -> "torch.distributed.fsdp._fully_shard" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch_function" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch_function" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch_function" -> "torch._dynamo.variables.constant" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch_function" -> "torch._dynamo.variables.ctx_manager" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch_function" -> "torch._dynamo.variables.dicts" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch_function" -> "torch._dynamo.variables.lazy" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch_function" -> "torch._dynamo.variables.lists" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch_function" -> "torch._dynamo.variables.tensor" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch_function" -> "torch._dynamo.variables.torch" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch_function" -> "torch._dynamo.variables.user_defined" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch_function" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch_function" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.torch_function" -> "torch.utils._device" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.user_defined" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.user_defined" -> "torch._dynamo.variables.builder" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.user_defined" -> "torch._dynamo.variables.builtin" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.user_defined" -> "torch._dynamo.variables.ctx_manager" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.user_defined" -> "torch._dynamo.variables.dicts" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.user_defined" -> "torch._dynamo.variables.torch_function" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.user_defined" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.user_defined" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.user_defined" -> "torch.testing._internal.jit_utils" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.user_defined" -> "torch.utils._cxx_pytree" [arrowhead="open", arrowtail="none"];
"torch._dynamo.variables.user_defined" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch._export.non_strict_utils" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch._export.wrappers" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch._inductor.decomposition" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch.export._trace" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch.export._tree_utils" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch.export._unlift" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch.export.dynamic_shapes" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch.export.graph_signature" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch.fx.traceback" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._export" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._export.converter" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.converter" -> "torch._export.passes.replace_quantized_ops_with_standard_ops_pass" [arrowhead="open", arrowtail="none"];
"torch._export.converter" -> "torch.export.exported_program" [arrowhead="open", arrowtail="none"];
"torch._export.converter" -> "torch.export.graph_signature" [arrowhead="open", arrowtail="none"];
"torch._export.converter" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._export.converter" -> "torch.fx.subgraph_rewriter" [arrowhead="open", arrowtail="none"];
"torch._export.db.case" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples" -> "torch._export.db.case" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.assume_constant_result" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.assume_constant_result" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.autograd_function" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.class_method" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.cond_branch_class_method" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.cond_branch_nested_function" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.cond_branch_nonlocal_variables" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.cond_closed_over_variable" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.cond_operands" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.cond_operands" -> "torch.export" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.cond_predicate" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.constrain_as_size_example" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.constrain_as_value_example" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.decorator" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.dictionary" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.dynamic_shape_assert" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.dynamic_shape_constructor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.dynamic_shape_if_guard" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.dynamic_shape_map" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.dynamic_shape_round" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.dynamic_shape_round" -> "torch._export.db.case" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.dynamic_shape_round" -> "torch.export" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.dynamic_shape_slicing" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.dynamic_shape_view" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.fn_with_kwargs" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.list_contains" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.list_unpack" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.model_attr_mutation" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.model_attr_mutation" -> "torch._export.db.case" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.nested_function" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.null_context_manager" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.optional_input" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.optional_input" -> "torch._export.db.case" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.pytree_flatten" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.pytree_flatten" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.pytree_flatten" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.scalar_output" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.scalar_output" -> "torch.export" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.specialized_attribute" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.static_for_loop" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.static_if" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.tensor_setattr" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.type_reflection_method" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.unsupported_operator" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.unsupported_operator" -> "torch._export.db.case" [arrowhead="open", arrowtail="none"];
"torch._export.db.examples.user_input_mutation" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.db.gen_example" -> "torch._export.db.examples" [arrowhead="open", arrowtail="none"];
"torch._export.db.logging" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch._export.db.logging" -> "torch._export.db.examples" [arrowhead="open", arrowtail="none"];
"torch._export.db.logging" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._export.non_strict_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.non_strict_utils" -> "torch._dynamo.source" [arrowhead="open", arrowtail="none"];
"torch._export.non_strict_utils" -> "torch._dynamo.variables.builder" [arrowhead="open", arrowtail="none"];
"torch._export.non_strict_utils" -> "torch._export.passes.add_runtime_assertions_for_constraints_pass" [arrowhead="open", arrowtail="none"];
"torch._export.non_strict_utils" -> "torch._export.passes.lift_constants_pass" [arrowhead="open", arrowtail="none"];
"torch._export.non_strict_utils" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._export.non_strict_utils" -> "torch._library.fake_class_registry" [arrowhead="open", arrowtail="none"];
"torch._export.non_strict_utils" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._export.non_strict_utils" -> "torch.export" [arrowhead="open", arrowtail="none"];
"torch._export.non_strict_utils" -> "torch.export.dynamic_shapes" [arrowhead="open", arrowtail="none"];
"torch._export.non_strict_utils" -> "torch.export.graph_signature" [arrowhead="open", arrowtail="none"];
"torch._export.non_strict_utils" -> "torch.fx.experimental" [arrowhead="open", arrowtail="none"];
"torch._export.non_strict_utils" -> "torch.fx.experimental._config" [arrowhead="open", arrowtail="none"];
"torch._export.non_strict_utils" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._export.non_strict_utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._export.pass_base" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.pass_base" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch._export.pass_base" -> "torch._export.pass_infra.node_metadata" [arrowhead="open", arrowtail="none"];
"torch._export.pass_base" -> "torch._export.pass_infra.proxy_value" [arrowhead="open", arrowtail="none"];
"torch._export.pass_base" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch._export.pass_base" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._export.pass_base" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._export.pass_base" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._export.pass_base" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._export.pass_base" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch._export.pass_base" -> "torch.fx.passes.infra.pass_base" [arrowhead="open", arrowtail="none"];
"torch._export.pass_base" -> "torch.fx.passes.shape_prop" [arrowhead="open", arrowtail="none"];
"torch._export.pass_base" -> "torch.fx.traceback" [arrowhead="open", arrowtail="none"];
"torch._export.pass_base" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._export.pass_base" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._export.pass_infra.proxy_value" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.passes" -> "torch._export.passes.replace_view_ops_with_view_copy_ops_pass" [arrowhead="open", arrowtail="none"];
"torch._export.passes._node_metadata_hook" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.passes._node_metadata_hook" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch._export.passes.add_runtime_assertions_for_constraints_pass" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.passes.add_runtime_assertions_for_constraints_pass" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._export.passes.add_runtime_assertions_for_constraints_pass" -> "torch.fx.passes.infra.pass_base" [arrowhead="open", arrowtail="none"];
"torch._export.passes.add_runtime_assertions_for_constraints_pass" -> "torch.utils._sympy.numbers" [arrowhead="open", arrowtail="none"];
"torch._export.passes.add_runtime_assertions_for_constraints_pass" -> "torch.utils._sympy.value_ranges" [arrowhead="open", arrowtail="none"];
"torch._export.passes.collect_tracepoints_pass" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.passes.collect_tracepoints_pass" -> "torch.export.exported_program" [arrowhead="open", arrowtail="none"];
"torch._export.passes.collect_tracepoints_pass" -> "torch.fx.passes.infra.pass_base" [arrowhead="open", arrowtail="none"];
"torch._export.passes.constant_folding" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.passes.constant_folding" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._export.passes.functionalize_side_effectful_ops_pass" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.passes.functionalize_side_effectful_ops_pass" -> "torch._export.pass_base" [arrowhead="open", arrowtail="none"];
"torch._export.passes.functionalize_side_effectful_ops_pass" -> "torch._export.pass_infra.node_metadata" [arrowhead="open", arrowtail="none"];
"torch._export.passes.functionalize_side_effectful_ops_pass" -> "torch._export.pass_infra.proxy_value" [arrowhead="open", arrowtail="none"];
"torch._export.passes.functionalize_side_effectful_ops_pass" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._export.passes.insert_custom_op_guards" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.passes.insert_custom_op_guards" -> "torch._export.passes._node_metadata_hook" [arrowhead="open", arrowtail="none"];
"torch._export.passes.lift_constants_pass" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.passes.lift_constants_pass" -> "torch._export.verifier" [arrowhead="open", arrowtail="none"];
"torch._export.passes.lift_constants_pass" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._export.passes.lift_constants_pass" -> "torch._library.fake_class_registry" [arrowhead="open", arrowtail="none"];
"torch._export.passes.lift_constants_pass" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._export.passes.lift_constants_pass" -> "torch.export.exported_program" [arrowhead="open", arrowtail="none"];
"torch._export.passes.lift_constants_pass" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch._export.passes.remove_runtime_assertions" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.passes.remove_runtime_assertions" -> "torch.fx.passes.infra.pass_base" [arrowhead="open", arrowtail="none"];
"torch._export.passes.replace_autocast_with_hop_pass" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.passes.replace_autocast_with_hop_pass" -> "torch._export.passes.replace_with_hop_pass_util" [arrowhead="open", arrowtail="none"];
"torch._export.passes.replace_autocast_with_hop_pass" -> "torch._higher_order_ops.wrap" [arrowhead="open", arrowtail="none"];
"torch._export.passes.replace_quantized_ops_with_standard_ops_pass" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.passes.replace_quantized_ops_with_standard_ops_pass" -> "torch._export.converter" [arrowhead="open", arrowtail="none"];
"torch._export.passes.replace_quantized_ops_with_standard_ops_pass" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._export.passes.replace_quantized_ops_with_standard_ops_pass" -> "torch.ao.quantization.fx._decomposed" [arrowhead="open", arrowtail="none"];
"torch._export.passes.replace_quantized_ops_with_standard_ops_pass" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch._export.passes.replace_quantized_ops_with_standard_ops_pass" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch._export.passes.replace_set_grad_with_hop_pass" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.passes.replace_set_grad_with_hop_pass" -> "torch._export.passes.replace_with_hop_pass_util" [arrowhead="open", arrowtail="none"];
"torch._export.passes.replace_set_grad_with_hop_pass" -> "torch._higher_order_ops.wrap" [arrowhead="open", arrowtail="none"];
"torch._export.passes.replace_view_ops_with_view_copy_ops_pass" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.passes.replace_view_ops_with_view_copy_ops_pass" -> "torch._export.error" [arrowhead="open", arrowtail="none"];
"torch._export.passes.replace_view_ops_with_view_copy_ops_pass" -> "torch._export.pass_base" [arrowhead="open", arrowtail="none"];
"torch._export.passes.replace_view_ops_with_view_copy_ops_pass" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._export.passes.replace_with_hop_pass_util" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.serde.aoti_schema" -> "torch._export.serde.schema" [arrowhead="open", arrowtail="none"];
"torch._export.serde.dynamic_shapes" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.serde.dynamic_shapes" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch._export.serde.dynamic_shapes" -> "torch._export.serde.serialize" [arrowhead="open", arrowtail="none"];
"torch._export.serde.dynamic_shapes" -> "torch.export.dynamic_shapes" [arrowhead="open", arrowtail="none"];
"torch._export.serde.dynamic_shapes" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._export.serde.dynamic_shapes" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._export.serde.dynamic_shapes" -> "torch.utils._sympy.numbers" [arrowhead="open", arrowtail="none"];
"torch._export.serde.schema" -> "torch._export.serde.union" [arrowhead="open", arrowtail="none"];
"torch._export.serde.schema_check" -> "torch._export.serde" [arrowhead="open", arrowtail="none"];
"torch._export.serde.schema_check" -> "torch._export.serde.schema" [arrowhead="open", arrowtail="none"];
"torch._export.serde.schema_check" -> "torch._export.serde.union" [arrowhead="open", arrowtail="none"];
"torch._export.serde.serialize" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.serde.serialize" -> "torch._export.serde.schema" [arrowhead="open", arrowtail="none"];
"torch._export.serde.serialize" -> "torch._export.serde.schema" [arrowhead="open", arrowtail="none"];
"torch._export.serde.serialize" -> "torch._export.serde.union" [arrowhead="open", arrowtail="none"];
"torch._export.serde.serialize" -> "torch._export.verifier" [arrowhead="open", arrowtail="none"];
"torch._export.serde.serialize" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._export.serde.serialize" -> "torch._library.fake_class_registry" [arrowhead="open", arrowtail="none"];
"torch._export.serde.serialize" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._export.serde.serialize" -> "torch.export.exported_program" [arrowhead="open", arrowtail="none"];
"torch._export.serde.serialize" -> "torch.fx.experimental" [arrowhead="open", arrowtail="none"];
"torch._export.serde.serialize" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._export.serde.serialize" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._export.serde.serialize" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._export.serde.serialize" -> "torch.utils._sympy.numbers" [arrowhead="open", arrowtail="none"];
"torch._export.serde.serialize" -> "torch.utils._sympy.value_ranges" [arrowhead="open", arrowtail="none"];
"torch._export.tools" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.tools" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._export.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.utils" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch._export.utils" -> "torch._export.passes._node_metadata_hook" [arrowhead="open", arrowtail="none"];
"torch._export.utils" -> "torch._export.passes.add_runtime_assertions_for_constraints_pass" [arrowhead="open", arrowtail="none"];
"torch._export.utils" -> "torch._export.passes.lift_constants_pass" [arrowhead="open", arrowtail="none"];
"torch._export.utils" -> "torch._functorch._aot_autograd.input_output_analysis" [arrowhead="open", arrowtail="none"];
"torch._export.utils" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._export.utils" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._export.utils" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._export.utils" -> "torch.export.graph_signature" [arrowhead="open", arrowtail="none"];
"torch._export.utils" -> "torch.fx._utils" [arrowhead="open", arrowtail="none"];
"torch._export.utils" -> "torch.fx.passes.runtime_assert" [arrowhead="open", arrowtail="none"];
"torch._export.utils" -> "torch.fx.passes.split_module" [arrowhead="open", arrowtail="none"];
"torch._export.utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._export.utils" -> "torch.utils._sympy.solve" [arrowhead="open", arrowtail="none"];
"torch._export.verifier" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.verifier" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._export.verifier" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._export.verifier" -> "torch.export.graph_signature" [arrowhead="open", arrowtail="none"];
"torch._export.verifier" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._export.verifier" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._export.wrappers" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._export.wrappers" -> "torch._higher_order_ops.strict_mode" [arrowhead="open", arrowtail="none"];
"torch._export.wrappers" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._export.wrappers" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._export.wrappers" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._export.wrappers" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._export.wrappers" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._export.wrappers" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._functorch._activation_checkpointing.knapsack" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.autograd_cache" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.autograd_cache" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.autograd_cache" -> "torch._functorch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.autograd_cache" -> "torch._functorch._aot_autograd.runtime_wrappers" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.autograd_cache" -> "torch._functorch._aot_autograd.schemas" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.autograd_cache" -> "torch._functorch.config" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.autograd_cache" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.autograd_cache" -> "torch._inductor.output_code" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.autograd_cache" -> "torch._inductor.runtime.runtime_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.autograd_cache" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.autograd_cache" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.autograd_cache" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.collect_metadata_analysis" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.collect_metadata_analysis" -> "torch._functorch._aot_autograd.functional_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.collect_metadata_analysis" -> "torch._functorch._aot_autograd.schemas" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.collect_metadata_analysis" -> "torch._functorch._aot_autograd.subclass_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.collect_metadata_analysis" -> "torch._functorch._aot_autograd.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.collect_metadata_analysis" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.collect_metadata_analysis" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.collect_metadata_analysis" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.collect_metadata_analysis" -> "torch._subclasses.meta_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.collect_metadata_analysis" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.collect_metadata_analysis" -> "torch.multiprocessing.reductions" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.collect_metadata_analysis" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.collect_metadata_analysis" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.dispatch_and_compile_graph" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.dispatch_and_compile_graph" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.dispatch_and_compile_graph" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.dispatch_and_compile_graph" -> "torch._functorch._aot_autograd.functional_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.dispatch_and_compile_graph" -> "torch._functorch._aot_autograd.schemas" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.dispatch_and_compile_graph" -> "torch._functorch._aot_autograd.traced_function_transforms" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.dispatch_and_compile_graph" -> "torch._functorch._aot_autograd.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.dispatch_and_compile_graph" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.dispatch_and_compile_graph" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.dispatch_and_compile_graph" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.dispatch_and_compile_graph" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.functional_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.functional_utils" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.functional_utils" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.functional_utils" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.functional_utils" -> "torch._subclasses.meta_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.functional_utils" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.functional_utils" -> "torch.multiprocessing.reductions" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.functional_utils" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.input_output_analysis" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.input_output_analysis" -> "torch._functorch._aot_autograd.collect_metadata_analysis" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.input_output_analysis" -> "torch._functorch._aot_autograd.schemas" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.input_output_analysis" -> "torch._functorch._aot_autograd.schemas" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.input_output_analysis" -> "torch._functorch._aot_autograd.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.input_output_analysis" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.input_output_analysis" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.input_output_analysis" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.input_output_analysis" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch._functorch._aot_autograd.autograd_cache" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch._functorch._aot_autograd.dispatch_and_compile_graph" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch._functorch._aot_autograd.logging_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch._functorch._aot_autograd.runtime_wrappers" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch._functorch._aot_autograd.schemas" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch._functorch._aot_autograd.subclass_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch._functorch._aot_autograd.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch._subclasses.meta_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch.fx._lazy_graph_module" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch.fx.experimental._backward_state" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch.fx.passes._tensorify_python_scalars" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.jit_compile_runtime_wrappers" -> "torch.multiprocessing.reductions" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.logging_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.logging_utils" -> "torch.fx.traceback" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.runtime_wrappers" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.runtime_wrappers" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.runtime_wrappers" -> "torch._functorch._aot_autograd.collect_metadata_analysis" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.runtime_wrappers" -> "torch._functorch._aot_autograd.functional_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.runtime_wrappers" -> "torch._functorch._aot_autograd.input_output_analysis" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.runtime_wrappers" -> "torch._functorch._aot_autograd.logging_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.runtime_wrappers" -> "torch._functorch._aot_autograd.schemas" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.runtime_wrappers" -> "torch._functorch._aot_autograd.subclass_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.runtime_wrappers" -> "torch._functorch._aot_autograd.traced_function_transforms" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.runtime_wrappers" -> "torch._functorch._aot_autograd.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.runtime_wrappers" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.runtime_wrappers" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.runtime_wrappers" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.runtime_wrappers" -> "torch.fx.experimental._backward_state" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.runtime_wrappers" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.runtime_wrappers" -> "torch.multiprocessing.reductions" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.runtime_wrappers" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.schemas" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.schemas" -> "torch._functorch._aot_autograd.functional_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.schemas" -> "torch._functorch._aot_autograd.subclass_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.schemas" -> "torch._functorch._aot_autograd.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.schemas" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.schemas" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.schemas" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.schemas" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.schemas" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.schemas" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.subclass_parametrization" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.subclass_parametrization" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.subclass_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.subclass_utils" -> "torch._functorch._aot_autograd.schemas" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.subclass_utils" -> "torch._functorch._aot_autograd.schemas" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.subclass_utils" -> "torch._functorch._aot_autograd.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.subclass_utils" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.subclass_utils" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.subclass_utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.traced_function_transforms" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.traced_function_transforms" -> "torch._decomp.decompositions_for_rng" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.traced_function_transforms" -> "torch._functorch._aot_autograd.collect_metadata_analysis" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.traced_function_transforms" -> "torch._functorch._aot_autograd.functional_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.traced_function_transforms" -> "torch._functorch._aot_autograd.logging_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.traced_function_transforms" -> "torch._functorch._aot_autograd.schemas" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.traced_function_transforms" -> "torch._functorch._aot_autograd.subclass_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.traced_function_transforms" -> "torch._functorch._aot_autograd.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.traced_function_transforms" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.traced_function_transforms" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.traced_function_transforms" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.traced_function_transforms" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.traced_function_transforms" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.traced_function_transforms" -> "torch.fx.traceback" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.traced_function_transforms" -> "torch.nn.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.traced_function_transforms" -> "torch.nn.utils.stateless" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.traced_function_transforms" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.utils" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.utils" -> "torch._library.fake_class_registry" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.utils" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.utils" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.utils" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.utils" -> "torch.fx.experimental._backward_state" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.utils" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._functorch._aot_autograd.utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._decomp.decompositions_for_rng" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._dynamo.compiled_autograd" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._dynamo.source" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._functorch._aot_autograd.autograd_cache" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._functorch._aot_autograd.collect_metadata_analysis" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._functorch._aot_autograd.functional_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._functorch._aot_autograd.input_output_analysis" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._functorch._aot_autograd.jit_compile_runtime_wrappers" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._functorch._aot_autograd.logging_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._functorch._aot_autograd.runtime_wrappers" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._functorch._aot_autograd.schemas" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._functorch._aot_autograd.subclass_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._functorch._aot_autograd.traced_function_transforms" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._functorch._aot_autograd.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._functorch.partitioners" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._inductor.output_code" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._library.fake_class_registry" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._functorch.aot_autograd" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._functorch.apis" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch._functorch.apis" -> "torch._functorch" [arrowhead="open", arrowtail="none"];
"torch._functorch.apis" -> "torch._functorch.eager_transforms" [arrowhead="open", arrowtail="none"];
"torch._functorch.apis" -> "torch._functorch.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.apis" -> "torch._functorch.vmap" [arrowhead="open", arrowtail="none"];
"torch._functorch.autograd_function" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch.autograd_function" -> "torch._functorch.apis" [arrowhead="open", arrowtail="none"];
"torch._functorch.autograd_function" -> "torch._functorch.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.autograd_function" -> "torch._functorch.vmap" [arrowhead="open", arrowtail="none"];
"torch._functorch.autograd_function" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._functorch.autograd_function" -> "torch.autograd.forward_ad" [arrowhead="open", arrowtail="none"];
"torch._functorch.autograd_function" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._functorch.batch_norm_replacement" -> "torch._functorch.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.batch_norm_replacement" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch._functorch.benchmark_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch.benchmark_utils" -> "torch.profiler" [arrowhead="open", arrowtail="none"];
"torch._functorch.compile_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch.compile_utils" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._functorch.compile_utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._functorch.compile_utils" -> "torch.multiprocessing.reductions" [arrowhead="open", arrowtail="none"];
"torch._functorch.compile_utils" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.compile_utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._functorch.compilers" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch.compilers" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch._functorch.compilers" -> "torch._functorch.aot_autograd" [arrowhead="open", arrowtail="none"];
"torch._functorch.compilers" -> "torch._functorch.compile_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.compilers" -> "torch._functorch.partitioners" [arrowhead="open", arrowtail="none"];
"torch._functorch.compilers" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._functorch.compilers" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._functorch.compilers" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch._functorch.compilers" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._functorch.config" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._functorch.config" -> "torch.utils._config_module" [arrowhead="open", arrowtail="none"];
"torch._functorch.deprecated" -> "torch._functorch.apis" [arrowhead="open", arrowtail="none"];
"torch._functorch.deprecated" -> "torch._functorch.eager_transforms" [arrowhead="open", arrowtail="none"];
"torch._functorch.deprecated" -> "torch._functorch.make_functional" [arrowhead="open", arrowtail="none"];
"torch._functorch.deprecated" -> "torch._functorch.vmap" [arrowhead="open", arrowtail="none"];
"torch._functorch.deprecated" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch._functorch.eager_transforms" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch.eager_transforms" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch._functorch.eager_transforms" -> "torch._functorch.apis" [arrowhead="open", arrowtail="none"];
"torch._functorch.eager_transforms" -> "torch._functorch.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.eager_transforms" -> "torch._functorch.vmap" [arrowhead="open", arrowtail="none"];
"torch._functorch.eager_transforms" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._functorch.eager_transforms" -> "torch.autograd.forward_ad" [arrowhead="open", arrowtail="none"];
"torch._functorch.eager_transforms" -> "torch.fx.experimental" [arrowhead="open", arrowtail="none"];
"torch._functorch.eager_transforms" -> "torch.fx.experimental.const_fold" [arrowhead="open", arrowtail="none"];
"torch._functorch.eager_transforms" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._functorch.eager_transforms" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.eager_transforms" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._functorch.functional_call" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch.functional_call" -> "torch._functorch.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.functional_call" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch._functorch.fx_minifier" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch.fx_minifier" -> "torch._functorch.compile_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.fx_minifier" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._functorch.fx_minifier" -> "torch.hub" [arrowhead="open", arrowtail="none"];
"torch._functorch.fx_minifier" -> "torch.multiprocessing.reductions" [arrowhead="open", arrowtail="none"];
"torch._functorch.fx_minifier" -> "torch.utils._content_store" [arrowhead="open", arrowtail="none"];
"torch._functorch.make_functional" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch.make_functional" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch._functorch.make_functional" -> "torch.nn.utils._named_member_accessor" [arrowhead="open", arrowtail="none"];
"torch._functorch.partitioners" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch.partitioners" -> "torch._functorch._activation_checkpointing.knapsack" [arrowhead="open", arrowtail="none"];
"torch._functorch.partitioners" -> "torch._functorch._aot_autograd.logging_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.partitioners" -> "torch._functorch._aot_autograd.utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.partitioners" -> "torch._functorch.compile_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.partitioners" -> "torch._inductor.fx_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.partitioners" -> "torch._inductor.runtime.benchmarking" [arrowhead="open", arrowtail="none"];
"torch._functorch.partitioners" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._functorch.partitioners" -> "torch.fx.experimental._backward_state" [arrowhead="open", arrowtail="none"];
"torch._functorch.partitioners" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._functorch.partitioners" -> "torch.fx.experimental.sym_node" [arrowhead="open", arrowtail="none"];
"torch._functorch.partitioners" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._functorch.partitioners" -> "torch.fx.passes" [arrowhead="open", arrowtail="none"];
"torch._functorch.partitioners" -> "torch.fx.passes.graph_drawer" [arrowhead="open", arrowtail="none"];
"torch._functorch.partitioners" -> "torch.utils._mode_utils" [arrowhead="open", arrowtail="none"];
"torch._functorch.partitioners" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._functorch.partitioners" -> "torch.utils.checkpoint" [arrowhead="open", arrowtail="none"];
"torch._functorch.partitioners" -> "torch.utils.flop_counter" [arrowhead="open", arrowtail="none"];
"torch._functorch.pyfunctorch" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch.pyfunctorch" -> "torch.autograd.forward_ad" [arrowhead="open", arrowtail="none"];
"torch._functorch.pyfunctorch" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._functorch.python_key" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._functorch.pytree_hacks" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._functorch.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch.utils" -> "torch.utils._exposed_in" [arrowhead="open", arrowtail="none"];
"torch._functorch.vmap" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._functorch.vmap" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch._functorch.vmap" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._guards" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._guards" -> "torch.__future__" [arrowhead="open", arrowtail="none"];
"torch._guards" -> "torch._dynamo.guards" [arrowhead="open", arrowtail="none"];
"torch._guards" -> "torch._higher_order_ops.invoke_subgraph" [arrowhead="open", arrowtail="none"];
"torch._guards" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._guards" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._guards" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._guards" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._guards" -> "torch.utils._traceback" [arrowhead="open", arrowtail="none"];
"torch._guards" -> "torch.utils.weak" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops" -> "torch._higher_order_ops.cond" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops" -> "torch._higher_order_ops.flex_attention" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops" -> "torch._higher_order_ops.foreach_map" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops" -> "torch._higher_order_ops.hints_wrap" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops" -> "torch._higher_order_ops.invoke_subgraph" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops" -> "torch._higher_order_ops.prim_hop_base" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops" -> "torch._higher_order_ops.scan" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops" -> "torch._higher_order_ops.while_loop" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.associative_scan" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.associative_scan" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.associative_scan" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.associative_scan" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.associative_scan" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.associative_scan" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.associative_scan" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.associative_scan" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.auto_functionalize" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.auto_functionalize" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.auto_functionalize" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.auto_functionalize" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.auto_functionalize" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.auto_functionalize" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.auto_functionalize" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.auto_functionalize" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.cond" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.cond" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.cond" -> "torch._dynamo.backends.debugging" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.cond" -> "torch._functorch.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.cond" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.cond" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.cond" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.cond" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.cond" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.cond" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.cond" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.cond" -> "torch.fx.passes.shape_prop" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.cond" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.cond" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.effects" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.effects" -> "torch._higher_order_ops.torchbind" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.effects" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.effects" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.effects" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.effects" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.effects" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.effects" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.executorch_call_delegate" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.executorch_call_delegate" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.executorch_call_delegate" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.executorch_call_delegate" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.executorch_call_delegate" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.flex_attention" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.flex_attention" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.flex_attention" -> "torch._dynamo._trace_wrapped_higher_order_op" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.flex_attention" -> "torch._functorch.aot_autograd" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.flex_attention" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.flex_attention" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.flex_attention" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.flex_attention" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.flex_attention" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.flex_attention" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.flex_attention" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.flex_attention" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.flex_attention" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.flex_attention" -> "torch.nn.attention.flex_attention" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.flex_attention" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.foreach_map" -> "torch._dynamo.polyfills" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.foreach_map" -> "torch._higher_order_ops.prim_hop_base" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.hints_wrap" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.hints_wrap" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.hints_wrap" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.hints_wrap" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.hints_wrap" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.hints_wrap" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.invoke_subgraph" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.invoke_subgraph" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.invoke_subgraph" -> "torch._functorch.aot_autograd" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.invoke_subgraph" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.invoke_subgraph" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.invoke_subgraph" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.invoke_subgraph" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.invoke_subgraph" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.invoke_subgraph" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.invoke_subgraph" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.invoke_subgraph" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.map" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.map" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.map" -> "torch._functorch.aot_autograd" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.map" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.map" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.map" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.map" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.map" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.map" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.map" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.out_dtype" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.out_dtype" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.out_dtype" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.out_dtype" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.out_dtype" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.out_dtype" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.out_dtype" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.prim_hop_base" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.prim_hop_base" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.prim_hop_base" -> "torch._higher_order_ops.invoke_subgraph" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.prim_hop_base" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.prim_hop_base" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.prim_hop_base" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.prim_hop_base" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.prim_hop_base" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.prim_hop_base" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.prim_hop_base" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.prim_hop_base" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.run_const_graph" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.run_const_graph" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.run_const_graph" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.run_const_graph" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.run_const_graph" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.run_const_graph" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.run_const_graph" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.scan" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.scan" -> "torch._dynamo.backends.debugging" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.scan" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.scan" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.scan" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.scan" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.scan" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.scan" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.scan" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.scan" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.strict_mode" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.strict_mode" -> "torch._dynamo.backends.debugging" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.strict_mode" -> "torch._functorch.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.strict_mode" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.strict_mode" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.strict_mode" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.strict_mode" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.strict_mode" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.strict_mode" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.torchbind" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.torchbind" -> "torch._functorch._aot_autograd.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.torchbind" -> "torch._higher_order_ops.effects" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.torchbind" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.torchbind" -> "torch._library.fake_class_registry" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.torchbind" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.torchbind" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.torchbind" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.torchbind" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.torchbind" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.torchbind" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.triton_kernel_wrap" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.triton_kernel_wrap" -> "torch._inductor.codegen.wrapper" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.triton_kernel_wrap" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.triton_kernel_wrap" -> "torch._library.triton" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.triton_kernel_wrap" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.triton_kernel_wrap" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.triton_kernel_wrap" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.triton_kernel_wrap" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.triton_kernel_wrap" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.triton_kernel_wrap" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.triton_kernel_wrap" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.utils" -> "torch._functorch.aot_autograd" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.utils" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.utils" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.utils" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.utils" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.utils" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.utils" -> "torch.fx.passes.shape_prop" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.utils" -> "torch.fx.traceback" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.utils" -> "torch.multiprocessing.reductions" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.while_loop" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.while_loop" -> "torch._dynamo.backends.debugging" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.while_loop" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.while_loop" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.while_loop" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.while_loop" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.while_loop" -> "torch.fx.passes.shape_prop" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.while_loop" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.wrap" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.wrap" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.wrap" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.wrap" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.wrap" -> "torch.fx.traceback" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.wrap" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch._higher_order_ops.wrap" -> "torch.utils.checkpoint" [arrowhead="open", arrowtail="none"];
"torch._inductor" -> "torch.__future__" [arrowhead="open", arrowtail="none"];
"torch._inductor" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor" -> "torch._inductor.compile_fx" [arrowhead="open", arrowtail="none"];
"torch._inductor" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor" -> "torch._inductor.cudagraph_trees" [arrowhead="open", arrowtail="none"];
"torch._inductor" -> "torch._inductor.debug" [arrowhead="open", arrowtail="none"];
"torch._inductor" -> "torch._inductor.package" [arrowhead="open", arrowtail="none"];
"torch._inductor" -> "torch.export" [arrowhead="open", arrowtail="none"];
"torch._inductor" -> "torch.package" [arrowhead="open", arrowtail="none"];
"torch._inductor.aoti_eager" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.aoti_eager" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.aoti_eager" -> "torch._inductor.runtime.runtime_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.aoti_eager" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.aoti_eager" -> "torch.utils._filelock" [arrowhead="open", arrowtail="none"];
"torch._inductor.async_compile" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.async_compile" -> "torch._dynamo.device_interface" [arrowhead="open", arrowtail="none"];
"torch._inductor.async_compile" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.async_compile" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.async_compile" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.async_compile" -> "torch._inductor.codegen.multi_kernel" [arrowhead="open", arrowtail="none"];
"torch._inductor.async_compile" -> "torch._inductor.compile_worker.subproc_pool" [arrowhead="open", arrowtail="none"];
"torch._inductor.async_compile" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.async_compile" -> "torch._inductor.runtime.compile_tasks" [arrowhead="open", arrowtail="none"];
"torch._inductor.async_compile" -> "torch.hub" [arrowhead="open", arrowtail="none"];
"torch._inductor.async_compile" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.async_compile" -> "torch.utils._triton" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.artifacts._MMRankingA100" -> "torch._inductor.autoheuristic.autoheuristic_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.artifacts._MMRankingA100" -> "torch._inductor.autoheuristic.learnedheuristic_interface" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.artifacts._MMRankingH100" -> "torch._inductor.autoheuristic.autoheuristic_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.artifacts._MMRankingH100" -> "torch._inductor.autoheuristic.learnedheuristic_interface" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.artifacts._MixedMMA100" -> "torch._inductor.autoheuristic.autoheuristic_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.artifacts._MixedMMA100" -> "torch._inductor.autoheuristic.learnedheuristic_interface" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.artifacts._MixedMMH100" -> "torch._inductor.autoheuristic.autoheuristic_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.artifacts._MixedMMH100" -> "torch._inductor.autoheuristic.learnedheuristic_interface" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.artifacts._PadMMA100" -> "torch._inductor.autoheuristic.autoheuristic_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.artifacts._PadMMA100" -> "torch._inductor.autoheuristic.learnedheuristic_interface" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.autoheuristic" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.autoheuristic" -> "torch._inductor.autoheuristic.autoheuristic_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.autoheuristic" -> "torch._inductor.autoheuristic.learned_heuristic_controller" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.autoheuristic" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.autoheuristic" -> "torch._inductor.runtime.runtime_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.autoheuristic" -> "torch._inductor.select_algorithm" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.autoheuristic" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.autoheuristic_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.learned_heuristic_controller" -> "torch._inductor.autoheuristic.autoheuristic_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.learned_heuristic_controller" -> "torch._inductor.autoheuristic.learnedheuristic_interface" [arrowhead="open", arrowtail="none"];
"torch._inductor.autoheuristic.learnedheuristic_interface" -> "torch._inductor.autoheuristic.autoheuristic_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.autotune_process" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.autotune_process" -> "torch._dynamo.testing" [arrowhead="open", arrowtail="none"];
"torch._inductor.autotune_process" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.autotune_process" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.autotune_process" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.autotune_process" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.autotune_process" -> "torch._inductor.runtime.benchmarking" [arrowhead="open", arrowtail="none"];
"torch._inductor.autotune_process" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.autotune_process" -> "torch.multiprocessing" [arrowhead="open", arrowtail="none"];
"torch._inductor.autotune_process" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.bounds" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.bounds" -> "torch._inductor.loop_body" [arrowhead="open", arrowtail="none"];
"torch._inductor.bounds" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.bounds" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.bounds" -> "torch.utils._sympy.value_ranges" [arrowhead="open", arrowtail="none"];
"torch._inductor.choices" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.choices" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.choices" -> "torch._inductor.metrics" [arrowhead="open", arrowtail="none"];
"torch._inductor.choices" -> "torch._inductor.runtime.hints" [arrowhead="open", arrowtail="none"];
"torch._inductor.choices" -> "torch._inductor.scheduler" [arrowhead="open", arrowtail="none"];
"torch._inductor.choices" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._higher_order_ops.triton_kernel_wrap" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.codegen.cuda" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.codegen.cuda.cuda_env" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.codegen.rocm.compile_command" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.codegen.wrapper" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.compile_fx" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.compiler_bisector" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.cpp_builder" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.cpu_vec_isa" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.custom_graph_pass" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.exc" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.graph" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.metrics" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.output_code" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.remote_cache" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.runtime" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.runtime.autotune_cache" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.runtime.autotune_cache" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.runtime.compile_tasks" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.runtime.runtime_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.triton_bundler" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch.compiler" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch.compiler.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch.utils._filelock" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.codecache" -> "torch.utils.cpp_extension" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.aoti_hipify_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.aoti_hipify_utils" -> "torch.utils.hipify.hipify_python" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.block_analysis" -> "torch.utils._sympy.functions" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch._inductor.codegen.cpp" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch._inductor.codegen.cpp_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch._inductor.codegen.cpp_wrapper_cpu" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch._inductor.codegen.cpp_wrapper_cpu_array_ref" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch._inductor.codegen.cpp_wrapper_gpu" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch._inductor.codegen.cuda" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch._inductor.codegen.cuda.device_op_overrides" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch._inductor.codegen.cuda_combined_scheduling" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch._inductor.codegen.halide" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch._inductor.codegen.triton" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch._inductor.codegen.triton" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch._inductor.codegen.wrapper" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch._inductor.codegen.xpu" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch._inductor.codegen.xpu.device_op_overrides" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch._inductor.dtype_propagation" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch.utils._sympy.numbers" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch.utils._sympy.printers" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch.utils._sympy.symbol" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch.utils._sympy.value_ranges" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.common" -> "torch.utils.backend_registration" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp" -> "torch._inductor.codegen.cpp_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp" -> "torch._inductor.codegen.cpp_wrapper_cpu" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp" -> "torch._inductor.dependencies" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp" -> "torch.utils._sympy.functions" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp" -> "torch.utils._sympy.symbol" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_bmm_template" -> "torch._inductor.codegen.cpp_gemm_template" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_bmm_template" -> "torch._inductor.codegen.cpp_micro_gemm" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_bmm_template" -> "torch._inductor.codegen.cpp_template_kernel" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_bmm_template" -> "torch._inductor.codegen.cpp_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_flex_attention_template" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_flex_attention_template" -> "torch._inductor.codegen.cpp" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_flex_attention_template" -> "torch._inductor.codegen.cpp_template" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_gemm_template" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_gemm_template" -> "torch._inductor.codegen.cpp" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_gemm_template" -> "torch._inductor.codegen.cpp_micro_gemm" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_gemm_template" -> "torch._inductor.codegen.cpp_template" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_gemm_template" -> "torch._inductor.codegen.cpp_template_kernel" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_gemm_template" -> "torch._inductor.codegen.cpp_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_gemm_template" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_micro_gemm" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_micro_gemm" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_micro_gemm" -> "torch._inductor.codegen.cpp_template_kernel" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_micro_gemm" -> "torch._inductor.codegen.cpp_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_template" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_template" -> "torch._inductor.codegen.cpp_template_kernel" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_template_kernel" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_template_kernel" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_template_kernel" -> "torch._inductor.codegen.cpp" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_template_kernel" -> "torch._inductor.codegen.cpp_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_template_kernel" -> "torch._inductor.codegen.cpp_wrapper_cpu" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_template_kernel" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_template_kernel" -> "torch.utils._sympy.symbol" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_utils" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_utils" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_utils" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_utils" -> "torch.utils._sympy.printers" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_utils" -> "torch.utils._sympy.symbol" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_utils" -> "torch.utils._sympy.value_ranges" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_cpu" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_cpu" -> "torch._inductor.codegen.aoti_hipify_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_cpu" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_cpu" -> "torch._inductor.codegen.cpp_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_cpu" -> "torch._inductor.codegen.triton_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_cpu" -> "torch._inductor.codegen.wrapper" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_cpu" -> "torch._inductor.runtime.runtime_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_cpu" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_cpu" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_cpu" -> "torch.utils._sympy.symbol" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_cpu" -> "torch.utils._sympy.value_ranges" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_cpu_array_ref" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_cpu_array_ref" -> "torch._inductor.codegen.cpp_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_cpu_array_ref" -> "torch._inductor.codegen.cpp_wrapper_cpu" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_cpu_array_ref" -> "torch._inductor.codegen.memory_planning" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_cpu_array_ref" -> "torch._inductor.codegen.wrapper" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_gpu" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_gpu" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_gpu" -> "torch._inductor.codegen.aoti_hipify_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_gpu" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_gpu" -> "torch._inductor.codegen.cpp_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_gpu" -> "torch._inductor.codegen.cpp_wrapper_cpu" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_gpu" -> "torch._inductor.codegen.multi_kernel" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_gpu" -> "torch._inductor.codegen.wrapper" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_gpu" -> "torch._inductor.runtime.runtime_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpp_wrapper_gpu" -> "torch._inductor.runtime.triton_heuristics" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cpu_device_op_overrides" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cuda.cuda_env" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cuda.cuda_kernel" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cuda.cuda_kernel" -> "torch._inductor.codegen.cpp_wrapper_cpu" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cuda.cuda_kernel" -> "torch._inductor.codegen.cuda.cuda_template" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cuda.cuda_template" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cuda.cuda_template" -> "torch._inductor.codegen.cuda.cuda_kernel" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cuda.cutlass_epilogue_gen" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cuda.cutlass_epilogue_gen" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cuda.cutlass_epilogue_gen" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cuda.cutlass_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cuda.cutlass_utils" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cuda.cutlass_utils" -> "torch._inductor.codegen.cuda.cuda_env" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cuda.device_op_overrides" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cuda.gemm_template" -> "torch._inductor.codegen.cuda.cuda_kernel" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cuda.gemm_template" -> "torch._inductor.codegen.cuda.cuda_template" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cuda_combined_scheduling" -> "torch._inductor.codegen.cuda.cuda_cpp_scheduling" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cuda_combined_scheduling" -> "torch._inductor.codegen.rocm.rocm_cpp_scheduling" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.cuda_combined_scheduling" -> "torch._inductor.codegen.triton" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.debug_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.debug_utils" -> "torch._inductor.codegen.multi_kernel" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.halide" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.halide" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.halide" -> "torch._inductor.codegen.cpp" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.halide" -> "torch._inductor.codegen.cpp_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.halide" -> "torch._inductor.codegen.simd" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.memory_planning" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.memory_planning" -> "torch._inductor.codegen.wrapper" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.memory_planning" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.multi_kernel" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.multi_kernel" -> "torch._inductor.graph" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.multi_kernel" -> "torch._inductor.metrics" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.multi_kernel" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.ck_conv_template" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.ck_conv_template" -> "torch._inductor.codegen.rocm.ck_template" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.ck_conv_template" -> "torch._inductor.codegen.rocm.rocm_kernel" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.ck_conv_template" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.ck_conv_template" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.ck_conv_template" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.ck_template" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.ck_template" -> "torch._inductor.codegen.rocm.rocm_template" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.ck_template" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.ck_template" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.ck_universal_gemm_template" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.ck_universal_gemm_template" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.ck_universal_gemm_template" -> "torch._inductor.codegen.cpp_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.ck_universal_gemm_template" -> "torch._inductor.codegen.rocm.ck_template" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.ck_universal_gemm_template" -> "torch._inductor.codegen.rocm.compile_command" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.ck_universal_gemm_template" -> "torch._inductor.codegen.rocm.rocm_kernel" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.ck_universal_gemm_template" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.ck_universal_gemm_template" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.compile_command" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.compile_command" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.compile_command" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.compile_command" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.compile_command" -> "torch.utils.cpp_extension" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.rocm_benchmark_request" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.rocm_benchmark_request" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.rocm_benchmark_request" -> "torch._inductor.autotune_process" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.rocm_benchmark_request" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.rocm_benchmark_request" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.rocm_cpp_scheduling" -> "torch._inductor.codegen.rocm.rocm_template_buffer" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.rocm_kernel" -> "torch._inductor.codegen.cpp_wrapper_cpu" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.rocm_kernel" -> "torch._inductor.codegen.rocm.rocm_benchmark_request" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.rocm_kernel" -> "torch._inductor.codegen.rocm.rocm_template_buffer" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.rocm_template" -> "torch._inductor.codegen.rocm.rocm_benchmark_request" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.rocm_template" -> "torch._inductor.codegen.rocm.rocm_kernel" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.rocm.rocm_template" -> "torch._inductor.codegen.rocm.rocm_template_buffer" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.simd" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.simd" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.simd" -> "torch._inductor.codegen.multi_kernel" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.simd" -> "torch._inductor.codegen.simd_kernel_features" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.simd" -> "torch._inductor.codegen.triton_combo_kernel" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.simd" -> "torch.fx.immutable_collections" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.simd" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.simd" -> "torch.utils._sympy.functions" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.simd" -> "torch.utils._sympy.symbol" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.simd_kernel_features" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.simd_kernel_features" -> "torch._inductor.codegen.simd" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton" -> "torch._inductor.codegen.block_analysis" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton" -> "torch._inductor.codegen.cuda_combined_scheduling" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton" -> "torch._inductor.codegen.simd" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton" -> "torch._inductor.codegen.triton_split_scan" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton" -> "torch._inductor.codegen.triton_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton" -> "torch._inductor.dtype_propagation" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton" -> "torch._inductor.scheduler" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton" -> "torch.utils._sympy.functions" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton" -> "torch.utils._triton" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton_combo_kernel" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton_combo_kernel" -> "torch._inductor.codegen.simd" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton_combo_kernel" -> "torch._inductor.codegen.simd_kernel_features" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton_combo_kernel" -> "torch._inductor.codegen.triton" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton_combo_kernel" -> "torch._inductor.codegen.triton_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton_combo_kernel" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton_split_scan" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton_split_scan" -> "torch._inductor.codegen.simd" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton_split_scan" -> "torch._inductor.codegen.triton" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton_split_scan" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton_split_scan" -> "torch._inductor.runtime.triton_heuristics" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton_split_scan" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton_split_scan" -> "torch.utils._sympy.functions" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.triton_utils" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.wrapper" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.wrapper" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.wrapper" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.wrapper" -> "torch._inductor.codegen.cpp" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.wrapper" -> "torch._inductor.codegen.debug_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.wrapper" -> "torch._inductor.codegen.memory_planning" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.wrapper" -> "torch._inductor.codegen.multi_kernel" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.wrapper" -> "torch._inductor.codegen.triton" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.wrapper" -> "torch._inductor.codegen.triton" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.wrapper" -> "torch._inductor.codegen.triton_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.wrapper" -> "torch._inductor.runtime.runtime_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.wrapper" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.wrapper" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.wrapper" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.wrapper" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.wrapper" -> "torch.utils._sympy.singleton_int" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.wrapper" -> "torch.utils._sympy.symbol" [arrowhead="open", arrowtail="none"];
"torch._inductor.codegen.wrapper" -> "torch.utils._triton" [arrowhead="open", arrowtail="none"];
"torch._inductor.comm_analysis" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.comm_analysis" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.comm_analysis" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.comm_analysis" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch._inductor.comm_lowering" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.comm_lowering" -> "torch._inductor.lowering" [arrowhead="open", arrowtail="none"];
"torch._inductor.comm_lowering" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.comm_lowering" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.comm_lowering" -> "torch.distributed._symmetric_memory" [arrowhead="open", arrowtail="none"];
"torch._inductor.comm_lowering" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.comm_lowering" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.comms" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.comms" -> "torch._inductor.dependencies" [arrowhead="open", arrowtail="none"];
"torch._inductor.comms" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.comms" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.comms" -> "torch.distributed.fsdp._fully_shard._fsdp_collectives" [arrowhead="open", arrowtail="none"];
"torch._inductor.comms" -> "torch.multiprocessing.reductions" [arrowhead="open", arrowtail="none"];
"torch._inductor.comms" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._dynamo.compiled_autograd" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._dynamo.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._dynamo.convert_frame" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._dynamo.device_interface" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._dynamo.logging" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._dynamo.repro.after_aot" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._functorch" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._functorch.aot_autograd" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._functorch.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.async_compile" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.compile_fx" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.constant_folding" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.cudagraph_trees" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.cudagraph_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.debug" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.debug" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.decomposition" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.freezing" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.fx_passes.joint_graph" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.fx_passes.post_grad" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.fx_passes.pre_grad" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.graph" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.output_code" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.output_code" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.runtime.runtime_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.triton_bundler" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch.export._unlift" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch.export.unflatten" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch.fx._lazy_graph_module" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch.fx.passes.fake_tensor_prop" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch.monitor" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_fx" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_worker.__main__" -> "torch._inductor.async_compile" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_worker.__main__" -> "torch._inductor.compile_worker.subproc_pool" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_worker.__main__" -> "torch._inductor.compile_worker.watchdog" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_worker.__main__" -> "torch._inductor.runtime.compile_tasks" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_worker.subproc_pool" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_worker.subproc_pool" -> "torch._inductor.compile_worker.watchdog" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_worker.subproc_pool" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.compile_worker.subproc_pool" -> "torch._thread_safe_fork" [arrowhead="open", arrowtail="none"];
"torch._inductor.compiler_bisector" -> "torch._inductor.runtime.cache_dir_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.config" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.config" -> "torch._environment" [arrowhead="open", arrowtail="none"];
"torch._inductor.config" -> "torch.utils._config_module" [arrowhead="open", arrowtail="none"];
"torch._inductor.constant_folding" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.constant_folding" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.constant_folding" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.cpp_builder" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.cpp_builder" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.cpp_builder" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.cpp_builder" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.cpp_builder" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.cpp_builder" -> "torch._inductor.cpu_vec_isa" [arrowhead="open", arrowtail="none"];
"torch._inductor.cpp_builder" -> "torch._inductor.exc" [arrowhead="open", arrowtail="none"];
"torch._inductor.cpp_builder" -> "torch._inductor.runtime.runtime_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.cpp_builder" -> "torch.torch_version" [arrowhead="open", arrowtail="none"];
"torch._inductor.cpp_builder" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.cpp_builder" -> "torch.utils._filelock" [arrowhead="open", arrowtail="none"];
"torch._inductor.cpp_builder" -> "torch.utils.cpp_extension" [arrowhead="open", arrowtail="none"];
"torch._inductor.cpu_vec_isa" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.cpu_vec_isa" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.cpu_vec_isa" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.cpu_vec_isa" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.cpu_vec_isa" -> "torch._inductor.cpp_builder" [arrowhead="open", arrowtail="none"];
"torch._inductor.cpu_vec_isa" -> "torch.utils._filelock" [arrowhead="open", arrowtail="none"];
"torch._inductor.cudagraph_trees" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.cudagraph_trees" -> "torch._dynamo.mutation_guard" [arrowhead="open", arrowtail="none"];
"torch._inductor.cudagraph_trees" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.cudagraph_trees" -> "torch._inductor.compile_fx" [arrowhead="open", arrowtail="none"];
"torch._inductor.cudagraph_trees" -> "torch._inductor.cudagraph_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.cudagraph_trees" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._inductor.cudagraph_trees" -> "torch.multiprocessing.reductions" [arrowhead="open", arrowtail="none"];
"torch._inductor.cudagraph_trees" -> "torch.storage" [arrowhead="open", arrowtail="none"];
"torch._inductor.cudagraph_trees" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.cudagraph_trees" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.cudagraph_trees" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.cudagraph_trees" -> "torch.utils.weak" [arrowhead="open", arrowtail="none"];
"torch._inductor.cudagraph_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.cudagraph_utils" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.cudagraph_utils" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.cudagraph_utils" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.custom_graph_pass" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch._inductor.debug" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.debug" -> "torch._dynamo.repro.after_aot" [arrowhead="open", arrowtail="none"];
"torch._inductor.debug" -> "torch._dynamo.repro.aoti" [arrowhead="open", arrowtail="none"];
"torch._inductor.debug" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.debug" -> "torch._functorch.aot_autograd" [arrowhead="open", arrowtail="none"];
"torch._inductor.debug" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.debug" -> "torch._inductor.compile_fx" [arrowhead="open", arrowtail="none"];
"torch._inductor.debug" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.debug" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.debug" -> "torch._inductor.scheduler" [arrowhead="open", arrowtail="none"];
"torch._inductor.debug" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.debug" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._inductor.debug" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch._inductor.debug" -> "torch.fx.passes.shape_prop" [arrowhead="open", arrowtail="none"];
"torch._inductor.debug" -> "torch.fx.passes.tools_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.debug" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.debug" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.decomposition" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.decomposition" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch._inductor.decomposition" -> "torch._decomp.decompositions" [arrowhead="open", arrowtail="none"];
"torch._inductor.decomposition" -> "torch._decomp.decompositions_for_rng" [arrowhead="open", arrowtail="none"];
"torch._inductor.decomposition" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.decomposition" -> "torch._environment" [arrowhead="open", arrowtail="none"];
"torch._inductor.decomposition" -> "torch._higher_order_ops.out_dtype" [arrowhead="open", arrowtail="none"];
"torch._inductor.decomposition" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.decomposition" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.decomposition" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.decomposition" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.decomposition" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._inductor.dependencies" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.dependencies" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.dependencies" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.dependencies" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.dependencies" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.dependencies" -> "torch._inductor.loop_body" [arrowhead="open", arrowtail="none"];
"torch._inductor.dependencies" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.dependencies" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.dependencies" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._inductor.dependencies" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.dtype_propagation" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.dtype_propagation" -> "torch._inductor.ops_handler" [arrowhead="open", arrowtail="none"];
"torch._inductor.dtype_propagation" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.dtype_propagation" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.dtype_propagation" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.dtype_propagation" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.dtype_propagation" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.extern_node_serializer" -> "torch._export.serde.aoti_schema" [arrowhead="open", arrowtail="none"];
"torch._inductor.extern_node_serializer" -> "torch._export.serde.serialize" [arrowhead="open", arrowtail="none"];
"torch._inductor.extern_node_serializer" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.freezing" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.freezing" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.freezing" -> "torch._functorch.aot_autograd" [arrowhead="open", arrowtail="none"];
"torch._inductor.freezing" -> "torch._functorch.compile_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.freezing" -> "torch._inductor.constant_folding" [arrowhead="open", arrowtail="none"];
"torch._inductor.freezing" -> "torch._inductor.fx_passes.freezing_patterns" [arrowhead="open", arrowtail="none"];
"torch._inductor.freezing" -> "torch._inductor.fx_passes.post_grad" [arrowhead="open", arrowtail="none"];
"torch._inductor.freezing" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.b2b_gemm" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.b2b_gemm" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.b2b_gemm" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.binary_folding" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.binary_folding" -> "torch._inductor.fx_passes.freezing_patterns" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.ddp_fusion" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.ddp_fusion" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.ddp_fusion" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.ddp_fusion" -> "torch.fx.passes.graph_transform_observer" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.ddp_fusion" -> "torch.fx.passes.shape_prop" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.ddp_fusion" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.ddp_fusion" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.decompose_mem_bound_mm" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.decompose_mem_bound_mm" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.decompose_mem_bound_mm" -> "torch._inductor.fx_passes.split_cat" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.dedupe_symint_uses" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.dedupe_symint_uses" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.dedupe_symint_uses" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.efficient_conv_bn_eval" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.efficient_conv_bn_eval" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.efficient_conv_bn_eval" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.efficient_conv_bn_eval" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.efficient_conv_bn_eval" -> "torch._inductor.fx_passes.pre_grad" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.efficient_conv_bn_eval" -> "torch.func" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.efficient_conv_bn_eval" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.freezing_patterns" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.freezing_patterns" -> "torch._inductor.compile_fx" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.freezing_patterns" -> "torch._inductor.fx_passes.binary_folding" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.freezing_patterns" -> "torch._inductor.fx_passes.mkldnn_fusion" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.freezing_patterns" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.fuse_attention" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.fuse_attention" -> "torch._inductor.fx_passes.joint_graph" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.fuse_attention" -> "torch.nn.attention" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.group_batch_fusion" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.group_batch_fusion" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.group_batch_fusion" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.group_batch_fusion" -> "torch.fx.passes.graph_transform_observer" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.group_batch_fusion" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.joint_graph" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.joint_graph" -> "torch._inductor.constant_folding" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.joint_graph" -> "torch._inductor.fx_passes.dedupe_symint_uses" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.joint_graph" -> "torch._inductor.fx_passes.fuse_attention" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.joint_graph" -> "torch._inductor.fx_passes.misc_patterns" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.joint_graph" -> "torch._inductor.fx_passes.pad_mm" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.joint_graph" -> "torch._inductor.fx_passes.post_grad" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.joint_graph" -> "torch._inductor.fx_passes.replace_random" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.joint_graph" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.joint_graph" -> "torch.multiprocessing.reductions" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.joint_graph" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.joint_graph" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.micro_pipeline_tp" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.micro_pipeline_tp" -> "torch.distributed._symmetric_memory" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.micro_pipeline_tp" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.misc_patterns" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.misc_patterns" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.misc_patterns" -> "torch._inductor.fx_passes.joint_graph" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.misc_patterns" -> "torch._inductor.fx_passes.post_grad" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.misc_patterns" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.misc_patterns" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.mkldnn_fusion" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.mkldnn_fusion" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.mkldnn_fusion" -> "torch._inductor.fx_passes.freezing_patterns" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.mkldnn_fusion" -> "torch._inductor.fx_passes.post_grad" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.mkldnn_fusion" -> "torch._inductor.fx_passes.quantization" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.mkldnn_fusion" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.mkldnn_fusion" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.numeric_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.numeric_utils" -> "torch.optim" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.numeric_utils" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pad_mm" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pad_mm" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pad_mm" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pad_mm" -> "torch._inductor.autoheuristic.autoheuristic" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pad_mm" -> "torch._inductor.autoheuristic.autoheuristic_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pad_mm" -> "torch._inductor.fx_passes.joint_graph" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pad_mm" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pad_mm" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pad_mm" -> "torch.utils._mode_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch._higher_order_ops.auto_functionalize" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch._higher_order_ops.triton_kernel_wrap" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch._inductor.comms" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch._inductor.fx_passes.b2b_gemm" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch._inductor.fx_passes.ddp_fusion" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch._inductor.fx_passes.group_batch_fusion" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch._inductor.fx_passes.micro_pipeline_tp" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch._inductor.fx_passes.mkldnn_fusion" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch._inductor.fx_passes.pre_grad" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch._inductor.fx_passes.reinplace" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch._inductor.fx_passes.split_cat" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch._inductor.metrics" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch.fx.operator_schemas" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.post_grad" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pre_grad" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pre_grad" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pre_grad" -> "torch._inductor.fx_passes.group_batch_fusion" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pre_grad" -> "torch._inductor.fx_passes.misc_patterns" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pre_grad" -> "torch._inductor.fx_passes.numeric_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pre_grad" -> "torch._inductor.fx_passes.quantization" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pre_grad" -> "torch._inductor.fx_passes.split_cat" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pre_grad" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pre_grad" -> "torch.fx.experimental.optimization" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pre_grad" -> "torch.fx.passes.graph_transform_observer" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pre_grad" -> "torch.fx.passes.shape_prop" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pre_grad" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pre_grad" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.pre_grad" -> "torch.nn.utils.fusion" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.quantization" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.quantization" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.quantization" -> "torch._inductor.fx_passes.freezing_patterns" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.quantization" -> "torch._inductor.fx_passes.mkldnn_fusion" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.quantization" -> "torch._inductor.fx_passes.post_grad" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.quantization" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.quantization" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.reinplace" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.reinplace" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.reinplace" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.reinplace" -> "torch._higher_order_ops.auto_functionalize" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.reinplace" -> "torch._higher_order_ops.triton_kernel_wrap" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.reinplace" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.reinplace" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.reinplace" -> "torch._inductor.fx_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.reinplace" -> "torch._inductor.inductor_prims" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.reinplace" -> "torch._inductor.lowering" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.reinplace" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.reinplace" -> "torch.fx.immutable_collections" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.reinplace" -> "torch.fx.passes.reinplace" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.reinplace" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.reinplace" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.reinplace" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.replace_random" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.replace_random" -> "torch.fx.passes.graph_transform_observer" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.replace_random" -> "torch.fx.passes.shape_prop" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_1" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_1" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_10" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_10" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_11" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_11" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_12" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_12" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_13" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_13" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_14" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_14" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_15" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_15" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_16" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_16" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_17" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_17" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_18" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_18" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_19" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_19" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_2" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_2" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_3" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_3" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_4" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_4" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_5" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_5" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_6" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_6" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_7" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_7" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_8" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_8" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_9" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns._sfdp_pattern_9" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns.addmm_pattern" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns.addmm_pattern" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns.bmm_pattern" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns.bmm_pattern" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns.mm_pattern" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.serialized_patterns.mm_pattern" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.split_cat" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.split_cat" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.split_cat" -> "torch._inductor.fx_passes.group_batch_fusion" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.split_cat" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_passes.split_cat" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_utils" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_utils" -> "torch._inductor.lowering" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_utils" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_utils" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_utils" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_utils" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.fx_utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._dynamo.source" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._inductor.codegen.wrapper" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._inductor.compile_fx" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._inductor.compiler_bisector" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._inductor.exc" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._inductor.extern_node_serializer" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._inductor.lowering" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._inductor.runtime" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._inductor.runtime.autotune_cache" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._inductor.runtime.autotune_cache" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._inductor.scheduler" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._inductor.sizevars" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch.fx.experimental._backward_state" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch.fx.experimental.sym_node" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch.utils._mode_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch.utils._sympy.numbers" [arrowhead="open", arrowtail="none"];
"torch._inductor.graph" -> "torch.utils.flop_counter" [arrowhead="open", arrowtail="none"];
"torch._inductor.hooks" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.index_propagation" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.index_propagation" -> "torch._inductor.sizevars" [arrowhead="open", arrowtail="none"];
"torch._inductor.index_propagation" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.index_propagation" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.index_propagation" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.index_propagation" -> "torch.utils._sympy.functions" [arrowhead="open", arrowtail="none"];
"torch._inductor.index_propagation" -> "torch.utils._sympy.value_ranges" [arrowhead="open", arrowtail="none"];
"torch._inductor.inductor_prims" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.inductor_prims" -> "torch._prims" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._export.serde.schema" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._export.serde.serialize" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._higher_order_ops.auto_functionalize" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._higher_order_ops.effects" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._higher_order_ops.triton_kernel_wrap" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._inductor.dependencies" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._inductor.loop_body" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._inductor.metrics" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._inductor.ops_handler" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._inductor.runtime.benchmarking" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._inductor.runtime.hints" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._inductor.scheduler" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch.utils._sympy.functions" [arrowhead="open", arrowtail="none"];
"torch._inductor.ir" -> "torch.utils._sympy.symbol" [arrowhead="open", arrowtail="none"];
"torch._inductor.jagged_lowerings" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.jagged_lowerings" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.jagged_lowerings" -> "torch._inductor.lowering" [arrowhead="open", arrowtail="none"];
"torch._inductor.jagged_lowerings" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.bmm" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.bmm" -> "torch._inductor.codegen.rocm.ck_universal_gemm_template" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.bmm" -> "torch._inductor.kernel.mm_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.conv" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.conv" -> "torch._inductor.codegen.rocm.ck_conv_template" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.conv" -> "torch._inductor.kernel.mm_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.flex_attention" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.flex_attention" -> "torch._inductor.kernel.flex_decoding" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.flex_attention" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.flex_attention" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.flex_attention" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.flex_decoding" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.flex_decoding" -> "torch._inductor.kernel.flex_attention" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.flex_decoding" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm" -> "torch._inductor.autoheuristic.autoheuristic" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm" -> "torch._inductor.autoheuristic.autoheuristic_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm" -> "torch._inductor.codegen.cpp_gemm_template" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm" -> "torch._inductor.kernel.mm_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm" -> "torch._inductor.select_algorithm" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm_common" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm_common" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm_common" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm_common" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm_common" -> "torch._inductor.select_algorithm" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm_common" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm_common" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm_plus_mm" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm_plus_mm" -> "torch._inductor.kernel.mm_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm_scaled" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm_scaled" -> "torch._inductor.codegen.rocm.ck_universal_gemm_template" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm_scaled" -> "torch._inductor.kernel.mm_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.mm_scaled" -> "torch.utils._triton" [arrowhead="open", arrowtail="none"];
"torch._inductor.kernel.unpack_mixed_mm" -> "torch._inductor.kernel.mm_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.loop_body" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.loop_body" -> "torch._inductor.bounds" [arrowhead="open", arrowtail="none"];
"torch._inductor.loop_body" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.loop_body" -> "torch._inductor.index_propagation" [arrowhead="open", arrowtail="none"];
"torch._inductor.loop_body" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.loop_body" -> "torch._inductor.sizevars" [arrowhead="open", arrowtail="none"];
"torch._inductor.loop_body" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.loop_body" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.loop_body" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._inductor.loop_body" -> "torch.fx.proxy" [arrowhead="open", arrowtail="none"];
"torch._inductor.loop_body" -> "torch.utils._sympy.symbol" [arrowhead="open", arrowtail="none"];
"torch._inductor.lowering" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.lowering" -> "torch._higher_order_ops.associative_scan" [arrowhead="open", arrowtail="none"];
"torch._inductor.lowering" -> "torch._higher_order_ops.auto_functionalize" [arrowhead="open", arrowtail="none"];
"torch._inductor.lowering" -> "torch._higher_order_ops.effects" [arrowhead="open", arrowtail="none"];
"torch._inductor.lowering" -> "torch._higher_order_ops.triton_kernel_wrap" [arrowhead="open", arrowtail="none"];
"torch._inductor.lowering" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.lowering" -> "torch._inductor.comm_lowering" [arrowhead="open", arrowtail="none"];
"torch._inductor.lowering" -> "torch._inductor.decomposition" [arrowhead="open", arrowtail="none"];
"torch._inductor.lowering" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.lowering" -> "torch._inductor.subgraph_lowering" [arrowhead="open", arrowtail="none"];
"torch._inductor.lowering" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.lowering" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.lowering" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.lowering" -> "torch.fx.experimental.sym_node" [arrowhead="open", arrowtail="none"];
"torch._inductor.lowering" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._inductor.lowering" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.lowering" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.lowering" -> "torch.utils._sympy.functions" [arrowhead="open", arrowtail="none"];
"torch._inductor.memory" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.memory" -> "torch._inductor.scheduler" [arrowhead="open", arrowtail="none"];
"torch._inductor.memory" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.memory" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.memory" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._inductor.memory" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.metrics" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.metrics" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.metrics" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.metrics" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.metrics" -> "torch._inductor.wrapper_benchmark" [arrowhead="open", arrowtail="none"];
"torch._inductor.metrics" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.mkldnn_ir" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.mkldnn_ir" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.mkldnn_ir" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.mkldnn_ir" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.mkldnn_ir" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.mkldnn_ir" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.mkldnn_lowerings" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.mkldnn_lowerings" -> "torch._inductor.codegen.cpp_gemm_template" [arrowhead="open", arrowtail="none"];
"torch._inductor.mkldnn_lowerings" -> "torch._inductor.codegen.cpp_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.mkldnn_lowerings" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.mkldnn_lowerings" -> "torch._inductor.kernel.mm_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.mkldnn_lowerings" -> "torch._inductor.lowering" [arrowhead="open", arrowtail="none"];
"torch._inductor.mkldnn_lowerings" -> "torch._inductor.select_algorithm" [arrowhead="open", arrowtail="none"];
"torch._inductor.mkldnn_lowerings" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.mkldnn_lowerings" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.mkldnn_lowerings" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.mock_cache" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.mock_cache" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.mock_cache" -> "torch._inductor.remote_cache" [arrowhead="open", arrowtail="none"];
"torch._inductor.ops_handler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.ops_handler" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.ops_handler" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.ops_handler" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.ops_handler" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.ops_handler" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.ops_handler" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.ops_handler" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.optimize_indexing" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.optimize_indexing" -> "torch._inductor.loop_body" [arrowhead="open", arrowtail="none"];
"torch._inductor.optimize_indexing" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.optimize_indexing" -> "torch.utils._sympy.value_ranges" [arrowhead="open", arrowtail="none"];
"torch._inductor.output_code" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.output_code" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.output_code" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.output_code" -> "torch._inductor.compile_fx" [arrowhead="open", arrowtail="none"];
"torch._inductor.output_code" -> "torch._inductor.cudagraph_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.output_code" -> "torch._inductor.graph" [arrowhead="open", arrowtail="none"];
"torch._inductor.output_code" -> "torch._inductor.metrics" [arrowhead="open", arrowtail="none"];
"torch._inductor.output_code" -> "torch._inductor.runtime.autotune_cache" [arrowhead="open", arrowtail="none"];
"torch._inductor.output_code" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.output_code" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.package" -> "torch._inductor.package.package" [arrowhead="open", arrowtail="none"];
"torch._inductor.package.package" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.package.package" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.package.package" -> "torch._inductor.cpp_builder" [arrowhead="open", arrowtail="none"];
"torch._inductor.package.package" -> "torch._inductor.exc" [arrowhead="open", arrowtail="none"];
"torch._inductor.package.package" -> "torch._inductor.package.pt2_archive_constants" [arrowhead="open", arrowtail="none"];
"torch._inductor.package.package" -> "torch.export._tree_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.package.package" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.pattern_matcher" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.pattern_matcher" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch._inductor.pattern_matcher" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.pattern_matcher" -> "torch._functorch" [arrowhead="open", arrowtail="none"];
"torch._inductor.pattern_matcher" -> "torch._functorch.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.pattern_matcher" -> "torch._inductor.decomposition" [arrowhead="open", arrowtail="none"];
"torch._inductor.pattern_matcher" -> "torch._inductor.fx_passes.joint_graph" [arrowhead="open", arrowtail="none"];
"torch._inductor.pattern_matcher" -> "torch._inductor.fx_passes.post_grad" [arrowhead="open", arrowtail="none"];
"torch._inductor.pattern_matcher" -> "torch._inductor.lowering" [arrowhead="open", arrowtail="none"];
"torch._inductor.pattern_matcher" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.pattern_matcher" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.pattern_matcher" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._inductor.pattern_matcher" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._inductor.pattern_matcher" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._inductor.pattern_matcher" -> "torch.fx.immutable_collections" [arrowhead="open", arrowtail="none"];
"torch._inductor.pattern_matcher" -> "torch.fx.operator_schemas" [arrowhead="open", arrowtail="none"];
"torch._inductor.pattern_matcher" -> "torch.fx.passes.graph_transform_observer" [arrowhead="open", arrowtail="none"];
"torch._inductor.pattern_matcher" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.pattern_matcher" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.quantized_lowerings" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.quantized_lowerings" -> "torch._inductor.codegen.cpp_gemm_template" [arrowhead="open", arrowtail="none"];
"torch._inductor.quantized_lowerings" -> "torch._inductor.codegen.cpp_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.quantized_lowerings" -> "torch._inductor.kernel.mm_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.quantized_lowerings" -> "torch._inductor.lowering" [arrowhead="open", arrowtail="none"];
"torch._inductor.quantized_lowerings" -> "torch._inductor.select_algorithm" [arrowhead="open", arrowtail="none"];
"torch._inductor.quantized_lowerings" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.remote_cache" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.remote_cache" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.remote_cache" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.remote_cache" -> "torch.monitor" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.autotune_cache" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.autotune_cache" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.autotune_cache" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.autotune_cache" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.autotune_cache" -> "torch.compiler" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.autotune_cache" -> "torch.compiler.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.autotune_cache" -> "torch.utils._triton" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.benchmarking" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.benchmarking" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.coordinate_descent_tuner" -> "torch._inductor.runtime.hints" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.coordinate_descent_tuner" -> "torch._inductor.runtime.runtime_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.hints" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.hints" -> "torch._dynamo.device_interface" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.runtime_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.runtime_utils" -> "torch._inductor.runtime.cache_dir_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.triton_heuristics" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.triton_heuristics" -> "torch._dynamo.device_interface" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.triton_heuristics" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.triton_heuristics" -> "torch._inductor.runtime.autotune_cache" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.triton_heuristics" -> "torch._inductor.runtime.benchmarking" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.triton_heuristics" -> "torch._inductor.runtime.coordinate_descent_tuner" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.triton_heuristics" -> "torch._inductor.runtime.hints" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.triton_heuristics" -> "torch._inductor.runtime.runtime_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.triton_heuristics" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.runtime.triton_heuristics" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch._dynamo.convert_frame" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch._inductor.codegen.cuda_combined_scheduling" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch._inductor.codegen.simd" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch._inductor.codegen.wrapper" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch._inductor.comm_analysis" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch._inductor.debug" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch._inductor.dependencies" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch._inductor.loop_body" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch._inductor.memory" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch._inductor.metrics" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch._inductor.runtime.runtime_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch._inductor.sizevars" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch.utils._sympy.symbol" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch.utils._triton" [arrowhead="open", arrowtail="none"];
"torch._inductor.scheduler" -> "torch.utils.flop_counter" [arrowhead="open", arrowtail="none"];
"torch._inductor.select_algorithm" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.select_algorithm" -> "torch._dynamo.testing" [arrowhead="open", arrowtail="none"];
"torch._inductor.select_algorithm" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.select_algorithm" -> "torch._inductor.autotune_process" [arrowhead="open", arrowtail="none"];
"torch._inductor.select_algorithm" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.select_algorithm" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.select_algorithm" -> "torch._inductor.codegen.cuda.cuda_kernel" [arrowhead="open", arrowtail="none"];
"torch._inductor.select_algorithm" -> "torch._inductor.codegen.simd_kernel_features" [arrowhead="open", arrowtail="none"];
"torch._inductor.select_algorithm" -> "torch._inductor.codegen.triton" [arrowhead="open", arrowtail="none"];
"torch._inductor.select_algorithm" -> "torch._inductor.codegen.triton_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.select_algorithm" -> "torch._inductor.exc" [arrowhead="open", arrowtail="none"];
"torch._inductor.select_algorithm" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none"];
"torch._inductor.select_algorithm" -> "torch._inductor.ops_handler" [arrowhead="open", arrowtail="none"];
"torch._inductor.select_algorithm" -> "torch._inductor.runtime.benchmarking" [arrowhead="open", arrowtail="none"];
"torch._inductor.select_algorithm" -> "torch._inductor.runtime.hints" [arrowhead="open", arrowtail="none"];
"torch._inductor.select_algorithm" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.select_algorithm" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.select_algorithm" -> "torch.utils._filelock" [arrowhead="open", arrowtail="none"];
"torch._inductor.select_algorithm" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.sizevars" -> "torch._inductor.runtime.runtime_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.sizevars" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.sizevars" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.sizevars" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._inductor.sizevars" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.sizevars" -> "torch.utils._sympy.functions" [arrowhead="open", arrowtail="none"];
"torch._inductor.sizevars" -> "torch.utils._sympy.symbol" [arrowhead="open", arrowtail="none"];
"torch._inductor.sizevars" -> "torch.utils._sympy.value_ranges" [arrowhead="open", arrowtail="none"];
"torch._inductor.subgraph_lowering" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.subgraph_lowering" -> "torch._inductor.exc" [arrowhead="open", arrowtail="none"];
"torch._inductor.subgraph_lowering" -> "torch._inductor.lowering" [arrowhead="open", arrowtail="none"];
"torch._inductor.subgraph_lowering" -> "torch._inductor.ops_handler" [arrowhead="open", arrowtail="none"];
"torch._inductor.subgraph_lowering" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.subgraph_lowering" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.test_case" -> "torch._dynamo.test_case" [arrowhead="open", arrowtail="none"];
"torch._inductor.test_case" -> "torch._functorch" [arrowhead="open", arrowtail="none"];
"torch._inductor.test_case" -> "torch._functorch.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.test_case" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.test_case" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.test_case" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.test_operators" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.test_operators" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch._inductor.test_operators" -> "torch.library" [arrowhead="open", arrowtail="none"];
"torch._inductor.triton_bundler" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.triton_bundler" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.triton_bundler" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._inductor.triton_bundler" -> "torch._inductor.runtime.runtime_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.triton_bundler" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.triton_bundler" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._dynamo.device_interface" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._inductor.codegen.cpp_micro_gemm" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._inductor.codegen.cpp_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._inductor.codegen.cuda.cutlass_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._inductor.codegen.simd" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._inductor.codegen.wrapper" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._inductor.graph" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._inductor.graph" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._inductor.kernel.mm_common" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._inductor.lowering" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._inductor.output_code" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._inductor.pattern_matcher" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._inductor.runtime.hints" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._inductor.runtime.runtime_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._inductor.runtime.triton_helpers" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._inductor.scheduler" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._inductor.virtualized" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch.autograd.profiler_util" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch.fx.passes.graph_transform_observer" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch.fx.passes.shape_prop" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch.utils._sympy.functions" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch.utils._sympy.symbol" [arrowhead="open", arrowtail="none"];
"torch._inductor.utils" -> "torch.utils._sympy.value_ranges" [arrowhead="open", arrowtail="none"];
"torch._inductor.virtualized" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.virtualized" -> "torch._inductor.choices" [arrowhead="open", arrowtail="none"];
"torch._inductor.virtualized" -> "torch._inductor.ops_handler" [arrowhead="open", arrowtail="none"];
"torch._inductor.virtualized" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._inductor.wrapper_benchmark" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._inductor.wrapper_benchmark" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch._inductor.wrapper_benchmark" -> "torch._inductor.runtime.benchmarking" [arrowhead="open", arrowtail="none"];
"torch._inductor.wrapper_benchmark" -> "torch._inductor.runtime.runtime_utils" [arrowhead="open", arrowtail="none"];
"torch._inductor.wrapper_benchmark" -> "torch._inductor.runtime.triton_heuristics" [arrowhead="open", arrowtail="none"];
"torch._inductor.wrapper_benchmark" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch._inductor.wrapper_benchmark" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch._jit_internal" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._jit_internal" -> "torch._awaits" [arrowhead="open", arrowtail="none"];
"torch._jit_internal" -> "torch._sources" [arrowhead="open", arrowtail="none"];
"torch._jit_internal" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch._jit_internal" -> "torch.futures" [arrowhead="open", arrowtail="none"];
"torch._jit_internal" -> "torch.package._mangling" [arrowhead="open", arrowtail="none"];
"torch._jit_internal" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch._lazy" -> "torch._lazy.closure" [arrowhead="open", arrowtail="none"];
"torch._lazy" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._lazy.closure" -> "torch._lazy.device_context" [arrowhead="open", arrowtail="none"];
"torch._lazy.extract_compiled_graph" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._lazy.extract_compiled_graph" -> "torch._lazy" [arrowhead="open", arrowtail="none"];
"torch._lazy.extract_compiled_graph" -> "torch._lazy.computation" [arrowhead="open", arrowtail="none"];
"torch._lazy.extract_compiled_graph" -> "torch._lazy.debug" [arrowhead="open", arrowtail="none"];
"torch._lazy.extract_compiled_graph" -> "torch._lazy.metrics" [arrowhead="open", arrowtail="none"];
"torch._lazy.extract_compiled_graph" -> "torch._lazy.tensor_factory_functions" [arrowhead="open", arrowtail="none"];
"torch._lazy.extract_compiled_graph" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._lazy.tensor_factory_functions" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._library" -> "torch._library.autograd" [arrowhead="open", arrowtail="none"];
"torch._library" -> "torch._library.fake_class_registry" [arrowhead="open", arrowtail="none"];
"torch._library" -> "torch._library.triton" [arrowhead="open", arrowtail="none"];
"torch._library.autograd" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._library.autograd" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._library.autograd" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch._library.autograd" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._library.autograd" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._library.custom_ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._library.custom_ops" -> "torch._functorch.autograd_function" [arrowhead="open", arrowtail="none"];
"torch._library.custom_ops" -> "torch._functorch.pyfunctorch" [arrowhead="open", arrowtail="none"];
"torch._library.custom_ops" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._library.custom_ops" -> "torch.utils._exposed_in" [arrowhead="open", arrowtail="none"];
"torch._library.fake_class_registry" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._library.fake_class_registry" -> "torch._higher_order_ops.torchbind" [arrowhead="open", arrowtail="none"];
"torch._library.fake_class_registry" -> "torch._library.utils" [arrowhead="open", arrowtail="none"];
"torch._library.fake_class_registry" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._library.fake_class_registry" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._library.fake_impl" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._library.fake_impl" -> "torch._library.utils" [arrowhead="open", arrowtail="none"];
"torch._library.infer_schema" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._library.infer_schema" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch._library.infer_schema" -> "torch.utils._exposed_in" [arrowhead="open", arrowtail="none"];
"torch._library.simple_registry" -> "torch._library.fake_impl" [arrowhead="open", arrowtail="none"];
"torch._library.simple_registry" -> "torch._library.utils" [arrowhead="open", arrowtail="none"];
"torch._library.triton" -> "torch._higher_order_ops.triton_kernel_wrap" [arrowhead="open", arrowtail="none"];
"torch._library.triton" -> "torch._library.custom_ops" [arrowhead="open", arrowtail="none"];
"torch._library.triton" -> "torch._library.infer_schema" [arrowhead="open", arrowtail="none"];
"torch._library.triton" -> "torch.utils._exposed_in" [arrowhead="open", arrowtail="none"];
"torch._library.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._library.utils" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._library.utils" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._library.utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._linalg_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._lobpcg" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._lobpcg" -> "torch._linalg_utils" [arrowhead="open", arrowtail="none"];
"torch._lobpcg" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch._logging" -> "torch._logging._internal" [arrowhead="open", arrowtail="none"];
"torch._logging" -> "torch._logging._registrations" [arrowhead="open", arrowtail="none"];
"torch._logging._internal" -> "torch._logging.structured" [arrowhead="open", arrowtail="none"];
"torch._logging._internal" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._logging._internal" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch._logging._internal" -> "torch.utils._traceback" [arrowhead="open", arrowtail="none"];
"torch._logging._registrations" -> "torch._logging._internal" [arrowhead="open", arrowtail="none"];
"torch._logging.structured" -> "torch._logging._internal" [arrowhead="open", arrowtail="none"];
"torch._logging.structured" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch._lowrank" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._lowrank" -> "torch._linalg_utils" [arrowhead="open", arrowtail="none"];
"torch._lowrank" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch._meta_registrations" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._meta_registrations" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch._meta_registrations" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._meta_registrations" -> "torch._prims" [arrowhead="open", arrowtail="none"];
"torch._meta_registrations" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._meta_registrations" -> "torch._prims_common.wrappers" [arrowhead="open", arrowtail="none"];
"torch._meta_registrations" -> "torch._refs" [arrowhead="open", arrowtail="none"];
"torch._meta_registrations" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._meta_registrations" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._meta_registrations" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._numpy" -> "torch._numpy._dtypes" [arrowhead="open", arrowtail="none"];
"torch._numpy" -> "torch._numpy._funcs" [arrowhead="open", arrowtail="none"];
"torch._numpy" -> "torch._numpy._getlimits" [arrowhead="open", arrowtail="none"];
"torch._numpy" -> "torch._numpy._ndarray" [arrowhead="open", arrowtail="none"];
"torch._numpy" -> "torch._numpy._ufuncs" [arrowhead="open", arrowtail="none"];
"torch._numpy" -> "torch._numpy._util" [arrowhead="open", arrowtail="none"];
"torch._numpy._binary_ufuncs_impl" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._numpy._casting_dicts" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._numpy._dtypes" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._numpy._dtypes" -> "torch._numpy._ndarray" [arrowhead="open", arrowtail="none"];
"torch._numpy._dtypes_impl" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._numpy._dtypes_impl" -> "torch._dynamo.config" [arrowhead="open", arrowtail="none"];
"torch._numpy._funcs" -> "torch._numpy._normalizations" [arrowhead="open", arrowtail="none"];
"torch._numpy._funcs_impl" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._numpy._funcs_impl" -> "torch._numpy._dtypes" [arrowhead="open", arrowtail="none"];
"torch._numpy._funcs_impl" -> "torch._numpy._ndarray" [arrowhead="open", arrowtail="none"];
"torch._numpy._funcs_impl" -> "torch._numpy._normalizations" [arrowhead="open", arrowtail="none"];
"torch._numpy._funcs_impl" -> "torch.backends" [arrowhead="open", arrowtail="none"];
"torch._numpy._funcs_impl" -> "torch.backends.opt_einsum" [arrowhead="open", arrowtail="none"];
"torch._numpy._getlimits" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._numpy._ndarray" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._numpy._ndarray" -> "torch._numpy._normalizations" [arrowhead="open", arrowtail="none"];
"torch._numpy._normalizations" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._numpy._normalizations" -> "torch._numpy._ndarray" [arrowhead="open", arrowtail="none"];
"torch._numpy._reductions_impl" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._numpy._ufuncs" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._numpy._ufuncs" -> "torch._numpy._normalizations" [arrowhead="open", arrowtail="none"];
"torch._numpy._unary_ufuncs_impl" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._numpy._util" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._numpy._util" -> "torch._numpy._ndarray" [arrowhead="open", arrowtail="none"];
"torch._numpy.fft" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._numpy.fft" -> "torch._numpy._normalizations" [arrowhead="open", arrowtail="none"];
"torch._numpy.linalg" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._numpy.linalg" -> "torch._numpy._normalizations" [arrowhead="open", arrowtail="none"];
"torch._numpy.random" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._numpy.random" -> "torch._dynamo.config" [arrowhead="open", arrowtail="none"];
"torch._numpy.random" -> "torch._numpy._ndarray" [arrowhead="open", arrowtail="none"];
"torch._numpy.random" -> "torch._numpy._normalizations" [arrowhead="open", arrowtail="none"];
"torch._numpy.testing" -> "torch._numpy.testing.utils" [arrowhead="open", arrowtail="none"];
"torch._numpy.testing.utils" -> "torch._numpy" [arrowhead="open", arrowtail="none"];
"torch._ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._ops" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch._ops" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch._ops" -> "torch._functorch.pyfunctorch" [arrowhead="open", arrowtail="none"];
"torch._ops" -> "torch._higher_order_ops.effects" [arrowhead="open", arrowtail="none"];
"torch._ops" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._ops" -> "torch._subclasses.schema_check_mode" [arrowhead="open", arrowtail="none"];
"torch._ops" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch._ops" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._ops" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch._ops" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._ops" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._prims" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._prims" -> "torch._higher_order_ops.effects" [arrowhead="open", arrowtail="none"];
"torch._prims" -> "torch._library.utils" [arrowhead="open", arrowtail="none"];
"torch._prims" -> "torch._prims.debug_prims" [arrowhead="open", arrowtail="none"];
"torch._prims" -> "torch._prims.rng_prims" [arrowhead="open", arrowtail="none"];
"torch._prims" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._prims" -> "torch._prims_common.wrappers" [arrowhead="open", arrowtail="none"];
"torch._prims" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._prims" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._prims" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch._prims" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._prims.context" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._prims.context" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._prims.debug_prims" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._prims.debug_prims" -> "torch._dynamo.testing" [arrowhead="open", arrowtail="none"];
"torch._prims.debug_prims" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch._prims.debug_prims" -> "torch.utils._content_store" [arrowhead="open", arrowtail="none"];
"torch._prims.executor" -> "torch._prims.context" [arrowhead="open", arrowtail="none"];
"torch._prims.executor" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch._prims.executor" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._prims.rng_prims" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._prims.rng_prims" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch._prims.rng_prims" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._prims.rng_prims" -> "torch._prims" [arrowhead="open", arrowtail="none"];
"torch._prims.rng_prims" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._prims.rng_prims" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._prims.rng_prims" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch._prims.rng_prims" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch._prims.rng_prims" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._prims_common" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._prims_common" -> "torch.__future__" [arrowhead="open", arrowtail="none"];
"torch._prims_common" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._prims_common" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._prims_common.wrappers" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._prims_common.wrappers" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._prims_common.wrappers" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._prims_common.wrappers" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._refs" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._refs" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch._refs" -> "torch._prims" [arrowhead="open", arrowtail="none"];
"torch._refs" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._refs" -> "torch._prims_common.wrappers" [arrowhead="open", arrowtail="none"];
"torch._refs" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._refs" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._refs" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._refs._conversions" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._refs._conversions" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch._refs._conversions" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._refs._conversions" -> "torch._prims_common.wrappers" [arrowhead="open", arrowtail="none"];
"torch._refs._conversions" -> "torch._refs" [arrowhead="open", arrowtail="none"];
"torch._refs.fft" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._refs.fft" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch._refs.fft" -> "torch._prims" [arrowhead="open", arrowtail="none"];
"torch._refs.fft" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._refs.fft" -> "torch._prims_common.wrappers" [arrowhead="open", arrowtail="none"];
"torch._refs.linalg" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._refs.linalg" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch._refs.linalg" -> "torch._decomp.decompositions" [arrowhead="open", arrowtail="none"];
"torch._refs.linalg" -> "torch._prims" [arrowhead="open", arrowtail="none"];
"torch._refs.linalg" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._refs.linalg" -> "torch._prims_common.wrappers" [arrowhead="open", arrowtail="none"];
"torch._refs.linalg" -> "torch._refs" [arrowhead="open", arrowtail="none"];
"torch._refs.linalg" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._refs.nn.functional" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._refs.nn.functional" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch._refs.nn.functional" -> "torch._decomp.decompositions" [arrowhead="open", arrowtail="none"];
"torch._refs.nn.functional" -> "torch._meta_registrations" [arrowhead="open", arrowtail="none"];
"torch._refs.nn.functional" -> "torch._prims" [arrowhead="open", arrowtail="none"];
"torch._refs.nn.functional" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._refs.nn.functional" -> "torch._prims_common.wrappers" [arrowhead="open", arrowtail="none"];
"torch._refs.nn.functional" -> "torch._refs" [arrowhead="open", arrowtail="none"];
"torch._refs.special" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._refs.special" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch._refs.special" -> "torch._prims" [arrowhead="open", arrowtail="none"];
"torch._refs.special" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._refs.special" -> "torch._prims_common.wrappers" [arrowhead="open", arrowtail="none"];
"torch._refs.special" -> "torch._refs" [arrowhead="open", arrowtail="none"];
"torch._streambase" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._strobelight.compile_time_profiler" -> "torch._strobelight.cli_function_profiler" [arrowhead="open", arrowtail="none"];
"torch._subclasses" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._subclasses" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._subclasses" -> "torch._subclasses.fake_utils" [arrowhead="open", arrowtail="none"];
"torch._subclasses._fake_tensor_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._subclasses._fake_tensor_utils" -> "torch.fx.experimental.sym_node" [arrowhead="open", arrowtail="none"];
"torch._subclasses._fake_tensor_utils" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch._subclasses._fake_tensor_utils" -> "torch.utils._backport_slots" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_impls" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_impls" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_impls" -> "torch._meta_registrations" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_impls" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_impls" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_impls" -> "torch._refs" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_impls" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_impls" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_impls" -> "torch.fx.operator_schemas" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_impls" -> "torch.utils._stats" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_impls" -> "torch.utils._sympy.numbers" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_impls" -> "torch.utils._sympy.value_ranges" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch._dynamo.config" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch._dynamo.source" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch._library.fake_class_registry" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch._library.utils" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch._subclasses._fake_tensor_utils" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch._subclasses.fake_impls" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch._subclasses.fake_utils" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch._subclasses.meta_utils" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch.fx.immutable_collections" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch.fx.operator_schemas" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch.multiprocessing.reductions" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch.nested._internal.nested_int" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch.nested._internal.nested_tensor" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch.utils._backport_slots" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch.utils._mode_utils" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch.utils._stats" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_tensor" -> "torch.utils._traceback" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_utils" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_utils" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_utils" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_utils" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._subclasses.fake_utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._subclasses.functional_tensor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._subclasses.functional_tensor" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch._subclasses.functional_tensor" -> "torch._functorch.eager_transforms" [arrowhead="open", arrowtail="none"];
"torch._subclasses.functional_tensor" -> "torch._higher_order_ops.auto_functionalize" [arrowhead="open", arrowtail="none"];
"torch._subclasses.functional_tensor" -> "torch._higher_order_ops.effects" [arrowhead="open", arrowtail="none"];
"torch._subclasses.functional_tensor" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch._subclasses.functional_tensor" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch._subclasses.functional_tensor" -> "torch._subclasses.meta_utils" [arrowhead="open", arrowtail="none"];
"torch._subclasses.functional_tensor" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._subclasses.functional_tensor" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._subclasses.meta_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._subclasses.meta_utils" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch._subclasses.meta_utils" -> "torch._dynamo.source" [arrowhead="open", arrowtail="none"];
"torch._subclasses.meta_utils" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch._subclasses.meta_utils" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._subclasses.meta_utils" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._subclasses.meta_utils" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch._subclasses.meta_utils" -> "torch.nested._internal.nested_tensor" [arrowhead="open", arrowtail="none"];
"torch._subclasses.meta_utils" -> "torch.utils._mode_utils" [arrowhead="open", arrowtail="none"];
"torch._subclasses.meta_utils" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._subclasses.meta_utils" -> "torch.utils.weak" [arrowhead="open", arrowtail="none"];
"torch._subclasses.schema_check_mode" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._subclasses.schema_check_mode" -> "torch.fx.operator_schemas" [arrowhead="open", arrowtail="none"];
"torch._subclasses.schema_check_mode" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch._subclasses.schema_check_mode" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch._subclasses.schema_check_mode" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._tensor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._tensor" -> "torch._linalg_utils" [arrowhead="open", arrowtail="none"];
"torch._tensor" -> "torch._namedtensor_internals" [arrowhead="open", arrowtail="none"];
"torch._tensor" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch._tensor" -> "torch.autograd._functions" [arrowhead="open", arrowtail="none"];
"torch._tensor" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch._tensor" -> "torch.utils.dlpack" [arrowhead="open", arrowtail="none"];
"torch._tensor" -> "torch.utils.hooks" [arrowhead="open", arrowtail="none"];
"torch._tensor_docs" -> "torch._torch_docs" [arrowhead="open", arrowtail="none"];
"torch._tensor_str" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._tensor_str" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch._utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._utils" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch._utils_internal" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._utils_internal" -> "torch._strobelight.compile_time_profiler" [arrowhead="open", arrowtail="none"];
"torch._vendor.packaging.version" -> "torch._vendor.packaging._structures" [arrowhead="open", arrowtail="none"];
"torch._vmap_internals" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._vmap_internals" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch._weights_only_unpickler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch._weights_only_unpickler" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.accelerator" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.accelerator" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.accelerator._utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.accelerator._utils" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.amp" -> "torch.amp.autocast_mode" [arrowhead="open", arrowtail="none"];
"torch.amp" -> "torch.amp.grad_scaler" [arrowhead="open", arrowtail="none"];
"torch.amp.autocast_mode" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.amp.autocast_mode" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.amp.grad_scaler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic" -> "torch.ao.nn.intrinsic.modules" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic" -> "torch.ao.nn.intrinsic.modules.fused" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.modules" -> "torch.ao.nn.intrinsic.modules.fused" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.modules.fused" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.modules.fused" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.modules.fused" -> "torch.nn.utils.parametrize" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat" -> "torch.ao.nn.intrinsic.modules" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules" -> "torch.ao.nn.intrinsic.qat.modules.conv_fused" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules" -> "torch.ao.nn.intrinsic.qat.modules.linear_fused" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules" -> "torch.ao.nn.intrinsic.qat.modules.linear_relu" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.conv_fused" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.conv_fused" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.conv_fused" -> "torch.ao.nn.qat" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.conv_fused" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.conv_fused" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.conv_fused" -> "torch.nn.init" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.conv_fused" -> "torch.nn.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.conv_fused" -> "torch.nn.parameter" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.conv_fused" -> "torch.nn.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.linear_fused" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.linear_fused" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.linear_fused" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.linear_fused" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.linear_fused" -> "torch.nn.init" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.linear_fused" -> "torch.nn.parameter" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.linear_fused" -> "torch.nn.utils.fusion" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.linear_relu" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.linear_relu" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.linear_relu" -> "torch.ao.nn.qat" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.qat.modules.linear_relu" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized" -> "torch.ao.nn.intrinsic.quantized.modules" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.dynamic" -> "torch.ao.nn.intrinsic.quantized.dynamic.modules" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.dynamic.modules" -> "torch.ao.nn.intrinsic.quantized.dynamic.modules.linear_relu" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.dynamic.modules.linear_relu" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.dynamic.modules.linear_relu" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.dynamic.modules.linear_relu" -> "torch.ao.nn.quantized.dynamic" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.modules" -> "torch.ao.nn.intrinsic.quantized.modules.bn_relu" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.modules" -> "torch.ao.nn.intrinsic.quantized.modules.conv_add" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.modules" -> "torch.ao.nn.intrinsic.quantized.modules.conv_relu" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.modules" -> "torch.ao.nn.intrinsic.quantized.modules.linear_relu" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.modules.bn_relu" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.modules.bn_relu" -> "torch.ao.nn.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.modules.conv_add" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.modules.conv_add" -> "torch.ao.nn.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.modules.conv_add" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.modules.conv_relu" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.modules.conv_relu" -> "torch.ao.nn.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.modules.conv_relu" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.modules.conv_relu" -> "torch.nn.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.modules.linear_relu" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.modules.linear_relu" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.modules.linear_relu" -> "torch.ao.nn.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.intrinsic.quantized.modules.linear_relu" -> "torch.ao.nn.quantized.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat" -> "torch.ao.nn.qat.modules" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat.dynamic" -> "torch.ao.nn.qat.dynamic.modules" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat.dynamic.modules" -> "torch.ao.nn.qat.dynamic.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat.dynamic.modules.linear" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat.modules" -> "torch.ao.nn.qat.modules.conv" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat.modules" -> "torch.ao.nn.qat.modules.embedding_ops" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat.modules" -> "torch.ao.nn.qat.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat.modules.conv" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat.modules.conv" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat.modules.conv" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat.modules.conv" -> "torch.nn.common_types" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat.modules.conv" -> "torch.nn.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat.modules.embedding_ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat.modules.embedding_ops" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat.modules.embedding_ops" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat.modules.linear" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat.modules.linear" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat.modules.linear" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat.modules.linear" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.qat.modules.linear" -> "torch.nn.utils.parametrize" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantizable" -> "torch.ao.nn.quantizable.modules" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantizable.modules" -> "torch.ao.nn.quantizable.modules.activation" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantizable.modules" -> "torch.ao.nn.quantizable.modules.rnn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantizable.modules.activation" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantizable.modules.activation" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantizable.modules.activation" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantizable.modules.rnn" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized" -> "torch.ao.nn.quantized.modules" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic" -> "torch.ao.nn.quantized.dynamic.modules" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules" -> "torch.ao.nn.quantized.dynamic.modules.conv" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules" -> "torch.ao.nn.quantized.dynamic.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules" -> "torch.ao.nn.quantized.dynamic.modules.rnn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules.conv" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules.conv" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules.conv" -> "torch.ao.nn.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules.conv" -> "torch.ao.nn.quantized.modules.conv" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules.conv" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules.conv" -> "torch.nn.common_types" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules.conv" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules.conv" -> "torch.nn.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules.linear" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules.linear" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules.linear" -> "torch.ao.nn.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules.linear" -> "torch.ao.nn.quantized.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules.linear" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules.rnn" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules.rnn" -> "torch._jit_internal" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules.rnn" -> "torch.ao.nn.quantized.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules.rnn" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules.rnn" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.dynamic.modules.rnn" -> "torch.nn.utils.rnn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.functional" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.functional" -> "torch.ao.nn.quantized.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.functional" -> "torch.jit.annotations" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.functional" -> "torch.nn.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules" -> "torch.ao.nn.quantized.modules.activation" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules" -> "torch.ao.nn.quantized.modules.batchnorm" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules" -> "torch.ao.nn.quantized.modules.conv" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules" -> "torch.ao.nn.quantized.modules.dropout" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules" -> "torch.ao.nn.quantized.modules.embedding_ops" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules" -> "torch.ao.nn.quantized.modules.functional_modules" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules" -> "torch.ao.nn.quantized.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules" -> "torch.ao.nn.quantized.modules.normalization" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules" -> "torch.ao.nn.quantized.modules.rnn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules" -> "torch.nn.modules.pooling" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.activation" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.batchnorm" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.batchnorm" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.conv" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.conv" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.conv" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.conv" -> "torch.ao.nn.intrinsic.qat" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.conv" -> "torch.ao.nn.quantized.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.conv" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.conv" -> "torch.nn.common_types" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.conv" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.conv" -> "torch.nn.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.conv" -> "torch.nn.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.dropout" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.embedding_ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.embedding_ops" -> "torch._jit_internal" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.embedding_ops" -> "torch.ao.nn.quantized.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.embedding_ops" -> "torch.ao.quantization" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.embedding_ops" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.embedding_ops" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.functional_modules" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.functional_modules" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.linear" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.linear" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.linear" -> "torch.ao.nn.intrinsic.qat" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.linear" -> "torch.ao.nn.quantized.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.linear" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.linear" -> "torch.nn.utils.fusion" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.linear" -> "torch.nn.utils.parametrize" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.normalization" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.rnn" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.modules.utils" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference" -> "torch.ao.nn.quantized.reference.modules" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules" -> "torch.ao.nn.quantized.reference.modules.conv" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules" -> "torch.ao.nn.quantized.reference.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules" -> "torch.ao.nn.quantized.reference.modules.rnn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules" -> "torch.ao.nn.quantized.reference.modules.sparse" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules.conv" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules.conv" -> "torch.ao.nn.quantized.reference.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules.conv" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules.conv" -> "torch.nn.common_types" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules.conv" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules.linear" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules.linear" -> "torch.ao.nn.quantized.reference.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules.linear" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules.linear" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules.rnn" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules.rnn" -> "torch._VF" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules.rnn" -> "torch.ao.nn.quantized.reference.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules.rnn" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules.rnn" -> "torch.nn.utils.rnn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules.sparse" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules.sparse" -> "torch.ao.nn.quantized.reference.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules.sparse" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules.sparse" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.quantized.reference.modules.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.sparse.quantized" -> "torch.ao.nn.sparse.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.sparse.quantized" -> "torch.ao.nn.sparse.quantized.dynamic" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.sparse.quantized" -> "torch.ao.nn.sparse.quantized.linear" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.sparse.quantized.dynamic" -> "torch.ao.nn.sparse.quantized.linear" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.sparse.quantized.dynamic.linear" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.sparse.quantized.dynamic.linear" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.sparse.quantized.dynamic.linear" -> "torch.ao.nn.quantized.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.sparse.quantized.dynamic.linear" -> "torch.ao.nn.sparse.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.sparse.quantized.dynamic.linear" -> "torch.ao.nn.sparse.quantized.linear" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.sparse.quantized.dynamic.linear" -> "torch.ao.nn.sparse.quantized.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.sparse.quantized.dynamic.linear" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.sparse.quantized.linear" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.nn.sparse.quantized.linear" -> "torch.ao.nn.quantized.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite" -> "torch.ao.nn.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite" -> "torch.ao.nn.quantized.dynamic" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite" -> "torch.ao.quantization" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite" -> "torch.ao.quantization.quantization_mappings" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch.ao.ns.fx.graph_matcher" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch.ao.ns.fx.graph_passes" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch.ao.ns.fx.mappings" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch.ao.ns.fx.n_shadows_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch.ao.ns.fx.ns_types" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch.ao.ns.fx.qconfig_multi_mapping" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch.ao.ns.fx.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch.ao.ns.fx.weight_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch.ao.quantization" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch.ao.quantization.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch.ao.quantization.backend_config.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch.ao.quantization.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch.ao.quantization.fx.match_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch.ao.quantization.fx.qconfig_mapping_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch.ao.quantization.fx.quantize_handler" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch.ao.quantization.quantize_fx" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.ao.ns._numeric_suite_fx" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.graph_matcher" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.graph_matcher" -> "torch.ao.ns.fx.mappings" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.graph_matcher" -> "torch.ao.ns.fx.ns_types" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.graph_matcher" -> "torch.ao.ns.fx.pattern_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.graph_matcher" -> "torch.ao.quantization" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.graph_matcher" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.graph_matcher" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.graph_matcher" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.graph_passes" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.graph_passes" -> "torch.ao.ns.fx.mappings" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.graph_passes" -> "torch.ao.ns.fx.ns_types" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.graph_passes" -> "torch.ao.ns.fx.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.graph_passes" -> "torch.ao.quantization.fx.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.graph_passes" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.graph_passes" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.graph_passes" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.mappings" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.mappings" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.mappings" -> "torch.ao.nn.intrinsic.qat" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.mappings" -> "torch.ao.nn.intrinsic.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.mappings" -> "torch.ao.nn.intrinsic.quantized.dynamic" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.mappings" -> "torch.ao.nn.qat" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.mappings" -> "torch.ao.nn.qat.dynamic" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.mappings" -> "torch.ao.nn.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.mappings" -> "torch.ao.nn.quantized.dynamic" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.mappings" -> "torch.ao.ns.fx.ns_types" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.mappings" -> "torch.ao.quantization.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.mappings" -> "torch.ao.quantization.fx._lower_to_native_backend" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.mappings" -> "torch.ao.quantization.quantization_mappings" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.mappings" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.mappings" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.n_shadows_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.n_shadows_utils" -> "torch.ao.ns._numeric_suite_fx" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.n_shadows_utils" -> "torch.ao.ns.fx.graph_passes" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.n_shadows_utils" -> "torch.ao.ns.fx.ns_types" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.n_shadows_utils" -> "torch.ao.ns.fx.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.n_shadows_utils" -> "torch.ao.quantization" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.n_shadows_utils" -> "torch.ao.quantization.fx.match_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.n_shadows_utils" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.n_shadows_utils" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.n_shadows_utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.n_shadows_utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.ns_types" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.pattern_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.pattern_utils" -> "torch.ao.ns.fx.ns_types" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.pattern_utils" -> "torch.ao.quantization" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.pattern_utils" -> "torch.ao.quantization.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.pattern_utils" -> "torch.ao.quantization.fx.quantize_handler" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.pattern_utils" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.pattern_utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.pattern_utils" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.pattern_utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.pattern_utils" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.qconfig_multi_mapping" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.qconfig_multi_mapping" -> "torch.ao.quantization" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.qconfig_multi_mapping" -> "torch.ao.quantization.qconfig_mapping" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.utils" -> "torch.ao.nn.intrinsic.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.utils" -> "torch.ao.nn.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.utils" -> "torch.ao.ns.fx.ns_types" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.utils" -> "torch.ao.quantization" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.utils" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.utils" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.utils" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.weight_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.weight_utils" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.weight_utils" -> "torch.ao.nn.intrinsic.qat" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.weight_utils" -> "torch.ao.nn.intrinsic.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.weight_utils" -> "torch.ao.nn.qat" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.weight_utils" -> "torch.ao.nn.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.weight_utils" -> "torch.ao.nn.quantized.dynamic" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.weight_utils" -> "torch.ao.ns.fx.ns_types" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.weight_utils" -> "torch.ao.ns.fx.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.weight_utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.weight_utils" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.weight_utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.ns.fx.weight_utils" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning" -> "torch.ao.pruning._mappings" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning" -> "torch.ao.pruning.scheduler.base_scheduler" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning" -> "torch.ao.pruning.scheduler.cubic_scheduler" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning" -> "torch.ao.pruning.scheduler.lambda_scheduler" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning" -> "torch.ao.pruning.sparsifier.base_sparsifier" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning" -> "torch.ao.pruning.sparsifier.nearly_diagonal_sparsifier" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning" -> "torch.ao.pruning.sparsifier.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning" -> "torch.ao.pruning.sparsifier.weight_norm_sparsifier" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.activation_sparsifier.activation_sparsifier" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.activation_sparsifier.activation_sparsifier" -> "torch.ao.pruning.sparsifier.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.activation_sparsifier.activation_sparsifier" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_scheduler" -> "torch.ao.pruning._experimental.data_scheduler.base_data_scheduler" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_scheduler.base_data_scheduler" -> "torch.ao.pruning._experimental.data_sparsifier" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_sparsifier" -> "torch.ao.pruning._experimental.data_sparsifier.base_data_sparsifier" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_sparsifier" -> "torch.ao.pruning._experimental.data_sparsifier.data_norm_sparsifier" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_sparsifier.base_data_sparsifier" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_sparsifier.base_data_sparsifier" -> "torch.ao.pruning.sparsifier" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_sparsifier.base_data_sparsifier" -> "torch.ao.pruning.sparsifier.base_sparsifier" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_sparsifier.base_data_sparsifier" -> "torch.ao.pruning.sparsifier.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_sparsifier.base_data_sparsifier" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_sparsifier.base_data_sparsifier" -> "torch.nn.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_sparsifier.base_data_sparsifier" -> "torch.nn.utils.parametrize" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_sparsifier.data_norm_sparsifier" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_sparsifier.data_norm_sparsifier" -> "torch.ao.pruning._experimental.data_sparsifier.base_data_sparsifier" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_sparsifier.data_norm_sparsifier" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_sparsifier.data_norm_sparsifier" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_sparsifier.lightning.callbacks._data_sparstity_utils" -> "torch.ao.pruning._experimental.data_sparsifier.base_data_sparsifier" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_sparsifier.lightning.callbacks.data_sparsity" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_sparsifier.lightning.callbacks.data_sparsity" -> "torch.ao.pruning._experimental.data_sparsifier.lightning.callbacks._data_sparstity_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_sparsifier.quantization_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_sparsifier.quantization_utils" -> "torch.ao.pruning.sparsifier.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.data_sparsifier.quantization_utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner" -> "torch.ao.pruning._experimental.pruner.FPGM_pruner" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner" -> "torch.ao.pruning._experimental.pruner.base_structured_sparsifier" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner" -> "torch.ao.pruning._experimental.pruner.lstm_saliency_pruner" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner" -> "torch.ao.pruning._experimental.pruner.parametrization" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner" -> "torch.ao.pruning._experimental.pruner.saliency_pruner" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.FPGM_pruner" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.FPGM_pruner" -> "torch.ao.pruning._experimental.pruner.base_structured_sparsifier" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.base_structured_sparsifier" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.base_structured_sparsifier" -> "torch.ao.pruning._experimental.pruner.match_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.base_structured_sparsifier" -> "torch.ao.pruning._experimental.pruner.parametrization" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.base_structured_sparsifier" -> "torch.ao.pruning._experimental.pruner.prune_functions" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.base_structured_sparsifier" -> "torch.ao.pruning.sparsifier.base_sparsifier" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.base_structured_sparsifier" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.base_structured_sparsifier" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.base_structured_sparsifier" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.base_structured_sparsifier" -> "torch.nn.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.base_structured_sparsifier" -> "torch.nn.utils.parametrize" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.lstm_saliency_pruner" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.lstm_saliency_pruner" -> "torch.ao.pruning._experimental.pruner.base_structured_sparsifier" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.match_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.match_utils" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.match_utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.match_utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.match_utils" -> "torch.nn.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.match_utils" -> "torch.nn.utils.parametrize" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.parametrization" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.parametrization" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.parametrization" -> "torch.nn.utils.parametrize" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.prune_functions" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.prune_functions" -> "torch.ao.pruning._experimental.pruner.parametrization" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.prune_functions" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.prune_functions" -> "torch.nn.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.prune_functions" -> "torch.nn.utils.parametrize" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._experimental.pruner.saliency_pruner" -> "torch.ao.pruning._experimental.pruner.base_structured_sparsifier" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning._mappings" -> "torch.ao.nn.sparse" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning.scheduler.base_scheduler" -> "torch.ao.pruning.sparsifier.base_sparsifier" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning.scheduler.cubic_scheduler" -> "torch.ao.pruning.scheduler.base_scheduler" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning.scheduler.lambda_scheduler" -> "torch.ao.pruning.scheduler.base_scheduler" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning.sparsifier.base_sparsifier" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning.sparsifier.base_sparsifier" -> "torch.ao.pruning.sparsifier.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning.sparsifier.base_sparsifier" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning.sparsifier.base_sparsifier" -> "torch.nn.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning.sparsifier.base_sparsifier" -> "torch.nn.utils.parametrize" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning.sparsifier.nearly_diagonal_sparsifier" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning.sparsifier.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning.sparsifier.utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning.sparsifier.utils" -> "torch.nn.utils.parametrize" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning.sparsifier.weight_norm_sparsifier" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning.sparsifier.weight_norm_sparsifier" -> "torch.ao.pruning.sparsifier.base_sparsifier" [arrowhead="open", arrowtail="none"];
"torch.ao.pruning.sparsifier.weight_norm_sparsifier" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization" -> "torch.ao.quantization.fake_quantize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization" -> "torch.ao.quantization.fuse_modules" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization" -> "torch.ao.quantization.fuser_method_mappings" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization" -> "torch.ao.quantization.pt2e._numeric_debugger" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization" -> "torch.ao.quantization.pt2e.export_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization" -> "torch.ao.quantization.qconfig_mapping" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization" -> "torch.ao.quantization.quant_type" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization" -> "torch.ao.quantization.quantization_mappings" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization" -> "torch.ao.quantization.quantize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization" -> "torch.ao.quantization.quantize_jit" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization._correct_bias" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization._correct_bias" -> "torch.ao.nn.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization._correct_bias" -> "torch.ao.ns._numeric_suite" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization._correct_bias" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization._equalize" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization._learnable_fake_quantize" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization._learnable_fake_quantize" -> "torch.nn.parameter" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config" -> "torch.ao.quantization.backend_config.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config" -> "torch.ao.quantization.backend_config.executorch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config" -> "torch.ao.quantization.backend_config.fbgemm" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config" -> "torch.ao.quantization.backend_config.native" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config" -> "torch.ao.quantization.backend_config.onednn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config" -> "torch.ao.quantization.backend_config.qnnpack" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config" -> "torch.ao.quantization.backend_config.tensorrt" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config._common_operator_config_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config._common_operator_config_utils" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config._common_operator_config_utils" -> "torch.ao.nn.intrinsic.qat" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config._common_operator_config_utils" -> "torch.ao.nn.qat" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config._common_operator_config_utils" -> "torch.ao.nn.quantized.reference" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config._common_operator_config_utils" -> "torch.ao.quantization.backend_config.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config._common_operator_config_utils" -> "torch.ao.quantization.fuser_method_mappings" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config._common_operator_config_utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config._common_operator_config_utils" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config._qnnpack_pt2e" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config._qnnpack_pt2e" -> "torch.ao.quantization.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.backend_config" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.executorch" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.executorch" -> "torch.ao.nn.qat" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.executorch" -> "torch.ao.nn.quantized.reference" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.executorch" -> "torch.ao.quantization.backend_config._common_operator_config_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.executorch" -> "torch.ao.quantization.backend_config.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.executorch" -> "torch.ao.quantization.backend_config.qnnpack" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.executorch" -> "torch.ao.quantization.fuser_method_mappings" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.executorch" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.executorch" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.fbgemm" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.fbgemm" -> "torch.ao.quantization.backend_config._common_operator_config_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.fbgemm" -> "torch.ao.quantization.backend_config.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.native" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.native" -> "torch.ao.quantization.backend_config._common_operator_config_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.native" -> "torch.ao.quantization.backend_config.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.onednn" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.onednn" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.onednn" -> "torch.ao.nn.quantized.reference" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.onednn" -> "torch.ao.quantization.backend_config._common_operator_config_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.onednn" -> "torch.ao.quantization.backend_config.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.onednn" -> "torch.ao.quantization.fuser_method_mappings" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.onednn" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.onednn" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.onednn" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.qnnpack" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.qnnpack" -> "torch.ao.quantization.backend_config._common_operator_config_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.qnnpack" -> "torch.ao.quantization.backend_config.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.tensorrt" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.tensorrt" -> "torch.ao.quantization.backend_config._common_operator_config_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.tensorrt" -> "torch.ao.quantization.backend_config.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.utils" -> "torch.ao.quantization.backend_config.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.utils" -> "torch.ao.quantization.fuser_method_mappings" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.utils" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.utils" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.x86" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.x86" -> "torch.ao.quantization.backend_config._common_operator_config_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.backend_config.x86" -> "torch.ao.quantization.backend_config.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fake_quantize" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fake_quantize" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fake_quantize" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fuse_modules" -> "torch.ao.quantization.fuser_method_mappings" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fuse_modules" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fuse_modules" -> "torch.nn.utils.parametrize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fuser_method_mappings" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fuser_method_mappings" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fuser_method_mappings" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx" -> "torch.ao.quantization.fx.convert" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx" -> "torch.ao.quantization.fx.fuse" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx" -> "torch.ao.quantization.fx.prepare" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._decomposed" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._decomposed" -> "torch._refs" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._decomposed" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._decomposed" -> "torch.library" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._equalize" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._equalize" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._equalize" -> "torch.ao.ns._numeric_suite_fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._equalize" -> "torch.ao.ns.fx.mappings" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._equalize" -> "torch.ao.quantization.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._equalize" -> "torch.ao.quantization.fx.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._equalize" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._equalize" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._equalize" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._equalize" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._equalize" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._equalize" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._lower_to_native_backend" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._lower_to_native_backend" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._lower_to_native_backend" -> "torch.ao.nn.intrinsic.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._lower_to_native_backend" -> "torch.ao.nn.intrinsic.quantized.dynamic" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._lower_to_native_backend" -> "torch.ao.nn.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._lower_to_native_backend" -> "torch.ao.nn.quantized.dynamic" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._lower_to_native_backend" -> "torch.ao.nn.quantized.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._lower_to_native_backend" -> "torch.ao.nn.quantized.reference" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._lower_to_native_backend" -> "torch.ao.quantization.fx.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._lower_to_native_backend" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._lower_to_native_backend" -> "torch.ao.quantization.quantization_mappings" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._lower_to_native_backend" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._lower_to_native_backend" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._lower_to_native_backend" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._lower_to_native_backend" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._lower_to_native_backend" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._model_report.detector" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._model_report.detector" -> "torch.ao.nn.qat" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._model_report.detector" -> "torch.ao.quantization.fake_quantize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._model_report.detector" -> "torch.ao.quantization.fx._equalize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._model_report.detector" -> "torch.ao.quantization.fx._model_report.model_report_observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._model_report.detector" -> "torch.ao.quantization.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._model_report.detector" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._model_report.detector" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._model_report.detector" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._model_report.model_report" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._model_report.model_report" -> "torch.ao.quantization.fx._equalize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._model_report.model_report" -> "torch.ao.quantization.fx._model_report.detector" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._model_report.model_report" -> "torch.ao.quantization.fx._model_report.model_report_visualizer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._model_report.model_report" -> "torch.ao.quantization.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._model_report.model_report" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._model_report.model_report" -> "torch.ao.quantization.qconfig_mapping" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._model_report.model_report_observer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._model_report.model_report_observer" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx._model_report.model_report_visualizer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.ao.quantization" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.ao.quantization.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.ao.quantization.backend_config.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.ao.quantization.fx._decomposed" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.ao.quantization.fx._equalize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.ao.quantization.fx.custom_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.ao.quantization.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.ao.quantization.fx.lower_to_fbgemm" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.ao.quantization.fx.qconfig_mapping_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.ao.quantization.fx.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.ao.quantization.qconfig_mapping" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.ao.quantization.quant_type" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.ao.quantization.quantize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.ao.quantization.stubs" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.convert" -> "torch.nn.utils.parametrize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.custom_config" -> "torch.ao.quantization" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.custom_config" -> "torch.ao.quantization.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.custom_config" -> "torch.ao.quantization.quant_type" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.fuse" -> "torch.ao.quantization.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.fuse" -> "torch.ao.quantization.backend_config.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.fuse" -> "torch.ao.quantization.fx.custom_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.fuse" -> "torch.ao.quantization.fx.fuse_handler" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.fuse" -> "torch.ao.quantization.fx.match_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.fuse" -> "torch.ao.quantization.fx.pattern_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.fuse" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.fuse" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.fuse" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.fuse_handler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.fuse_handler" -> "torch.ao.quantization.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.fuse_handler" -> "torch.ao.quantization.fuser_method_mappings" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.fuse_handler" -> "torch.ao.quantization.fx.custom_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.fuse_handler" -> "torch.ao.quantization.fx.match_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.fuse_handler" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.fuse_handler" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.fuse_handler" -> "torch.nn.utils.parametrize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.graph_module" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.graph_module" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.graph_module" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.lower_to_fbgemm" -> "torch.ao.quantization.fx._lower_to_native_backend" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.lower_to_fbgemm" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.lower_to_fbgemm" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.lower_to_qnnpack" -> "torch.ao.quantization.fx._lower_to_native_backend" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.lower_to_qnnpack" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.lower_to_qnnpack" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.lstm_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.lstm_utils" -> "torch.ao.quantization" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.lstm_utils" -> "torch.ao.quantization.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.lstm_utils" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.lstm_utils" -> "torch.ao.quantization.quantize_fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.match_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.match_utils" -> "torch.ao.quantization.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.match_utils" -> "torch.ao.quantization.fx.quantize_handler" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.match_utils" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.match_utils" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.match_utils" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.match_utils" -> "torch.nn.utils.parametrize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.pattern_utils" -> "torch.ao.quantization.fake_quantize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.pattern_utils" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.pattern_utils" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch.ao.quantization" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch.ao.quantization.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch.ao.quantization.backend_config.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch.ao.quantization.fx._equalize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch.ao.quantization.fx.custom_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch.ao.quantization.fx.match_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch.ao.quantization.fx.pattern_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch.ao.quantization.fx.qconfig_mapping_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch.ao.quantization.fx.quantize_handler" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch.ao.quantization.fx.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch.ao.quantization.qconfig_mapping" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch.ao.quantization.quantize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch.ao.quantization.quantizer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.prepare" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.qconfig_mapping_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.qconfig_mapping_utils" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.qconfig_mapping_utils" -> "torch.ao.quantization" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.qconfig_mapping_utils" -> "torch.ao.quantization.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.qconfig_mapping_utils" -> "torch.ao.quantization.backend_config.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.qconfig_mapping_utils" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.qconfig_mapping_utils" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.qconfig_mapping_utils" -> "torch.ao.quantization.qconfig_mapping" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.qconfig_mapping_utils" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.qconfig_mapping_utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.qconfig_mapping_utils" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.quantize_handler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.quantize_handler" -> "torch.ao.quantization.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.quantize_handler" -> "torch.ao.quantization.fx.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.quantize_handler" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.quantize_handler" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.tracer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.tracer" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.tracer" -> "torch.fx._symbolic_trace" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.tracer" -> "torch.fx.proxy" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.utils" -> "torch.ao.quantization" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.utils" -> "torch.ao.quantization.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.utils" -> "torch.ao.quantization.fake_quantize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.utils" -> "torch.ao.quantization.fx._decomposed" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.utils" -> "torch.ao.quantization.fx.custom_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.utils" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.utils" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.utils" -> "torch.ao.quantization.qconfig_mapping" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.utils" -> "torch.ao.quantization.stubs" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.utils" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.utils" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.fx.utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.observer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.observer" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.observer" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e._numeric_debugger" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e._numeric_debugger" -> "torch.ao.ns.fx.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e._numeric_debugger" -> "torch.ao.quantization.fx.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e._numeric_debugger" -> "torch.ao.quantization.pt2e.graph_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e._numeric_debugger" -> "torch.export" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e._numeric_debugger" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e._numeric_debugger" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e._numeric_debugger" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.duplicate_dq_pass" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.duplicate_dq_pass" -> "torch.ao.quantization.pt2e.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.duplicate_dq_pass" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.duplicate_dq_pass" -> "torch.fx.passes.infra.pass_base" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.export_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.export_utils" -> "torch._export" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.export_utils" -> "torch.ao.quantization.pt2e.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.export_utils" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.export_utils" -> "torch.fx.subgraph_rewriter" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.export_utils" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.graph_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.graph_utils" -> "torch.export" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.graph_utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.graph_utils" -> "torch.fx.passes.utils.source_matcher_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.port_metadata_pass" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.port_metadata_pass" -> "torch._export.error" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.port_metadata_pass" -> "torch.ao.quantization.pt2e.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.port_metadata_pass" -> "torch.ao.quantization.quantizer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.port_metadata_pass" -> "torch.fx.passes.infra.pass_base" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.prepare" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.prepare" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.prepare" -> "torch.ao.quantization" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.prepare" -> "torch.ao.quantization.fx.custom_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.prepare" -> "torch.ao.quantization.fx.prepare" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.prepare" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.prepare" -> "torch.ao.quantization.quantizer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.prepare" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.prepare" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.qat_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.qat_utils" -> "torch._export" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.qat_utils" -> "torch.ao.quantization.fx._decomposed" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.qat_utils" -> "torch.ao.quantization.pt2e.export_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.qat_utils" -> "torch.ao.quantization.pt2e.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.qat_utils" -> "torch.ao.quantization.quantizer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.qat_utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.qat_utils" -> "torch.fx.subgraph_rewriter" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.qat_utils" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.representation" -> "torch.ao.quantization.pt2e.representation.rewrite" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.representation.rewrite" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.representation.rewrite" -> "torch._export" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.representation.rewrite" -> "torch._higher_order_ops.out_dtype" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.representation.rewrite" -> "torch.ao.quantization.fx._decomposed" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.representation.rewrite" -> "torch.ao.quantization.pt2e.export_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.representation.rewrite" -> "torch.ao.quantization.pt2e.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.representation.rewrite" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.representation.rewrite" -> "torch.fx.subgraph_rewriter" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.utils" -> "torch._export" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.utils" -> "torch.ao.quantization.fx._decomposed" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.utils" -> "torch.ao.quantization.quantizer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.utils" -> "torch.export.unflatten" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.utils" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.utils" -> "torch.nn.utils.fusion" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.pt2e.utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.qconfig" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.qconfig" -> "torch.ao.quantization.fake_quantize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.qconfig" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.qconfig" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.qconfig_mapping" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.qconfig_mapping" -> "torch.ao.quantization.fake_quantize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.qconfig_mapping" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.qconfig_mapping" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantization_mappings" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantization_mappings" -> "torch.ao.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantization_mappings" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantization_mappings" -> "torch.ao.nn.intrinsic.qat" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantization_mappings" -> "torch.ao.nn.intrinsic.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantization_mappings" -> "torch.ao.nn.intrinsic.quantized.dynamic" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantization_mappings" -> "torch.ao.nn.qat" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantization_mappings" -> "torch.ao.nn.qat.dynamic" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantization_mappings" -> "torch.ao.nn.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantization_mappings" -> "torch.ao.nn.quantized.dynamic" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantization_mappings" -> "torch.ao.nn.quantized.reference" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantization_mappings" -> "torch.ao.quantization.fake_quantize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantization_mappings" -> "torch.ao.quantization.stubs" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantization_mappings" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantization_mappings" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantization_mappings" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantization_mappings" -> "torch.nn.utils.parametrize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize" -> "torch.ao.nn.quantized" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize" -> "torch.ao.quantization.quantization_mappings" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize" -> "torch.ao.quantization.stubs" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize" -> "torch.nn.utils.parametrize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_fx" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_fx" -> "torch.ao.quantization.backend_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_fx" -> "torch.ao.quantization.fx.convert" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_fx" -> "torch.ao.quantization.fx.custom_config" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_fx" -> "torch.ao.quantization.fx.fuse" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_fx" -> "torch.ao.quantization.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_fx" -> "torch.ao.quantization.fx.prepare" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_fx" -> "torch.ao.quantization.fx.tracer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_fx" -> "torch.ao.quantization.fx.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_fx" -> "torch.ao.quantization.qconfig_mapping" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_fx" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_fx" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_jit" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_jit" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_jit" -> "torch.ao.quantization.quant_type" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_jit" -> "torch.jit._recursive" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_pt2e" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_pt2e" -> "torch._export.passes.constant_folding" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_pt2e" -> "torch.ao.quantization.pt2e.duplicate_dq_pass" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_pt2e" -> "torch.ao.quantization.pt2e.port_metadata_pass" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_pt2e" -> "torch.ao.quantization.pt2e.prepare" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_pt2e" -> "torch.ao.quantization.pt2e.qat_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_pt2e" -> "torch.ao.quantization.pt2e.representation" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_pt2e" -> "torch.ao.quantization.pt2e.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_pt2e" -> "torch.ao.quantization.quantize_fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_pt2e" -> "torch.ao.quantization.quantizer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_pt2e" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantize_pt2e" -> "torch.fx.passes.infra.pass_manager" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer" -> "torch.ao.quantization.quantizer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.composable_quantizer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.composable_quantizer" -> "torch.ao.quantization.quantizer.quantizer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.embedding_quantizer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.embedding_quantizer" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.embedding_quantizer" -> "torch.ao.quantization.quantizer.quantizer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.embedding_quantizer" -> "torch.ao.quantization.quantizer.xnnpack_quantizer_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.embedding_quantizer" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.quantizer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.quantizer" -> "torch.ao.quantization" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.quantizer" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.quantizer" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.utils" -> "torch.ao.quantization.pt2e.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.utils" -> "torch.ao.quantization.quantizer.quantizer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.x86_inductor_quantizer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.x86_inductor_quantizer" -> "torch.ao.quantization.fake_quantize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.x86_inductor_quantizer" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.x86_inductor_quantizer" -> "torch.ao.quantization.pt2e.graph_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.x86_inductor_quantizer" -> "torch.ao.quantization.quantizer.quantizer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.x86_inductor_quantizer" -> "torch.ao.quantization.quantizer.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.x86_inductor_quantizer" -> "torch.ao.quantization.quantizer.xnnpack_quantizer_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.x86_inductor_quantizer" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.x86_inductor_quantizer" -> "torch.fx.passes.utils.source_matcher_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.x86_inductor_quantizer" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer" -> "torch.ao.quantization.fake_quantize" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer" -> "torch.ao.quantization.quantizer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer" -> "torch.ao.quantization.quantizer.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer" -> "torch.ao.quantization.quantizer.xnnpack_quantizer_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer_utils" -> "torch._export" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer_utils" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer_utils" -> "torch.ao.quantization.fx.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer_utils" -> "torch.ao.quantization.pt2e.export_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer_utils" -> "torch.ao.quantization.pt2e.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer_utils" -> "torch.ao.quantization.quantizer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer_utils" -> "torch.ao.quantization.quantizer.utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer_utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer_utils" -> "torch.fx.passes.utils.matcher_with_name_node_map_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer_utils" -> "torch.fx.passes.utils.source_matcher_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xnnpack_quantizer_utils" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xpu_inductor_quantizer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xpu_inductor_quantizer" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xpu_inductor_quantizer" -> "torch.ao.quantization.quantizer.quantizer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xpu_inductor_quantizer" -> "torch.ao.quantization.quantizer.x86_inductor_quantizer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xpu_inductor_quantizer" -> "torch.ao.quantization.quantizer.xnnpack_quantizer_utils" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.quantizer.xpu_inductor_quantizer" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.stubs" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.stubs" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.utils" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.utils" -> "torch.ao.quantization.quant_type" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.ao.quantization.utils" -> "torch.nn.utils.parametrize" [arrowhead="open", arrowtail="none"];
"torch.autograd" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.autograd" -> "torch._vmap_internals" [arrowhead="open", arrowtail="none"];
"torch.autograd" -> "torch.autograd.anomaly_mode" [arrowhead="open", arrowtail="none"];
"torch.autograd" -> "torch.autograd.function" [arrowhead="open", arrowtail="none"];
"torch.autograd" -> "torch.autograd.grad_mode" [arrowhead="open", arrowtail="none"];
"torch.autograd" -> "torch.autograd.gradcheck" [arrowhead="open", arrowtail="none"];
"torch.autograd" -> "torch.autograd.graph" [arrowhead="open", arrowtail="none"];
"torch.autograd" -> "torch.autograd.variable" [arrowhead="open", arrowtail="none"];
"torch.autograd" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch.autograd" -> "torch.nested._internal.nested_tensor" [arrowhead="open", arrowtail="none"];
"torch.autograd" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch.autograd" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.autograd._functions" -> "torch.autograd._functions.tensor" [arrowhead="open", arrowtail="none"];
"torch.autograd._functions.tensor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.autograd._functions.tensor" -> "torch.autograd.function" [arrowhead="open", arrowtail="none"];
"torch.autograd.anomaly_mode" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.autograd.forward_ad" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.autograd.forward_ad" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch.autograd.forward_ad" -> "torch._decomp.decompositions_for_jvp" [arrowhead="open", arrowtail="none"];
"torch.autograd.forward_ad" -> "torch.autograd.grad_mode" [arrowhead="open", arrowtail="none"];
"torch.autograd.function" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.autograd.function" -> "torch._functorch" [arrowhead="open", arrowtail="none"];
"torch.autograd.function" -> "torch._functorch.autograd_function" [arrowhead="open", arrowtail="none"];
"torch.autograd.function" -> "torch.utils.hooks" [arrowhead="open", arrowtail="none"];
"torch.autograd.functional" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.autograd.functional" -> "torch._vmap_internals" [arrowhead="open", arrowtail="none"];
"torch.autograd.grad_mode" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.autograd.grad_mode" -> "torch.utils._contextlib" [arrowhead="open", arrowtail="none"];
"torch.autograd.gradcheck" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.autograd.gradcheck" -> "torch._vmap_internals" [arrowhead="open", arrowtail="none"];
"torch.autograd.gradcheck" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch.autograd.gradcheck" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.autograd.graph" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.autograd.graph" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.autograd.graph" -> "torch.autograd.variable" [arrowhead="open", arrowtail="none"];
"torch.autograd.graph" -> "torch.sparse._triton_ops" [arrowhead="open", arrowtail="none"];
"torch.autograd.graph" -> "torch.storage" [arrowhead="open", arrowtail="none"];
"torch.autograd.graph" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.autograd.graph" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.autograd.graph" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.autograd.graph" -> "torch.utils.hooks" [arrowhead="open", arrowtail="none"];
"torch.autograd.profiler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.autograd.profiler" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch.autograd.profiler" -> "torch.autograd.profiler_util" [arrowhead="open", arrowtail="none"];
"torch.autograd.profiler" -> "torch.futures" [arrowhead="open", arrowtail="none"];
"torch.autograd.profiler_legacy" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.autograd.profiler_legacy" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch.autograd.profiler_legacy" -> "torch.autograd.profiler_util" [arrowhead="open", arrowtail="none"];
"torch.autograd.profiler_util" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.autograd.profiler_util" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch.autograd.variable" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.backends" -> "torch.backends" [arrowhead="open", arrowtail="none"];
"torch.backends" -> "torch.backends.cpu" [arrowhead="open", arrowtail="none"];
"torch.backends" -> "torch.backends.cuda" [arrowhead="open", arrowtail="none"];
"torch.backends" -> "torch.backends.cudnn" [arrowhead="open", arrowtail="none"];
"torch.backends" -> "torch.backends.cusparselt" [arrowhead="open", arrowtail="none"];
"torch.backends" -> "torch.backends.mha" [arrowhead="open", arrowtail="none"];
"torch.backends" -> "torch.backends.mkl" [arrowhead="open", arrowtail="none"];
"torch.backends" -> "torch.backends.mkldnn" [arrowhead="open", arrowtail="none"];
"torch.backends" -> "torch.backends.mps" [arrowhead="open", arrowtail="none"];
"torch.backends" -> "torch.backends.nnpack" [arrowhead="open", arrowtail="none"];
"torch.backends" -> "torch.backends.openmp" [arrowhead="open", arrowtail="none"];
"torch.backends" -> "torch.backends.quantized" [arrowhead="open", arrowtail="none"];
"torch.backends._coreml.preprocess" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.backends._nnapi.prepare" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.backends._nnapi.prepare" -> "torch.backends._nnapi.serializer" [arrowhead="open", arrowtail="none"];
"torch.backends._nnapi.serializer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.backends.cpu" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.backends.cuda" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.backends.cuda" -> "torch.nn.attention" [arrowhead="open", arrowtail="none"];
"torch.backends.cudnn" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.backends.cudnn" -> "torch.backends" [arrowhead="open", arrowtail="none"];
"torch.backends.cudnn.rnn" -> "torch.autograd.graph.save_on_cpu.__init__.torch.cuda" [arrowhead="open", arrowtail="none"];
"torch.backends.cusparselt" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.backends.mha" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.backends.mkl" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.backends.mkldnn" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.backends.mkldnn" -> "torch.backends" [arrowhead="open", arrowtail="none"];
"torch.backends.mps" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.backends.mps" -> "torch._decomp.decompositions" [arrowhead="open", arrowtail="none"];
"torch.backends.mps" -> "torch._refs" [arrowhead="open", arrowtail="none"];
"torch.backends.mps" -> "torch.library" [arrowhead="open", arrowtail="none"];
"torch.backends.nnpack" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.backends.nnpack" -> "torch.backends" [arrowhead="open", arrowtail="none"];
"torch.backends.openmp" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.backends.opt_einsum" -> "torch.backends" [arrowhead="open", arrowtail="none"];
"torch.backends.quantized" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.backends.xeon.run_cpu" -> "torch.distributed.elastic.multiprocessing" [arrowhead="open", arrowtail="none"];
"torch.backends.xnnpack" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.compiler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.compiler" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch.compiler" -> "torch._dynamo.external_utils" [arrowhead="open", arrowtail="none"];
"torch.compiler" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch.compiler" -> "torch._inductor.cudagraph_trees" [arrowhead="open", arrowtail="none"];
"torch.compiler.config" -> "torch.utils._config_module" [arrowhead="open", arrowtail="none"];
"torch.contrib._tensorboard_vis" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.cpu" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.cpu.amp" -> "torch.cpu.amp.autocast_mode" [arrowhead="open", arrowtail="none"];
"torch.cpu.amp" -> "torch.cpu.amp.grad_scaler" [arrowhead="open", arrowtail="none"];
"torch.cpu.amp.autocast_mode" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.cpu.amp.grad_scaler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.cuda._gpu_trace" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.cuda._memory_viz" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.cuda._memory_viz" -> "torch.profiler._memory_profiler" [arrowhead="open", arrowtail="none"];
"torch.cuda._sanitizer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.cuda._sanitizer" -> "torch.cuda._gpu_trace" [arrowhead="open", arrowtail="none"];
"torch.cuda._sanitizer" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.cuda._sanitizer" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.cuda._sanitizer" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.cuda._utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.cuda._utils" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.cuda.amp" -> "torch.cuda.amp.autocast_mode" [arrowhead="open", arrowtail="none"];
"torch.cuda.amp" -> "torch.cuda.amp.common" [arrowhead="open", arrowtail="none"];
"torch.cuda.amp" -> "torch.cuda.amp.grad_scaler" [arrowhead="open", arrowtail="none"];
"torch.cuda.amp.autocast_mode" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.cuda.amp.common" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.cuda.amp.grad_scaler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.cuda.amp.grad_scaler" -> "torch.amp.grad_scaler" [arrowhead="open", arrowtail="none"];
"torch.cuda.comm" -> "torch.nn.parallel.comm" [arrowhead="open", arrowtail="none"];
"torch.cuda.gds" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.cuda.gds" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.cuda.graphs" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.cuda.graphs" -> "torch.cuda._utils" [arrowhead="open", arrowtail="none"];
"torch.cuda.jiterator" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.cuda.memory" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.cuda.memory" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.cuda.memory" -> "torch.cuda._memory_viz" [arrowhead="open", arrowtail="none"];
"torch.cuda.memory" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.cuda.nccl" -> "torch.autograd.graph.save_on_cpu.__init__.torch.cuda" [arrowhead="open", arrowtail="none"];
"torch.cuda.profiler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.cuda.random" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.cuda.streams" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.cuda.streams" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.cuda.tunable" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed" -> "torch.distributed.remote_device" [arrowhead="open", arrowtail="none"];
"torch.distributed" -> "torch.distributed.rendezvous" [arrowhead="open", arrowtail="none"];
"torch.distributed._checkpointable" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable" -> "torch.distributed._composable.checkpoint_activation" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable" -> "torch.distributed._composable.contract" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable" -> "torch.distributed._composable.replicate" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable.checkpoint_activation" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable.checkpoint_activation" -> "torch.distributed._composable.contract" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable.checkpoint_activation" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable.checkpoint_activation" -> "torch.utils.checkpoint" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable.contract" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable.contract" -> "torch.distributed._composable_state" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable.contract" -> "torch.distributed.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable.contract" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable.fsdp" -> "torch.distributed._composable.fsdp.fully_shard" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable.fsdp" -> "torch.distributed.fsdp" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable.fsdp.fully_shard" -> "torch.distributed.fsdp" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable.replicate" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable.replicate" -> "torch.distributed._composable.contract" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable.replicate" -> "torch.distributed._composable_state" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable.replicate" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable.replicate" -> "torch.distributed.tensor.parallel.ddp" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable.replicate" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable.replicate" -> "torch.nn.parallel" [arrowhead="open", arrowtail="none"];
"torch.distributed._composable_state" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed._functional_collectives" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._functional_collectives" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed._functional_collectives" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed._functional_collectives" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed._functional_collectives" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._functional_collectives" -> "torch.utils._cxx_pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed._functional_collectives_impl" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._functional_collectives_impl" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard" -> "torch.distributed._shard.api" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard._utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard._utils" -> "torch.distributed._shard.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.api" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.api" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.api" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.api" -> "torch.distributed._shard.sharder" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.api" -> "torch.distributed._shard.sharding_plan" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.api" -> "torch.distributed._shard.sharding_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.api" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.api" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.checkpoint" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.checkpoint" -> "torch.distributed.checkpoint" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.common_op_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.common_op_utils" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.common_op_utils" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.common_op_utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.metadata" -> "torch.distributed.remote_device" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.op_registry_utils" -> "torch.distributed._shard.common_op_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_optim" -> "torch.distributed._shard.api" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_optim" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_optim" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_optim.api" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_optim.api" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_optim.api" -> "torch.optim" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor" -> "torch.distributed._shard.api" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor" -> "torch.distributed._shard.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor" -> "torch.distributed._shard.op_registry_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor" -> "torch.distributed._shard.sharded_tensor._ops" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor._ops" -> "torch.distributed._shard.sharded_tensor._ops.binary_cmp" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor._ops" -> "torch.distributed._shard.sharded_tensor._ops.init" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor._ops" -> "torch.distributed._shard.sharded_tensor._ops.misc_ops" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor._ops" -> "torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor._ops" -> "torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding_bag" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor._ops._common" -> "torch.distributed._shard.common_op_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor._ops._common" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor._ops.binary_cmp" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor._ops.binary_cmp" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor._ops.binary_cmp" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor._ops.binary_cmp" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor._ops.init" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor._ops.init" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor._ops.misc_ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor._ops.misc_ops" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor._ops.tensor_ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor._ops.tensor_ops" -> "torch.distributed._shard.common_op_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor._ops.tensor_ops" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor._ops.tensor_ops" -> "torch.distributed._shard.sharded_tensor._ops._common" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.api" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.api" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.api" -> "torch.distributed._shard._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.api" -> "torch.distributed._shard.api" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.api" -> "torch.distributed._shard.sharded_tensor.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.api" -> "torch.distributed._shard.sharded_tensor.reshard" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.api" -> "torch.distributed._shard.sharded_tensor.shard" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.api" -> "torch.distributed._shard.sharded_tensor.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.api" -> "torch.distributed._shard.sharding_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.api" -> "torch.distributed._shard.sharding_spec._internals" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.api" -> "torch.distributed._shard.sharding_spec.api" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.api" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.api" -> "torch.distributed.remote_device" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.api" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.api" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.api" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.logger" -> "torch.distributed._shard.sharded_tensor.logging_handlers" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.metadata" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.metadata" -> "torch.distributed._shard.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.reshard" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.reshard" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.reshard" -> "torch.distributed._shard.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.reshard" -> "torch.distributed._shard.sharded_tensor.shard" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.reshard" -> "torch.distributed._shard.sharding_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.reshard" -> "torch.distributed._shard.sharding_spec._internals" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.reshard" -> "torch.distributed.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.shard" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.shard" -> "torch.distributed._shard.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.shard" -> "torch.distributed.remote_device" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.utils" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.utils" -> "torch.distributed._shard.sharded_tensor.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.utils" -> "torch.distributed._shard.sharded_tensor.shard" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.utils" -> "torch.distributed._shard.sharding_spec._internals" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.utils" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharded_tensor.utils" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharder" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_plan" -> "torch.distributed._shard.api" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_plan.api" -> "torch.distributed._shard.sharder" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_plan.api" -> "torch.distributed._shard.sharding_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_plan.api" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec" -> "torch.distributed._shard.api" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec" -> "torch.distributed._shard.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec" -> "torch.distributed._shard.sharding_spec.chunk_sharding_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec._internals" -> "torch.distributed._shard.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.api" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.api" -> "torch.distributed._shard.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.api" -> "torch.distributed._shard.op_registry_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.api" -> "torch.distributed._shard.sharded_tensor.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.api" -> "torch.distributed._shard.sharding_spec._internals" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.api" -> "torch.distributed._shard.sharding_spec.chunk_sharding_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec" -> "torch.distributed._shard._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec" -> "torch.distributed._shard.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec" -> "torch.distributed._shard.sharded_tensor.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec" -> "torch.distributed._shard.sharded_tensor.shard" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec" -> "torch.distributed._shard.sharded_tensor.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec" -> "torch.distributed._shard.sharding_spec._internals" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec" -> "torch.distributed._shard.sharding_spec.api" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops._common" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops._common" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops._common" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops._common" -> "torch.distributed._shard.sharded_tensor._ops._common" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops._common" -> "torch.distributed._shard.sharding_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops._common" -> "torch.distributed._shard.sharding_spec._internals" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops._common" -> "torch.distributed._shard.sharding_spec.api" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops._common" -> "torch.distributed.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding" -> "torch.distributed._shard.sharding_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding" -> "torch.distributed._shard.sharding_spec.api" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding" -> "torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops._common" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding" -> "torch.distributed.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding_bag" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding_bag" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding_bag" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding_bag" -> "torch.distributed._shard.sharding_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding_bag" -> "torch.distributed._shard.sharding_spec.api" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding_bag" -> "torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops._common" [arrowhead="open", arrowtail="none"];
"torch.distributed._shard.sharding_spec.chunk_sharding_spec_ops.embedding_bag" -> "torch.distributed.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.distributed._sharded_tensor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._sharded_tensor" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._sharding_spec" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._sharding_spec" -> "torch.distributed._shard.sharding_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed._state_dict_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._state_dict_utils" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed._state_dict_utils" -> "torch.distributed._functional_collectives" [arrowhead="open", arrowtail="none"];
"torch.distributed._state_dict_utils" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._state_dict_utils" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed._state_dict_utils" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._state_dict_utils" -> "torch.distributed.tensor._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed._state_dict_utils" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.distributed._symmetric_memory" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._symmetric_memory" -> "torch.distributed._functional_collectives" [arrowhead="open", arrowtail="none"];
"torch.distributed._symmetric_memory" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed._symmetric_memory" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributed._tensor" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._tensor.api" -> "torch.distributed.tensor._api" [arrowhead="open", arrowtail="none"];
"torch.distributed._tensor.placement_types" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed._tensor.placement_types" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools" -> "torch.distributed._tools.fsdp2_mem_tracker" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools" -> "torch.distributed._tools.mem_tracker" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools" -> "torch.distributed._tools.memory_tracker" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools" -> "torch.distributed._tools.mod_tracker" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools" -> "torch.distributed._tools.runtime_estimator" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools" -> "torch.distributed._tools.sac_estimator" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.fsdp2_mem_tracker" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.fsdp2_mem_tracker" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.fsdp2_mem_tracker" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.fsdp2_mem_tracker" -> "torch.distributed._tools.mem_tracker" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.fsdp2_mem_tracker" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.fsdp2_mem_tracker" -> "torch.distributed.fsdp" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.fsdp2_mem_tracker" -> "torch.distributed.fsdp._fully_shard._fsdp_param_group" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.fsdp2_mem_tracker" -> "torch.futures" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.fsdp2_mem_tracker" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.fsdp2_mem_tracker" -> "torch.optim" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.fsdp2_mem_tracker" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.fsdp2_mem_tracker" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.fsdp2_mem_tracker" -> "torch.utils.weak" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.ilp_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.ilp_utils" -> "torch.distributed._tools.mem_tracker" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.ilp_utils" -> "torch.distributed._tools.runtime_estimator" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.ilp_utils" -> "torch.distributed._tools.sac_estimator" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.mem_tracker" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.mem_tracker" -> "torch.distributed._tools.mod_tracker" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.mem_tracker" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.mem_tracker" -> "torch.optim" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.mem_tracker" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.mem_tracker" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.mem_tracker" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.mem_tracker" -> "torch.utils.weak" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.memory_tracker" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.memory_tracker" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.memory_tracker" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.mod_tracker" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.mod_tracker" -> "torch.autograd.graph" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.mod_tracker" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.mod_tracker" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.runtime_estimator" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.runtime_estimator" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.runtime_estimator" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.runtime_estimator" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.runtime_estimator" -> "torch.distributed._tools.mod_tracker" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.runtime_estimator" -> "torch.utils._mode_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.runtime_estimator" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.runtime_estimator" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.runtime_estimator" -> "torch.utils.flop_counter" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.sac_estimator" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.sac_estimator" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.sac_estimator" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.sac_estimator" -> "torch.distributed._tools.mod_tracker" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.sac_estimator" -> "torch.distributed._tools.runtime_estimator" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.sac_estimator" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.sac_estimator" -> "torch.testing._internal.composite_compliance" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.sac_estimator" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.sac_estimator" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.sac_estimator" -> "torch.utils.checkpoint" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.sac_ilp" -> "torch.distributed._tools.ilp_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed._tools.sac_ilp" -> "torch.distributed._tools.sac_estimator" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms" -> "torch.distributed.algorithms.join" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms._checkpoint.checkpoint_wrapper" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms._checkpoint.checkpoint_wrapper" -> "torch.autograd.graph" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms._checkpoint.checkpoint_wrapper" -> "torch.distributed.fsdp._wrap_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms._checkpoint.checkpoint_wrapper" -> "torch.distributed.fsdp.wrap" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms._checkpoint.checkpoint_wrapper" -> "torch.distributed.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms._checkpoint.checkpoint_wrapper" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms._checkpoint.checkpoint_wrapper" -> "torch.utils.checkpoint" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms._comm_hooks.default_hooks" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms._comm_hooks.default_hooks" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms._optimizer_overlap" -> "torch.distributed.algorithms._optimizer_overlap.optimizer_overlap" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms._optimizer_overlap.optimizer_overlap" -> "torch.distributed.algorithms.ddp_comm_hooks.default_hooks" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms._optimizer_overlap.optimizer_overlap" -> "torch.distributed.algorithms.ddp_comm_hooks.optimizer_overlap_hooks" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms._optimizer_overlap.optimizer_overlap" -> "torch.distributed.fsdp" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms._optimizer_overlap.optimizer_overlap" -> "torch.distributed.optim" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms._optimizer_overlap.optimizer_overlap" -> "torch.nn.parallel" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms._optimizer_overlap.optimizer_overlap" -> "torch.optim" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms._quantization.quantization" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms._quantization.quantization" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.ddp_zero_hook" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.ddp_zero_hook" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.ddp_zero_hook" -> "torch.distributed.optim" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.ddp_zero_hook" -> "torch.distributed.optim.zero_redundancy_optimizer" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.ddp_zero_hook" -> "torch.nn.parallel.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.debugging_hooks" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.debugging_hooks" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.default_hooks" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.default_hooks" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.mixed_precision_hooks" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.mixed_precision_hooks" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.mixed_precision_hooks" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.mixed_precision_hooks" -> "torch.distributed.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.optimizer_overlap_hooks" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.optimizer_overlap_hooks" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.optimizer_overlap_hooks" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.post_localSGD_hook" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.post_localSGD_hook" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.powerSGD_hook" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.powerSGD_hook" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.powerSGD_hook" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.powerSGD_hook" -> "torch.utils._typing_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.quantization_hooks" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.quantization_hooks" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.ddp_comm_hooks.quantization_hooks" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.join" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.join" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.model_averaging.averagers" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.model_averaging.averagers" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.model_averaging.averagers" -> "torch.distributed.algorithms.model_averaging.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.model_averaging.averagers" -> "torch.utils._typing_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.model_averaging.hierarchical_model_averager" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.model_averaging.hierarchical_model_averager" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.model_averaging.hierarchical_model_averager" -> "torch.distributed.algorithms.model_averaging.averagers" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.model_averaging.hierarchical_model_averager" -> "torch.distributed.algorithms.model_averaging.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.model_averaging.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.algorithms.model_averaging.utils" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.autograd" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.c10d_logger" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.c10d_logger" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.c10d_logger" -> "torch.distributed.logging_handlers" [arrowhead="open", arrowtail="none"];
"torch.distributed.c10d_logger" -> "torch.monitor" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint" -> "torch.distributed.checkpoint.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint" -> "torch.distributed.checkpoint.default_planner" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint" -> "torch.distributed.checkpoint.filesystem" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint" -> "torch.distributed.checkpoint.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint" -> "torch.distributed.checkpoint.optimizer" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint" -> "torch.distributed.checkpoint.planner" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint" -> "torch.distributed.checkpoint.state_dict_loader" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint" -> "torch.distributed.checkpoint.state_dict_saver" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint" -> "torch.distributed.checkpoint.storage" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._checkpointer" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._checkpointer" -> "torch.distributed.checkpoint.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._checkpointer" -> "torch.distributed.checkpoint.state_dict_loader" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._checkpointer" -> "torch.distributed.checkpoint.state_dict_saver" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._checkpointer" -> "torch.distributed.checkpoint.storage" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._dedup_save_plans" -> "torch.distributed.checkpoint.planner" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._dedup_tensors" -> "torch.distributed.checkpoint.planner" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._fsspec_filesystem" -> "torch.distributed.checkpoint.filesystem" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._nested_dict" -> "torch.distributed.checkpoint._traverse" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._nested_dict" -> "torch.distributed.checkpoint.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._sharded_tensor_utils" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._sharded_tensor_utils" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._sharded_tensor_utils" -> "torch.distributed.checkpoint._traverse" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._sharded_tensor_utils" -> "torch.distributed.checkpoint.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._sharded_tensor_utils" -> "torch.distributed.checkpoint.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._sharded_tensor_utils" -> "torch.distributed.remote_device" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._storage_utils" -> "torch.distributed.checkpoint._fsspec_filesystem" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._storage_utils" -> "torch.distributed.checkpoint.filesystem" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._storage_utils" -> "torch.distributed.checkpoint.storage" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._traverse" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._traverse" -> "torch.distributed._shard.sharded_tensor.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._traverse" -> "torch.distributed.checkpoint.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint._traverse" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.default_planner" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.default_planner" -> "torch.distributed._shard._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.default_planner" -> "torch.distributed.checkpoint._dedup_save_plans" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.default_planner" -> "torch.distributed.checkpoint._nested_dict" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.default_planner" -> "torch.distributed.checkpoint._sharded_tensor_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.default_planner" -> "torch.distributed.checkpoint._traverse" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.default_planner" -> "torch.distributed.checkpoint.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.default_planner" -> "torch.distributed.checkpoint.planner" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.default_planner" -> "torch.distributed.checkpoint.planner_helpers" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.default_planner" -> "torch.distributed.checkpoint.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.default_planner" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.filesystem" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.filesystem" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.filesystem" -> "torch.distributed._shard._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.filesystem" -> "torch.distributed.checkpoint.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.filesystem" -> "torch.distributed.checkpoint.planner" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.filesystem" -> "torch.distributed.checkpoint.staging" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.filesystem" -> "torch.distributed.checkpoint.storage" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.filesystem" -> "torch.distributed.checkpoint.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.filesystem" -> "torch.futures" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.format_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.format_utils" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.format_utils" -> "torch.distributed._shard._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.format_utils" -> "torch.distributed.checkpoint" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.format_utils" -> "torch.distributed.checkpoint._nested_dict" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.format_utils" -> "torch.distributed.checkpoint.default_planner" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.format_utils" -> "torch.distributed.checkpoint.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.format_utils" -> "torch.distributed.checkpoint.planner" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.format_utils" -> "torch.distributed.checkpoint.planner_helpers" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.format_utils" -> "torch.distributed.checkpoint.state_dict_loader" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.format_utils" -> "torch.distributed.checkpoint.state_dict_saver" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.format_utils" -> "torch.distributed.checkpoint.storage" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.format_utils" -> "torch.futures" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.logger" -> "torch.distributed.c10d_logger" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.logger" -> "torch.distributed.checkpoint.logging_handlers" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.logging_handlers" -> "torch.distributed.logging_handlers" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.metadata" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.metadata" -> "torch.distributed.checkpoint.stateful" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.optimizer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.optimizer" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.optimizer" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.optimizer" -> "torch.distributed._shard.sharded_tensor.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.optimizer" -> "torch.distributed._shard.sharded_tensor.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.optimizer" -> "torch.distributed._shard.sharded_tensor.shard" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.optimizer" -> "torch.distributed._shard.sharding_spec.chunk_sharding_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.optimizer" -> "torch.distributed.checkpoint._nested_dict" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.optimizer" -> "torch.distributed.checkpoint.default_planner" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.optimizer" -> "torch.distributed.checkpoint.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.optimizer" -> "torch.distributed.checkpoint.planner" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.optimizer" -> "torch.distributed.checkpoint.planner_helpers" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.optimizer" -> "torch.distributed.checkpoint.state_dict_loader" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.optimizer" -> "torch.distributed.checkpoint.storage" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.optimizer" -> "torch.distributed.checkpoint.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.optimizer" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.optimizer" -> "torch.distributed.fsdp._shard_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.optimizer" -> "torch.distributed.remote_device" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.optimizer" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.planner" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.planner" -> "torch.distributed.checkpoint.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.planner_helpers" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.planner_helpers" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.planner_helpers" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.planner_helpers" -> "torch.distributed._shard.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.planner_helpers" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.planner_helpers" -> "torch.distributed.checkpoint.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.planner_helpers" -> "torch.distributed.checkpoint.planner" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.planner_helpers" -> "torch.distributed.checkpoint.resharding" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.planner_helpers" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.planner_helpers" -> "torch.distributed.tensor._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.resharding" -> "torch.distributed.checkpoint.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.staging" -> "torch.distributed._state_dict_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.staging" -> "torch.distributed.checkpoint.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict" -> "torch.distributed._state_dict_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict" -> "torch.distributed.algorithms._checkpoint.checkpoint_wrapper" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict" -> "torch.distributed.fsdp" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict" -> "torch.distributed.fsdp._common_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict" -> "torch.nn.parallel" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_loader" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_loader" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_loader" -> "torch.distributed.checkpoint._storage_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_loader" -> "torch.distributed.checkpoint.default_planner" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_loader" -> "torch.distributed.checkpoint.default_planner" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_loader" -> "torch.distributed.checkpoint.logger" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_loader" -> "torch.distributed.checkpoint.planner" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_loader" -> "torch.distributed.checkpoint.stateful" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_loader" -> "torch.distributed.checkpoint.storage" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_loader" -> "torch.distributed.checkpoint.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_saver" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_saver" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_saver" -> "torch.distributed._state_dict_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_saver" -> "torch.distributed.checkpoint._storage_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_saver" -> "torch.distributed.checkpoint.default_planner" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_saver" -> "torch.distributed.checkpoint.logger" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_saver" -> "torch.distributed.checkpoint.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_saver" -> "torch.distributed.checkpoint.planner" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_saver" -> "torch.distributed.checkpoint.staging" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_saver" -> "torch.distributed.checkpoint.stateful" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_saver" -> "torch.distributed.checkpoint.storage" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_saver" -> "torch.distributed.checkpoint.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.state_dict_saver" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.storage" -> "torch.distributed.checkpoint.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.storage" -> "torch.distributed.checkpoint.planner" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.storage" -> "torch.futures" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.utils" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.utils" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.utils" -> "torch.distributed._shard.sharded_tensor.shard" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.utils" -> "torch.distributed.checkpoint.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.checkpoint.utils" -> "torch.distributed.checkpoint.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed.collective_utils" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.device_mesh" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.device_mesh" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.device_mesh" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed.device_mesh" -> "torch.utils._typing_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.distributed_c10d" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.distributed_c10d" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch.distributed.distributed_c10d" -> "torch.distributed.c10d_logger" [arrowhead="open", arrowtail="none"];
"torch.distributed.distributed_c10d" -> "torch.distributed.constants" [arrowhead="open", arrowtail="none"];
"torch.distributed.distributed_c10d" -> "torch.distributed.rendezvous" [arrowhead="open", arrowtail="none"];
"torch.distributed.distributed_c10d" -> "torch.monitor" [arrowhead="open", arrowtail="none"];
"torch.distributed.distributed_c10d" -> "torch.utils._typing_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.agent.server" -> "torch.distributed.elastic.agent.server.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.agent.server" -> "torch.distributed.elastic.agent.server.local_elastic_agent" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.agent.server.api" -> "torch.distributed.elastic.events" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.agent.server.api" -> "torch.distributed.elastic.metrics" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.agent.server.api" -> "torch.distributed.elastic.multiprocessing" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.agent.server.api" -> "torch.distributed.elastic.rendezvous" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.agent.server.api" -> "torch.distributed.elastic.utils.logging" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.agent.server.api" -> "torch.distributed.elastic.utils.store" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.agent.server.health_check_server" -> "torch.distributed.elastic.utils.logging" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.agent.server.local_elastic_agent" -> "torch.distributed.elastic" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.agent.server.local_elastic_agent" -> "torch.distributed.elastic.agent.server.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.agent.server.local_elastic_agent" -> "torch.distributed.elastic.agent.server.health_check_server" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.agent.server.local_elastic_agent" -> "torch.distributed.elastic.events" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.agent.server.local_elastic_agent" -> "torch.distributed.elastic.metrics.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.agent.server.local_elastic_agent" -> "torch.distributed.elastic.multiprocessing" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.agent.server.local_elastic_agent" -> "torch.distributed.elastic.timer" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.agent.server.local_elastic_agent" -> "torch.distributed.elastic.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.agent.server.local_elastic_agent" -> "torch.distributed.elastic.utils.logging" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.control_plane" -> "torch.distributed.elastic.multiprocessing.errors" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.events" -> "torch.distributed.elastic.events.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.events" -> "torch.distributed.elastic.events.handlers" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.metrics" -> "torch.distributed.elastic.metrics.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.multiprocessing" -> "torch.distributed.elastic.multiprocessing.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.multiprocessing" -> "torch.distributed.elastic.utils.logging" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.multiprocessing.api" -> "torch.distributed.elastic.multiprocessing.errors" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.multiprocessing.api" -> "torch.distributed.elastic.multiprocessing.redirects" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.multiprocessing.api" -> "torch.distributed.elastic.multiprocessing.subprocess_handler" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.multiprocessing.api" -> "torch.distributed.elastic.multiprocessing.tail_log" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.multiprocessing.api" -> "torch.multiprocessing" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.multiprocessing.errors" -> "torch.distributed.elastic.multiprocessing.errors.error_handler" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.multiprocessing.errors" -> "torch.distributed.elastic.multiprocessing.errors.handlers" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.multiprocessing.errors" -> "torch.distributed.elastic.utils.logging" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.multiprocessing.errors.handlers" -> "torch.distributed.elastic.multiprocessing.errors.error_handler" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.multiprocessing.subprocess_handler" -> "torch.distributed.elastic.multiprocessing.subprocess_handler.handlers" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.multiprocessing.subprocess_handler" -> "torch.distributed.elastic.multiprocessing.subprocess_handler.subprocess_handler" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.multiprocessing.subprocess_handler.handlers" -> "torch.distributed.elastic.multiprocessing.subprocess_handler.subprocess_handler" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous" -> "torch.distributed.elastic.rendezvous.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous" -> "torch.distributed.elastic.rendezvous.registry" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.api" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.api" -> "torch.distributed.elastic.utils.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.c10d_rendezvous_backend" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.c10d_rendezvous_backend" -> "torch.distributed.elastic.events" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.c10d_rendezvous_backend" -> "torch.distributed.elastic.rendezvous.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.c10d_rendezvous_backend" -> "torch.distributed.elastic.rendezvous.dynamic_rendezvous" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.c10d_rendezvous_backend" -> "torch.distributed.elastic.rendezvous.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.dynamic_rendezvous" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.dynamic_rendezvous" -> "torch.distributed.elastic.events" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.dynamic_rendezvous" -> "torch.distributed.elastic.rendezvous.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.dynamic_rendezvous" -> "torch.distributed.elastic.rendezvous.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.etcd_rendezvous" -> "torch.distributed.elastic.rendezvous" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.etcd_rendezvous" -> "torch.distributed.elastic.rendezvous.etcd_store" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.etcd_rendezvous" -> "torch.distributed.elastic.rendezvous.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.etcd_rendezvous_backend" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.etcd_rendezvous_backend" -> "torch.distributed.elastic.rendezvous.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.etcd_rendezvous_backend" -> "torch.distributed.elastic.rendezvous.dynamic_rendezvous" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.etcd_rendezvous_backend" -> "torch.distributed.elastic.rendezvous.etcd_store" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.etcd_rendezvous_backend" -> "torch.distributed.elastic.rendezvous.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.etcd_store" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.registry" -> "torch.distributed.elastic.rendezvous.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.registry" -> "torch.distributed.elastic.rendezvous.c10d_rendezvous_backend" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.registry" -> "torch.distributed.elastic.rendezvous.dynamic_rendezvous" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.registry" -> "torch.distributed.elastic.rendezvous.etcd_rendezvous_backend" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.static_tcp_rendezvous" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.static_tcp_rendezvous" -> "torch.distributed.elastic.rendezvous" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.rendezvous.static_tcp_rendezvous" -> "torch.distributed.elastic.rendezvous.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.timer" -> "torch.distributed.elastic.timer.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.timer" -> "torch.distributed.elastic.timer.file_based_local_timer" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.timer" -> "torch.distributed.elastic.timer.local_timer" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.timer.debug_info_logging" -> "torch.distributed.elastic.utils.logging" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.timer.file_based_local_timer" -> "torch.distributed.elastic.timer.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.timer.file_based_local_timer" -> "torch.distributed.elastic.timer.debug_info_logging" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.timer.file_based_local_timer" -> "torch.distributed.elastic.utils.logging" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.timer.local_timer" -> "torch.distributed.elastic.timer.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.utils" -> "torch.distributed.elastic.utils.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.utils.data" -> "torch.distributed.elastic.utils.data.cycling_iterator" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.utils.data" -> "torch.distributed.elastic.utils.data.elastic_distributed_sampler" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.utils.data.elastic_distributed_sampler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.utils.data.elastic_distributed_sampler" -> "torch.utils.data.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.utils.distributed" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.utils.distributed" -> "torch.distributed.elastic.utils.logging" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.utils.distributed" -> "torch.distributed.elastic.utils.store" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.utils.logging" -> "torch.distributed.elastic.utils.log_level" [arrowhead="open", arrowtail="none"];
"torch.distributed.elastic.utils.store" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp" -> "torch.distributed.fsdp._flat_param" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp" -> "torch.distributed.fsdp._fully_shard" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp" -> "torch.distributed.fsdp.fully_sharded_data_parallel" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._common_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._common_utils" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._common_utils" -> "torch.distributed._composable_state" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._common_utils" -> "torch.distributed.algorithms._checkpoint.checkpoint_wrapper" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._common_utils" -> "torch.distributed.fsdp._flat_param" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._common_utils" -> "torch.distributed.fsdp.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._common_utils" -> "torch.distributed.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._common_utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._common_utils" -> "torch.utils._mode_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._debug_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._debug_utils" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._debug_utils" -> "torch.distributed.fsdp._common_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._debug_utils" -> "torch.distributed.fsdp._flat_param" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._dynamo_utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._exec_order_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._exec_order_utils" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._exec_order_utils" -> "torch.distributed.fsdp._common_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._exec_order_utils" -> "torch.distributed.fsdp._flat_param" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._exec_order_utils" -> "torch.distributed.fsdp._traversal_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._exec_order_utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._flat_param" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._flat_param" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._flat_param" -> "torch.distributed.fsdp._common_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._flat_param" -> "torch.distributed.fsdp._fsdp_extensions" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._flat_param" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._flat_param" -> "torch.distributed.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._flat_param" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._flat_param" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._flat_param" -> "torch.nn.parameter" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._flat_param" -> "torch.testing._internal.distributed.fake_pg" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fsdp_extensions" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fsdp_extensions" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fsdp_extensions" -> "torch.distributed._shard.sharded_tensor.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fsdp_extensions" -> "torch.distributed._shard.sharded_tensor.shard" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fsdp_extensions" -> "torch.distributed.fsdp._shard_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fsdp_extensions" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard" -> "torch.distributed.fsdp._fully_shard._fsdp_api" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard" -> "torch.distributed.fsdp._fully_shard._fully_shard" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_api" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_collectives" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_collectives" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_collectives" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_collectives" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_collectives" -> "torch.distributed.fsdp._fully_shard._fsdp_common" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_collectives" -> "torch.distributed.fsdp._fully_shard._fsdp_param" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_collectives" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_common" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_common" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_common" -> "torch.distributed._composable.contract" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_common" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_common" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_common" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_init" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_init" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_init" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_init" -> "torch.distributed.fsdp._fully_shard._fsdp_common" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_init" -> "torch.distributed.fsdp._fully_shard._fsdp_state" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_init" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_init" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_init" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param" -> "torch.distributed._functional_collectives" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param" -> "torch.distributed.fsdp._fully_shard._fsdp_api" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param" -> "torch.distributed.fsdp._fully_shard._fsdp_common" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param" -> "torch.distributed.tensor.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param_group" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param_group" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param_group" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param_group" -> "torch.distributed.fsdp._common_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param_group" -> "torch.distributed.fsdp._fully_shard._fsdp_api" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param_group" -> "torch.distributed.fsdp._fully_shard._fsdp_collectives" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param_group" -> "torch.distributed.fsdp._fully_shard._fsdp_common" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param_group" -> "torch.distributed.fsdp._fully_shard._fsdp_param" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param_group" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param_group" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param_group" -> "torch.profiler" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param_group" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_param_group" -> "torch.utils.hooks" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_state" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_state" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_state" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_state" -> "torch.autograd.graph" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_state" -> "torch.distributed._composable_state" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_state" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_state" -> "torch.distributed.fsdp._fully_shard._fsdp_api" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_state" -> "torch.distributed.fsdp._fully_shard._fsdp_common" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_state" -> "torch.distributed.fsdp._fully_shard._fsdp_param_group" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_state" -> "torch.distributed.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_state" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fsdp_state" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fully_shard" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fully_shard" -> "torch.distributed._composable" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fully_shard" -> "torch.distributed._composable.contract" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fully_shard" -> "torch.distributed.fsdp._fully_shard._fsdp_api" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fully_shard" -> "torch.distributed.fsdp._fully_shard._fsdp_common" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fully_shard" -> "torch.distributed.fsdp._fully_shard._fsdp_init" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fully_shard" -> "torch.distributed.fsdp._fully_shard._fsdp_param_group" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fully_shard" -> "torch.distributed.fsdp._fully_shard._fsdp_state" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fully_shard" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fully_shard" -> "torch.distributed.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._fully_shard._fully_shard" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._init_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._init_utils" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._init_utils" -> "torch.distributed.algorithms._comm_hooks" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._init_utils" -> "torch.distributed.algorithms._comm_hooks.default_hooks" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._init_utils" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._init_utils" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._init_utils" -> "torch.distributed.fsdp._common_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._init_utils" -> "torch.distributed.fsdp._exec_order_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._init_utils" -> "torch.distributed.fsdp._flat_param" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._init_utils" -> "torch.distributed.fsdp._limiter_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._init_utils" -> "torch.distributed.fsdp._traversal_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._init_utils" -> "torch.distributed.fsdp.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._init_utils" -> "torch.distributed.fsdp.fully_sharded_data_parallel" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._init_utils" -> "torch.distributed.fsdp.wrap" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._init_utils" -> "torch.distributed.tensor.parallel.fsdp" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._init_utils" -> "torch.distributed.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._init_utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._init_utils" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._limiter_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._optim_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._optim_utils" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._optim_utils" -> "torch.distributed._state_dict_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._optim_utils" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._optim_utils" -> "torch.distributed.fsdp._common_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._optim_utils" -> "torch.distributed.fsdp._debug_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._optim_utils" -> "torch.distributed.fsdp._flat_param" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._optim_utils" -> "torch.distributed.fsdp._fsdp_extensions" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._optim_utils" -> "torch.distributed.fsdp._runtime_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._optim_utils" -> "torch.distributed.fsdp._traversal_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._optim_utils" -> "torch.distributed.fsdp.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._optim_utils" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._optim_utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._optim_utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._runtime_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._runtime_utils" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._runtime_utils" -> "torch.autograd.graph" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._runtime_utils" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._runtime_utils" -> "torch.distributed.algorithms._comm_hooks" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._runtime_utils" -> "torch.distributed.fsdp._common_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._runtime_utils" -> "torch.distributed.fsdp._flat_param" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._runtime_utils" -> "torch.distributed.fsdp._init_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._runtime_utils" -> "torch.distributed.fsdp._traversal_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._runtime_utils" -> "torch.distributed.fsdp.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._runtime_utils" -> "torch.distributed.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._runtime_utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._runtime_utils" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._runtime_utils" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._runtime_utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._shard_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._shard_utils" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._shard_utils" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._shard_utils" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._shard_utils" -> "torch.distributed._shard.sharding_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._shard_utils" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._shard_utils" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._state_dict_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._state_dict_utils" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._state_dict_utils" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._state_dict_utils" -> "torch.distributed.algorithms._checkpoint.checkpoint_wrapper" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._state_dict_utils" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._state_dict_utils" -> "torch.distributed.fsdp._common_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._state_dict_utils" -> "torch.distributed.fsdp._debug_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._state_dict_utils" -> "torch.distributed.fsdp._fsdp_extensions" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._state_dict_utils" -> "torch.distributed.fsdp._runtime_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._state_dict_utils" -> "torch.distributed.fsdp._unshard_param_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._state_dict_utils" -> "torch.distributed.fsdp.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._state_dict_utils" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._state_dict_utils" -> "torch.distributed.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._state_dict_utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._state_dict_utils" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._trace_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._trace_utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._traversal_utils" -> "torch.distributed._composable.contract" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._traversal_utils" -> "torch.distributed.fsdp._common_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._traversal_utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._unshard_param_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._unshard_param_utils" -> "torch.distributed.fsdp._common_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._unshard_param_utils" -> "torch.distributed.fsdp._flat_param" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._unshard_param_utils" -> "torch.distributed.fsdp._runtime_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._unshard_param_utils" -> "torch.distributed.fsdp._traversal_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._unshard_param_utils" -> "torch.distributed.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._unshard_param_utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._wrap_utils" -> "torch.distributed.fsdp._common_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._wrap_utils" -> "torch.distributed.fsdp.wrap" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp._wrap_utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.api" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.api" -> "torch.nn.modules.batchnorm" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.fully_sharded_data_parallel" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.fully_sharded_data_parallel" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.fully_sharded_data_parallel" -> "torch.distributed.algorithms._checkpoint.checkpoint_wrapper" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.fully_sharded_data_parallel" -> "torch.distributed.algorithms._comm_hooks" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.fully_sharded_data_parallel" -> "torch.distributed.fsdp._common_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.fully_sharded_data_parallel" -> "torch.distributed.fsdp._dynamo_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.fully_sharded_data_parallel" -> "torch.distributed.fsdp._flat_param" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.fully_sharded_data_parallel" -> "torch.distributed.fsdp._init_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.fully_sharded_data_parallel" -> "torch.distributed.fsdp._optim_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.fully_sharded_data_parallel" -> "torch.distributed.fsdp._runtime_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.fully_sharded_data_parallel" -> "torch.distributed.fsdp._state_dict_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.fully_sharded_data_parallel" -> "torch.distributed.fsdp._traversal_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.fully_sharded_data_parallel" -> "torch.distributed.fsdp._unshard_param_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.fully_sharded_data_parallel" -> "torch.distributed.fsdp._wrap_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.fully_sharded_data_parallel" -> "torch.distributed.fsdp.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.fully_sharded_data_parallel" -> "torch.distributed.fsdp.wrap" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.fully_sharded_data_parallel" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.fully_sharded_data_parallel" -> "torch.distributed.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.fully_sharded_data_parallel" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.sharded_grad_scaler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.sharded_grad_scaler" -> "torch.amp.grad_scaler" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.sharded_grad_scaler" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.sharded_grad_scaler" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed.fsdp.wrap" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.launch" -> "torch.distributed.run" [arrowhead="open", arrowtail="none"];
"torch.distributed.launcher" -> "torch.distributed.launcher.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.launcher.api" -> "torch.distributed.elastic" [arrowhead="open", arrowtail="none"];
"torch.distributed.launcher.api" -> "torch.distributed.elastic.agent.server.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.launcher.api" -> "torch.distributed.elastic.agent.server.local_elastic_agent" [arrowhead="open", arrowtail="none"];
"torch.distributed.launcher.api" -> "torch.distributed.elastic.events" [arrowhead="open", arrowtail="none"];
"torch.distributed.launcher.api" -> "torch.distributed.elastic.metrics" [arrowhead="open", arrowtail="none"];
"torch.distributed.launcher.api" -> "torch.distributed.elastic.multiprocessing" [arrowhead="open", arrowtail="none"];
"torch.distributed.launcher.api" -> "torch.distributed.elastic.multiprocessing.errors" [arrowhead="open", arrowtail="none"];
"torch.distributed.launcher.api" -> "torch.distributed.elastic.rendezvous" [arrowhead="open", arrowtail="none"];
"torch.distributed.launcher.api" -> "torch.distributed.elastic.rendezvous.registry" [arrowhead="open", arrowtail="none"];
"torch.distributed.launcher.api" -> "torch.distributed.elastic.rendezvous.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.launcher.api" -> "torch.distributed.elastic.utils.logging" [arrowhead="open", arrowtail="none"];
"torch.distributed.nn" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.nn" -> "torch.distributed.nn.api.remote_module" [arrowhead="open", arrowtail="none"];
"torch.distributed.nn" -> "torch.distributed.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.distributed.nn.api.remote_module" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.nn.api.remote_module" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.nn.api.remote_module" -> "torch.distributed.nn.jit" [arrowhead="open", arrowtail="none"];
"torch.distributed.nn.api.remote_module" -> "torch.distributed.nn.jit.instantiator" [arrowhead="open", arrowtail="none"];
"torch.distributed.nn.api.remote_module" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.distributed.nn.api.remote_module" -> "torch.distributed.rpc.internal" [arrowhead="open", arrowtail="none"];
"torch.distributed.nn.api.remote_module" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.nn.api.remote_module" -> "torch.nn.parameter" [arrowhead="open", arrowtail="none"];
"torch.distributed.nn.api.remote_module" -> "torch.utils.hooks" [arrowhead="open", arrowtail="none"];
"torch.distributed.nn.functional" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.nn.functional" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch.distributed.nn.functional" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.nn.jit.instantiator" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.nn.jit.instantiator" -> "torch.distributed.nn.jit.templates.remote_module_template" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim" -> "torch.distributed.optim.apply_optimizer_in_backward" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim" -> "torch.distributed.optim.functional_adadelta" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim" -> "torch.distributed.optim.functional_adagrad" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim" -> "torch.distributed.optim.functional_adam" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim" -> "torch.distributed.optim.functional_adamax" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim" -> "torch.distributed.optim.functional_adamw" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim" -> "torch.distributed.optim.functional_rmsprop" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim" -> "torch.distributed.optim.functional_rprop" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim" -> "torch.distributed.optim.functional_sgd" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim" -> "torch.distributed.optim.named_optimizer" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim" -> "torch.distributed.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim" -> "torch.distributed.optim.post_localSGD_optimizer" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim" -> "torch.distributed.optim.zero_redundancy_optimizer" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim" -> "torch.distributed.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim" -> "torch.optim" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim._deprecation_warning" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.apply_optimizer_in_backward" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_adadelta" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_adadelta" -> "torch.distributed.optim._deprecation_warning" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_adadelta" -> "torch.optim._functional" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_adagrad" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_adagrad" -> "torch.distributed.optim._deprecation_warning" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_adagrad" -> "torch.optim._functional" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_adam" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_adam" -> "torch.distributed.optim._deprecation_warning" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_adam" -> "torch.optim._functional" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_adamax" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_adamax" -> "torch.distributed.optim._deprecation_warning" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_adamax" -> "torch.optim._functional" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_adamw" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_adamw" -> "torch.distributed.optim._deprecation_warning" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_adamw" -> "torch.optim._functional" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_rmsprop" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_rmsprop" -> "torch.distributed.optim._deprecation_warning" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_rmsprop" -> "torch.optim._functional" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_rprop" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_rprop" -> "torch.distributed.optim._deprecation_warning" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_rprop" -> "torch.optim._functional" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_sgd" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_sgd" -> "torch.distributed.optim._deprecation_warning" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.functional_sgd" -> "torch.optim._functional" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.named_optimizer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.named_optimizer" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.named_optimizer" -> "torch.distributed.fsdp" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.named_optimizer" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.named_optimizer" -> "torch.optim" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.optimizer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.optimizer" -> "torch.distributed.autograd" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.optimizer" -> "torch.distributed.optim.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.optimizer" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.optimizer" -> "torch.jit" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.optimizer" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.post_localSGD_optimizer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.post_localSGD_optimizer" -> "torch.distributed.algorithms.model_averaging.averagers" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.utils" -> "torch.distributed.optim.functional_adadelta" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.utils" -> "torch.distributed.optim.functional_adagrad" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.utils" -> "torch.distributed.optim.functional_adam" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.utils" -> "torch.distributed.optim.functional_adamax" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.utils" -> "torch.distributed.optim.functional_adamw" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.utils" -> "torch.distributed.optim.functional_rmsprop" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.utils" -> "torch.distributed.optim.functional_rprop" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.utils" -> "torch.distributed.optim.functional_sgd" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.utils" -> "torch.optim" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.zero_redundancy_optimizer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.zero_redundancy_optimizer" -> "torch.distributed.algorithms.join" [arrowhead="open", arrowtail="none"];
"torch.distributed.optim.zero_redundancy_optimizer" -> "torch.optim" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining" -> "torch.distributed.pipelining._IR" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining" -> "torch.distributed.pipelining.schedules" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining" -> "torch.distributed.pipelining.stage" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._IR" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._IR" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._IR" -> "torch.distributed.pipelining._backward" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._IR" -> "torch.distributed.pipelining._unflatten" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._IR" -> "torch.distributed.pipelining._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._IR" -> "torch.distributed.pipelining.stage" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._IR" -> "torch.export" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._IR" -> "torch.export.unflatten" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._IR" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._IR" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._IR" -> "torch.fx.passes.split_module" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._backward" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._backward" -> "torch.autograd.graph" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._backward" -> "torch.distributed.pipelining._debug" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._backward" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._debug" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._unflatten" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._unflatten" -> "torch.export.unflatten" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining._utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.microbatch" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.microbatch" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.microbatch" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.schedules" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.schedules" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.schedules" -> "torch.distributed.fsdp" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.schedules" -> "torch.distributed.pipelining.microbatch" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.schedules" -> "torch.distributed.pipelining.stage" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.schedules" -> "torch.profiler" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.stage" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.stage" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.stage" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.stage" -> "torch.distributed.fsdp" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.stage" -> "torch.distributed.pipelining._backward" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.stage" -> "torch.distributed.pipelining._debug" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.stage" -> "torch.distributed.pipelining._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.stage" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.stage" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.stage" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.stage" -> "torch.nn.parallel" [arrowhead="open", arrowtail="none"];
"torch.distributed.pipelining.stage" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed.remote_device" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.rendezvous" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.rendezvous" -> "torch.distributed.constants" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc" -> "torch.distributed.autograd" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc" -> "torch.distributed.rpc.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc" -> "torch.distributed.rpc.backend_registry" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc" -> "torch.distributed.rpc.options" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc" -> "torch.distributed.rpc.server_process_global_profiler" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc._testing" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc._testing.faulty_agent_backend_registry" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc._testing.faulty_agent_backend_registry" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc._testing.faulty_agent_backend_registry" -> "torch.distributed.rpc.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc.api" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc.api" -> "torch.distributed.rpc._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc.api" -> "torch.distributed.rpc.constants" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc.api" -> "torch.distributed.rpc.internal" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc.api" -> "torch.futures" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc.backend_registry" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc.backend_registry" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc.backend_registry" -> "torch.distributed.rpc._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc.internal" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc.internal" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc.options" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc.rref_proxy" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc.rref_proxy" -> "torch.distributed.rpc.constants" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc.rref_proxy" -> "torch.futures" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc.server_process_global_profiler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.rpc.server_process_global_profiler" -> "torch.autograd.profiler_legacy" [arrowhead="open", arrowtail="none"];
"torch.distributed.run" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.run" -> "torch.distributed.argparse_util" [arrowhead="open", arrowtail="none"];
"torch.distributed.run" -> "torch.distributed.elastic.multiprocessing" [arrowhead="open", arrowtail="none"];
"torch.distributed.run" -> "torch.distributed.elastic.multiprocessing.errors" [arrowhead="open", arrowtail="none"];
"torch.distributed.run" -> "torch.distributed.elastic.rendezvous.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.run" -> "torch.distributed.elastic.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.run" -> "torch.distributed.elastic.utils.logging" [arrowhead="open", arrowtail="none"];
"torch.distributed.run" -> "torch.distributed.launcher.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.run" -> "torch.utils.backend_registration" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor" -> "torch.distributed.tensor._api" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor" -> "torch.utils._foreach_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._api" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._api" -> "torch.distributed.checkpoint.planner_helpers" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._api" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._api" -> "torch.distributed.tensor._collective_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._api" -> "torch.distributed.tensor._dispatch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._api" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._api" -> "torch.distributed.tensor._random" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._api" -> "torch.distributed.tensor._redistribute" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._api" -> "torch.distributed.tensor._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._api" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._api" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._collective_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._collective_utils" -> "torch.distributed._functional_collectives" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._collective_utils" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._collective_utils" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._collective_utils" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._dispatch" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._dispatch" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._dispatch" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._dispatch" -> "torch.distributed.tensor._api" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._dispatch" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._dispatch" -> "torch.distributed.tensor._op_schema" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._dispatch" -> "torch.distributed.tensor._random" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._dispatch" -> "torch.distributed.tensor._redistribute" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._dispatch" -> "torch.distributed.tensor._sharding_prop" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._dispatch" -> "torch.distributed.tensor._tp_conv" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._dispatch" -> "torch.distributed.tensor._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._dispatch" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._dispatch" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._dispatch" -> "torch.utils._cxx_pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._dtensor_spec" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._dtensor_spec" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._dtensor_spec" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._op_schema" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._op_schema" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._op_schema" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._op_schema" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._op_schema" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._op_schema" -> "torch.utils._cxx_pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops" -> "torch.distributed.tensor._ops._conv_ops" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops" -> "torch.distributed.tensor._ops._embedding_ops" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops" -> "torch.distributed.tensor._ops._experimental_ops" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops" -> "torch.distributed.tensor._ops._math_ops" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops" -> "torch.distributed.tensor._ops._matrix_ops" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops" -> "torch.distributed.tensor._ops._pointwise_ops" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops" -> "torch.distributed.tensor._ops._random_ops" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops" -> "torch.distributed.tensor._ops._tensor_ops" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops" -> "torch.distributed.tensor._ops._view_ops" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._common_rules" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._common_rules" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._common_rules" -> "torch.distributed.tensor._op_schema" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._common_rules" -> "torch.distributed.tensor._ops.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._common_rules" -> "torch.distributed.tensor._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._conv_ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._conv_ops" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._conv_ops" -> "torch.distributed.tensor._op_schema" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._conv_ops" -> "torch.distributed.tensor._ops.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._einsum_strategy" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._einsum_strategy" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._einsum_strategy" -> "torch.distributed.tensor._op_schema" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._einsum_strategy" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._embedding_ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._embedding_ops" -> "torch.distributed._functional_collectives" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._embedding_ops" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._embedding_ops" -> "torch.distributed.tensor._op_schema" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._embedding_ops" -> "torch.distributed.tensor._ops.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._embedding_ops" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._experimental_ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._experimental_ops" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._experimental_ops" -> "torch.distributed.tensor._op_schema" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._experimental_ops" -> "torch.distributed.tensor._ops.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._experimental_ops" -> "torch.distributed.tensor.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._experimental_ops" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._math_ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._math_ops" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._math_ops" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._math_ops" -> "torch.distributed.tensor._op_schema" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._math_ops" -> "torch.distributed.tensor._ops.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._math_ops" -> "torch.distributed.tensor._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._math_ops" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._matrix_ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._matrix_ops" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._matrix_ops" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._matrix_ops" -> "torch.distributed.tensor._op_schema" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._matrix_ops" -> "torch.distributed.tensor._ops._einsum_strategy" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._matrix_ops" -> "torch.distributed.tensor._ops.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._matrix_ops" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._pointwise_ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._pointwise_ops" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._pointwise_ops" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._pointwise_ops" -> "torch.distributed.tensor._op_schema" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._pointwise_ops" -> "torch.distributed.tensor._ops.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._pointwise_ops" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._random_ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._random_ops" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._random_ops" -> "torch.distributed.tensor._op_schema" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._random_ops" -> "torch.distributed.tensor._ops.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._tensor_ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._tensor_ops" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._tensor_ops" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._tensor_ops" -> "torch.distributed.tensor._op_schema" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._tensor_ops" -> "torch.distributed.tensor._ops._common_rules" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._tensor_ops" -> "torch.distributed.tensor._ops._embedding_ops" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._tensor_ops" -> "torch.distributed.tensor._ops.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._tensor_ops" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._view_ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._view_ops" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._view_ops" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._view_ops" -> "torch.distributed.tensor._op_schema" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._view_ops" -> "torch.distributed.tensor._ops.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops._view_ops" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops.utils" -> "torch.distributed.tensor._api" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops.utils" -> "torch.distributed.tensor._collective_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops.utils" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops.utils" -> "torch.distributed.tensor._op_schema" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops.utils" -> "torch.distributed.tensor.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._ops.utils" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._random" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._random" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._random" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._random" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._random" -> "torch.distributed.tensor._ops.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._random" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._redistribute" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._redistribute" -> "torch.distributed._functional_collectives" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._redistribute" -> "torch.distributed.tensor._api" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._redistribute" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._redistribute" -> "torch.distributed.tensor.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._redistribute" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._sharding_prop" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._sharding_prop" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._sharding_prop" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._sharding_prop" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._sharding_prop" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._sharding_prop" -> "torch.distributed.tensor._op_schema" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._sharding_prop" -> "torch.distributed.tensor._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._shards_wrapper" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._shards_wrapper" -> "torch.distributed.checkpoint.metadata" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._shards_wrapper" -> "torch.distributed.checkpoint.planner" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._tp_conv" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._tp_conv" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._tp_conv" -> "torch.distributed.tensor._api" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._utils" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._utils" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._utils" -> "torch.distributed.tensor._api" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._utils" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor._utils" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.debug" -> "torch.distributed.tensor._api" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.debug" -> "torch.distributed.tensor.debug._comm_mode" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.debug" -> "torch.distributed.tensor.debug._visualize_sharding" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.debug._comm_mode" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.debug._comm_mode" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.debug._comm_mode" -> "torch.autograd.graph" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.debug._comm_mode" -> "torch.distributed._tools.mod_tracker" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.debug._comm_mode" -> "torch.distributed.tensor._api" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.debug._comm_mode" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.debug._comm_mode" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.debug._comm_mode" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.debug._op_coverage" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.debug._op_coverage" -> "torch._functorch.compilers" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.debug._op_coverage" -> "torch._inductor.decomposition" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.debug._op_coverage" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.debug._op_coverage" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.debug._visualize_sharding" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.debug._visualize_sharding" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.debug._visualize_sharding" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.device_mesh" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental" -> "torch.distributed.tensor._api" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental" -> "torch.distributed.tensor.experimental._attention" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental" -> "torch.distributed.tensor.experimental._func_map" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental" -> "torch.distributed.tensor.experimental._register_sharding" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._attention" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._attention" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._attention" -> "torch.distributed._functional_collectives" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._attention" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._attention" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._attention" -> "torch.distributed.tensor.parallel.style" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._attention" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._attention" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._func_map" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._func_map" -> "torch.distributed._functional_collectives" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._func_map" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._func_map" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._func_map" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._func_map" -> "torch.utils._cxx_pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._register_sharding" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._register_sharding" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._register_sharding" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._register_sharding" -> "torch.distributed.tensor._op_schema" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._register_sharding" -> "torch.distributed.tensor._ops.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._tp_transform" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._tp_transform" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._tp_transform" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._tp_transform" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._tp_transform" -> "torch.distributed.tensor._op_schema" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._tp_transform" -> "torch.distributed.tensor._redistribute" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._tp_transform" -> "torch.distributed.tensor.parallel.style" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._tp_transform" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._tp_transform" -> "torch.export" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._tp_transform" -> "torch.export.exported_program" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._tp_transform" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._tp_transform" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._tp_transform" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._tp_transform" -> "torch.fx.passes.infra.pass_base" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._tp_transform" -> "torch.fx.passes.shape_prop" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._tp_transform" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.experimental._tp_transform" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel" -> "torch.distributed.tensor.parallel.api" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel" -> "torch.distributed.tensor.parallel.loss" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel" -> "torch.distributed.tensor.parallel.style" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel._data_parallel_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel._data_parallel_utils" -> "torch.distributed._functional_collectives" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel._data_parallel_utils" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel._data_parallel_utils" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel._utils" -> "torch._dynamo.external_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel._utils" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel._utils" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel._utils" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.api" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.api" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.api" -> "torch.distributed.tensor.parallel._utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.api" -> "torch.distributed.tensor.parallel.style" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.api" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.ddp" -> "torch.distributed.tensor.parallel._data_parallel_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.ddp" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.fsdp" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.fsdp" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.fsdp" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.fsdp" -> "torch.distributed._shard.sharding_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.fsdp" -> "torch.distributed._shard.sharding_spec.chunk_sharding_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.fsdp" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.fsdp" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.fsdp" -> "torch.distributed.fsdp._common_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.fsdp" -> "torch.distributed.fsdp._fsdp_extensions" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.fsdp" -> "torch.distributed.fsdp._shard_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.fsdp" -> "torch.distributed.remote_device" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.fsdp" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.fsdp" -> "torch.distributed.tensor.parallel._data_parallel_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.input_reshard" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.input_reshard" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.loss" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.loss" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.loss" -> "torch.distributed._functional_collectives" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.loss" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.loss" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.loss" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.loss" -> "torch.distributed.tensor._dtensor_spec" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.loss" -> "torch.distributed.tensor._ops._embedding_ops" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.loss" -> "torch.distributed.tensor._ops._math_ops" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.loss" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.style" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.style" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.style" -> "torch.distributed.tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.parallel.style" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.placement_types" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.placement_types" -> "torch.distributed._functional_collectives" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.placement_types" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.distributed.tensor.placement_types" -> "torch.distributed.tensor._collective_utils" [arrowhead="open", arrowtail="none"];
"torch.distributed.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributed.utils" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.distributed.utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.distributed.utils" -> "torch.nn.utils.rnn" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.bernoulli" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.beta" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.binomial" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.categorical" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.cauchy" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.chi2" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.constraint_registry" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.continuous_bernoulli" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.dirichlet" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.exp_family" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.exponential" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.fishersnedecor" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.gamma" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.geometric" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.gumbel" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.half_cauchy" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.half_normal" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.independent" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.inverse_gamma" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.kl" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.kumaraswamy" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.laplace" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.lkj_cholesky" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.log_normal" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.logistic_normal" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.lowrank_multivariate_normal" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.mixture_same_family" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.multinomial" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.multivariate_normal" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.negative_binomial" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.normal" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.one_hot_categorical" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.pareto" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.poisson" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.relaxed_bernoulli" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.relaxed_categorical" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.studentT" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.transformed_distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.transforms" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.uniform" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.von_mises" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.weibull" [arrowhead="open", arrowtail="none"];
"torch.distributions" -> "torch.distributions.wishart" [arrowhead="open", arrowtail="none"];
"torch.distributions.bernoulli" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.bernoulli" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.bernoulli" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.bernoulli" -> "torch.distributions.exp_family" [arrowhead="open", arrowtail="none"];
"torch.distributions.bernoulli" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.bernoulli" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.distributions.beta" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.beta" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.beta" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.beta" -> "torch.distributions.dirichlet" [arrowhead="open", arrowtail="none"];
"torch.distributions.beta" -> "torch.distributions.exp_family" [arrowhead="open", arrowtail="none"];
"torch.distributions.beta" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.beta" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributions.binomial" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.binomial" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.binomial" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.binomial" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.binomial" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.categorical" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.categorical" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.categorical" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.categorical" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.categorical" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.cauchy" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.cauchy" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.cauchy" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.cauchy" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.cauchy" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.cauchy" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributions.chi2" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.chi2" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.chi2" -> "torch.distributions.gamma" [arrowhead="open", arrowtail="none"];
"torch.distributions.constraint_registry" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.constraint_registry" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.constraint_registry" -> "torch.distributions.transforms" [arrowhead="open", arrowtail="none"];
"torch.distributions.constraints" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.continuous_bernoulli" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.continuous_bernoulli" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.continuous_bernoulli" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.continuous_bernoulli" -> "torch.distributions.exp_family" [arrowhead="open", arrowtail="none"];
"torch.distributions.continuous_bernoulli" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.continuous_bernoulli" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.distributions.continuous_bernoulli" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributions.dirichlet" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.dirichlet" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch.distributions.dirichlet" -> "torch.autograd.function" [arrowhead="open", arrowtail="none"];
"torch.distributions.dirichlet" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.dirichlet" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.dirichlet" -> "torch.distributions.exp_family" [arrowhead="open", arrowtail="none"];
"torch.distributions.dirichlet" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributions.distribution" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.distribution" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.distribution" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.distribution" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.distribution" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributions.exp_family" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.exp_family" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.exponential" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.exponential" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.exponential" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.exponential" -> "torch.distributions.exp_family" [arrowhead="open", arrowtail="none"];
"torch.distributions.exponential" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.exponential" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributions.fishersnedecor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.fishersnedecor" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.fishersnedecor" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.fishersnedecor" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.fishersnedecor" -> "torch.distributions.gamma" [arrowhead="open", arrowtail="none"];
"torch.distributions.fishersnedecor" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.fishersnedecor" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributions.gamma" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.gamma" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.gamma" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.gamma" -> "torch.distributions.exp_family" [arrowhead="open", arrowtail="none"];
"torch.distributions.gamma" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.gamma" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributions.geometric" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.geometric" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.geometric" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.geometric" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.geometric" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.geometric" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.distributions.gumbel" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.gumbel" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.gumbel" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.gumbel" -> "torch.distributions.transformed_distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.gumbel" -> "torch.distributions.transforms" [arrowhead="open", arrowtail="none"];
"torch.distributions.gumbel" -> "torch.distributions.uniform" [arrowhead="open", arrowtail="none"];
"torch.distributions.gumbel" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.half_cauchy" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.half_cauchy" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.half_cauchy" -> "torch.distributions.cauchy" [arrowhead="open", arrowtail="none"];
"torch.distributions.half_cauchy" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.half_cauchy" -> "torch.distributions.transformed_distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.half_cauchy" -> "torch.distributions.transforms" [arrowhead="open", arrowtail="none"];
"torch.distributions.half_normal" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.half_normal" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.half_normal" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.half_normal" -> "torch.distributions.normal" [arrowhead="open", arrowtail="none"];
"torch.distributions.half_normal" -> "torch.distributions.transformed_distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.half_normal" -> "torch.distributions.transforms" [arrowhead="open", arrowtail="none"];
"torch.distributions.independent" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.independent" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.independent" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.independent" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.independent" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.independent" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributions.inverse_gamma" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.inverse_gamma" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.inverse_gamma" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.inverse_gamma" -> "torch.distributions.gamma" [arrowhead="open", arrowtail="none"];
"torch.distributions.inverse_gamma" -> "torch.distributions.transformed_distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.inverse_gamma" -> "torch.distributions.transforms" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.bernoulli" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.beta" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.binomial" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.categorical" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.cauchy" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.continuous_bernoulli" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.dirichlet" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.exp_family" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.exponential" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.gamma" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.geometric" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.gumbel" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.half_normal" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.independent" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.laplace" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.lowrank_multivariate_normal" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.multivariate_normal" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.normal" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.one_hot_categorical" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.pareto" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.poisson" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.transformed_distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.uniform" [arrowhead="open", arrowtail="none"];
"torch.distributions.kl" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.kumaraswamy" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.kumaraswamy" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.kumaraswamy" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.kumaraswamy" -> "torch.distributions.transformed_distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.kumaraswamy" -> "torch.distributions.transforms" [arrowhead="open", arrowtail="none"];
"torch.distributions.kumaraswamy" -> "torch.distributions.uniform" [arrowhead="open", arrowtail="none"];
"torch.distributions.kumaraswamy" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.laplace" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.laplace" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.laplace" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.laplace" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.laplace" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.laplace" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributions.lkj_cholesky" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.lkj_cholesky" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.lkj_cholesky" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.lkj_cholesky" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.lkj_cholesky" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.log_normal" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.log_normal" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.log_normal" -> "torch.distributions.normal" [arrowhead="open", arrowtail="none"];
"torch.distributions.log_normal" -> "torch.distributions.transformed_distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.log_normal" -> "torch.distributions.transforms" [arrowhead="open", arrowtail="none"];
"torch.distributions.logistic_normal" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.logistic_normal" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.logistic_normal" -> "torch.distributions.normal" [arrowhead="open", arrowtail="none"];
"torch.distributions.logistic_normal" -> "torch.distributions.transformed_distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.logistic_normal" -> "torch.distributions.transforms" [arrowhead="open", arrowtail="none"];
"torch.distributions.lowrank_multivariate_normal" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.lowrank_multivariate_normal" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.lowrank_multivariate_normal" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.lowrank_multivariate_normal" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.lowrank_multivariate_normal" -> "torch.distributions.multivariate_normal" [arrowhead="open", arrowtail="none"];
"torch.distributions.lowrank_multivariate_normal" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.lowrank_multivariate_normal" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributions.mixture_same_family" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.mixture_same_family" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.mixture_same_family" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.mixture_same_family" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.multinomial" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.multinomial" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.multinomial" -> "torch.distributions.binomial" [arrowhead="open", arrowtail="none"];
"torch.distributions.multinomial" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.multinomial" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.multinomial" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.multivariate_normal" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.multivariate_normal" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.multivariate_normal" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.multivariate_normal" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.multivariate_normal" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.multivariate_normal" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributions.negative_binomial" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.negative_binomial" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.negative_binomial" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.negative_binomial" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.negative_binomial" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.negative_binomial" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.distributions.normal" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.normal" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.normal" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.normal" -> "torch.distributions.exp_family" [arrowhead="open", arrowtail="none"];
"torch.distributions.normal" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.normal" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributions.one_hot_categorical" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.one_hot_categorical" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.one_hot_categorical" -> "torch.distributions.categorical" [arrowhead="open", arrowtail="none"];
"torch.distributions.one_hot_categorical" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.one_hot_categorical" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.one_hot_categorical" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributions.pareto" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.pareto" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.pareto" -> "torch.distributions.exponential" [arrowhead="open", arrowtail="none"];
"torch.distributions.pareto" -> "torch.distributions.transformed_distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.pareto" -> "torch.distributions.transforms" [arrowhead="open", arrowtail="none"];
"torch.distributions.pareto" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.poisson" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.poisson" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.poisson" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.poisson" -> "torch.distributions.exp_family" [arrowhead="open", arrowtail="none"];
"torch.distributions.poisson" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.relaxed_bernoulli" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.relaxed_bernoulli" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.relaxed_bernoulli" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.relaxed_bernoulli" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.relaxed_bernoulli" -> "torch.distributions.transformed_distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.relaxed_bernoulli" -> "torch.distributions.transforms" [arrowhead="open", arrowtail="none"];
"torch.distributions.relaxed_bernoulli" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.relaxed_bernoulli" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributions.relaxed_categorical" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.relaxed_categorical" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.relaxed_categorical" -> "torch.distributions.categorical" [arrowhead="open", arrowtail="none"];
"torch.distributions.relaxed_categorical" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.relaxed_categorical" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.relaxed_categorical" -> "torch.distributions.transformed_distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.relaxed_categorical" -> "torch.distributions.transforms" [arrowhead="open", arrowtail="none"];
"torch.distributions.relaxed_categorical" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.relaxed_categorical" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributions.studentT" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.studentT" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.studentT" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.studentT" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.studentT" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.studentT" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributions.transformed_distribution" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.transformed_distribution" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.transformed_distribution" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.transformed_distribution" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.transformed_distribution" -> "torch.distributions.independent" [arrowhead="open", arrowtail="none"];
"torch.distributions.transformed_distribution" -> "torch.distributions.transforms" [arrowhead="open", arrowtail="none"];
"torch.distributions.transformed_distribution" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.transformed_distribution" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributions.transforms" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.transforms" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.transforms" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.transforms" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.transforms" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.distributions.uniform" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.uniform" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.uniform" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.uniform" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.uniform" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.uniform" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.distributions.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.utils" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.distributions.utils" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch.distributions.von_mises" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.von_mises" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.von_mises" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.von_mises" -> "torch.distributions.distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.von_mises" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.weibull" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.weibull" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.weibull" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.weibull" -> "torch.distributions.exponential" [arrowhead="open", arrowtail="none"];
"torch.distributions.weibull" -> "torch.distributions.gumbel" [arrowhead="open", arrowtail="none"];
"torch.distributions.weibull" -> "torch.distributions.transformed_distribution" [arrowhead="open", arrowtail="none"];
"torch.distributions.weibull" -> "torch.distributions.transforms" [arrowhead="open", arrowtail="none"];
"torch.distributions.weibull" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.wishart" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.distributions.wishart" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.distributions.wishart" -> "torch.distributions.constraints" [arrowhead="open", arrowtail="none"];
"torch.distributions.wishart" -> "torch.distributions.exp_family" [arrowhead="open", arrowtail="none"];
"torch.distributions.wishart" -> "torch.distributions.multivariate_normal" [arrowhead="open", arrowtail="none"];
"torch.distributions.wishart" -> "torch.distributions.utils" [arrowhead="open", arrowtail="none"];
"torch.distributions.wishart" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.export" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.export" -> "torch._export.serde.schema" [arrowhead="open", arrowtail="none"];
"torch.export" -> "torch._export.serde.serialize" [arrowhead="open", arrowtail="none"];
"torch.export" -> "torch._export.utils" [arrowhead="open", arrowtail="none"];
"torch.export" -> "torch.export._trace" [arrowhead="open", arrowtail="none"];
"torch.export" -> "torch.export.decomp_utils" [arrowhead="open", arrowtail="none"];
"torch.export" -> "torch.export.dynamic_shapes" [arrowhead="open", arrowtail="none"];
"torch.export" -> "torch.export.exported_program" [arrowhead="open", arrowtail="none"];
"torch.export" -> "torch.export.graph_signature" [arrowhead="open", arrowtail="none"];
"torch.export" -> "torch.export.unflatten" [arrowhead="open", arrowtail="none"];
"torch.export" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.export" -> "torch.fx.passes.infra.pass_base" [arrowhead="open", arrowtail="none"];
"torch.export" -> "torch.fx.passes.infra.pass_manager" [arrowhead="open", arrowtail="none"];
"torch.export" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.export._draft_export" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.export._draft_export" -> "torch._export.passes.insert_custom_op_guards" [arrowhead="open", arrowtail="none"];
"torch.export._draft_export" -> "torch.export" [arrowhead="open", arrowtail="none"];
"torch.export._draft_export" -> "torch.export._trace" [arrowhead="open", arrowtail="none"];
"torch.export._draft_export" -> "torch.export.dynamic_shapes" [arrowhead="open", arrowtail="none"];
"torch.export._remove_auto_functionalized_pass" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.export._remove_auto_functionalized_pass" -> "torch._higher_order_ops.auto_functionalize" [arrowhead="open", arrowtail="none"];
"torch.export._remove_auto_functionalized_pass" -> "torch._inductor.fx_passes.post_grad" [arrowhead="open", arrowtail="none"];
"torch.export._remove_auto_functionalized_pass" -> "torch.export" [arrowhead="open", arrowtail="none"];
"torch.export._remove_effect_tokens_pass" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.export._remove_effect_tokens_pass" -> "torch._higher_order_ops.effects" [arrowhead="open", arrowtail="none"];
"torch.export._remove_effect_tokens_pass" -> "torch.export.exported_program" [arrowhead="open", arrowtail="none"];
"torch.export._remove_effect_tokens_pass" -> "torch.export.graph_signature" [arrowhead="open", arrowtail="none"];
"torch.export._safeguard" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.export._safeguard" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch.export._safeguard" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch.export._swap" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.export._swap" -> "torch.export.exported_program" [arrowhead="open", arrowtail="none"];
"torch.export._swap" -> "torch.export.unflatten" [arrowhead="open", arrowtail="none"];
"torch.export._swap" -> "torch.export.unflatten" [arrowhead="open", arrowtail="none"];
"torch.export._swap" -> "torch.fx._pytree" [arrowhead="open", arrowtail="none"];
"torch.export._swap" -> "torch.fx.passes.tools_common" [arrowhead="open", arrowtail="none"];
"torch.export._swap" -> "torch.fx.passes.utils.fuser_utils" [arrowhead="open", arrowtail="none"];
"torch.export._swap" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._export.db.logging" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._export.non_strict_utils" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._export.passes.collect_tracepoints_pass" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._export.passes.lift_constants_pass" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._export.passes.replace_autocast_with_hop_pass" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._export.passes.replace_set_grad_with_hop_pass" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._export.utils" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._export.verifier" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._export.wrappers" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._functorch._aot_autograd.input_output_analysis" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._functorch._aot_autograd.schemas" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._functorch._aot_autograd.traced_function_transforms" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._functorch._aot_autograd.utils" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._functorch.aot_autograd" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._library.fake_class_registry" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch.export._safeguard" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch.export._unlift" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch.export.dynamic_shapes" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch.export.exported_program" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch.export.exported_program" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch.export.graph_signature" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch.jit._trace" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.export._trace" -> "torch.utils._sympy.value_ranges" [arrowhead="open", arrowtail="none"];
"torch.export._tree_utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.export._unlift" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.export._unlift" -> "torch._export.utils" [arrowhead="open", arrowtail="none"];
"torch.export._unlift" -> "torch.export._remove_effect_tokens_pass" [arrowhead="open", arrowtail="none"];
"torch.export._unlift" -> "torch.export._tree_utils" [arrowhead="open", arrowtail="none"];
"torch.export._unlift" -> "torch.export.exported_program" [arrowhead="open", arrowtail="none"];
"torch.export._unlift" -> "torch.export.unflatten" [arrowhead="open", arrowtail="none"];
"torch.export._unlift" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.export._unlift" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.export.decomp_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.export.decomp_utils" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch.export.decomp_utils" -> "torch._export.utils" [arrowhead="open", arrowtail="none"];
"torch.export.dynamic_shapes" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.export.dynamic_shapes" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch.export.dynamic_shapes" -> "torch.export.exported_program" [arrowhead="open", arrowtail="none"];
"torch.export.dynamic_shapes" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch.export.dynamic_shapes" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.export.dynamic_shapes" -> "torch.utils._sympy.numbers" [arrowhead="open", arrowtail="none"];
"torch.export.dynamic_shapes" -> "torch.utils._sympy.solve" [arrowhead="open", arrowtail="none"];
"torch.export.dynamic_shapes" -> "torch.utils._sympy.value_ranges" [arrowhead="open", arrowtail="none"];
"torch.export.experimental" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.export.experimental" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch.export.experimental" -> "torch.export.exported_program" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch._export.error" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch._export.non_strict_utils" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch._export.passes._node_metadata_hook" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch._export.utils" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch._export.verifier" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch._functorch._aot_autograd.input_output_analysis" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch._functorch.aot_autograd" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch._library.fake_class_registry" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch._subclasses.fake_impls" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch.export._trace" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch.export._tree_utils" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch.export._unlift" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch.export.decomp_utils" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch.export.graph_signature" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch.fx._utils" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch.fx.immutable_collections" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch.fx.passes.infra.pass_base" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch.fx.passes.infra.pass_manager" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch.fx.passes.runtime_assert" [arrowhead="open", arrowtail="none"];
"torch.export.exported_program" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.export.graph_signature" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.export.graph_signature" -> "torch._library.fake_class_registry" [arrowhead="open", arrowtail="none"];
"torch.export.graph_signature" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.export.graph_signature" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.export.graph_signature" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.export.passes" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.export.passes" -> "torch.export.exported_program" [arrowhead="open", arrowtail="none"];
"torch.export.passes" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.export.unflatten" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.export.unflatten" -> "torch._export.passes._node_metadata_hook" [arrowhead="open", arrowtail="none"];
"torch.export.unflatten" -> "torch._export.utils" [arrowhead="open", arrowtail="none"];
"torch.export.unflatten" -> "torch._library.fake_class_registry" [arrowhead="open", arrowtail="none"];
"torch.export.unflatten" -> "torch.export._remove_effect_tokens_pass" [arrowhead="open", arrowtail="none"];
"torch.export.unflatten" -> "torch.export._tree_utils" [arrowhead="open", arrowtail="none"];
"torch.export.unflatten" -> "torch.export.exported_program" [arrowhead="open", arrowtail="none"];
"torch.export.unflatten" -> "torch.fx._pytree" [arrowhead="open", arrowtail="none"];
"torch.export.unflatten" -> "torch.fx._symbolic_trace" [arrowhead="open", arrowtail="none"];
"torch.export.unflatten" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.export.unflatten" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.fft" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fft" -> "torch._torch_docs" [arrowhead="open", arrowtail="none"];
"torch.func" -> "torch._functorch.apis" [arrowhead="open", arrowtail="none"];
"torch.func" -> "torch._functorch.batch_norm_replacement" [arrowhead="open", arrowtail="none"];
"torch.func" -> "torch._functorch.eager_transforms" [arrowhead="open", arrowtail="none"];
"torch.func" -> "torch._functorch.functional_call" [arrowhead="open", arrowtail="none"];
"torch.functional" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.functional" -> "torch._VF" [arrowhead="open", arrowtail="none"];
"torch.functional" -> "torch._jit_internal" [arrowhead="open", arrowtail="none"];
"torch.functional" -> "torch._lowrank" [arrowhead="open", arrowtail="none"];
"torch.functional" -> "torch.backends.opt_einsum" [arrowhead="open", arrowtail="none"];
"torch.functional" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch.functional" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.functional" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch.futures" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.futures" -> "torch.__future__" [arrowhead="open", arrowtail="none"];
"torch.fx" -> "torch.fx._symbolic_trace" [arrowhead="open", arrowtail="none"];
"torch.fx" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.fx" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx" -> "torch.fx.interpreter" [arrowhead="open", arrowtail="none"];
"torch.fx" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx" -> "torch.fx.proxy" [arrowhead="open", arrowtail="none"];
"torch.fx" -> "torch.fx.subgraph_rewriter" [arrowhead="open", arrowtail="none"];
"torch.fx._lazy_graph_module" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx._lazy_graph_module" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx._lazy_graph_module" -> "torch.package" [arrowhead="open", arrowtail="none"];
"torch.fx._pytree" -> "torch.return_types" [arrowhead="open", arrowtail="none"];
"torch.fx._pytree" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.fx._symbolic_trace" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx._symbolic_trace" -> "torch._library.fake_class_registry" [arrowhead="open", arrowtail="none"];
"torch.fx._symbolic_trace" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx._symbolic_trace" -> "torch.fx._lazy_graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx._symbolic_trace" -> "torch.fx._lazy_graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx._symbolic_trace" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.fx._symbolic_trace" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx._symbolic_trace" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx._symbolic_trace" -> "torch.fx.proxy" [arrowhead="open", arrowtail="none"];
"torch.fx._symbolic_trace" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.fx._utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx._utils" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch.fx.annotate" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.annotate" -> "torch.fx.proxy" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental._backward_state" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental._config" -> "torch.utils._config_module" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.accelerator_partitioner" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.accelerator_partitioner" -> "torch.fx.experimental.partitioner_utils" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.accelerator_partitioner" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.accelerator_partitioner" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.accelerator_partitioner" -> "torch.fx.passes.graph_manipulation" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.accelerator_partitioner" -> "torch.fx.passes.split_module" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.const_fold" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.const_fold" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.const_fold" -> "torch.fx.passes.split_module" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.debug" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.graph_gradual_typechecker" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.graph_gradual_typechecker" -> "torch.fx.experimental.refinement_types" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.graph_gradual_typechecker" -> "torch.fx.experimental.unification" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.graph_gradual_typechecker" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.graph_gradual_typechecker" -> "torch.fx.tensor_type" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.graph_gradual_typechecker" -> "torch.nn.modules.batchnorm" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.graph_gradual_typechecker" -> "torch.nn.modules.conv" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.merge_matmul" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.merge_matmul" -> "torch.fx._symbolic_trace" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.merge_matmul" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.merge_matmul" -> "torch.fx.passes.tools_common" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.meta_tracer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.constraint" -> "torch.fx.experimental.migrate_gradual_types.operation" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.constraint" -> "torch.fx.tensor_type" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.constraint_generator" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.constraint_generator" -> "torch.fx._symbolic_trace" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.constraint_generator" -> "torch.fx.experimental.migrate_gradual_types.constraint" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.constraint_generator" -> "torch.fx.experimental.migrate_gradual_types.operation" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.constraint_generator" -> "torch.fx.experimental.migrate_gradual_types.util" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.constraint_generator" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.constraint_generator" -> "torch.fx.tensor_type" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.constraint_generator" -> "torch.nn.modules.batchnorm" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.constraint_generator" -> "torch.nn.modules.conv" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.constraint_transformation" -> "torch.fx.experimental.migrate_gradual_types.constraint" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.constraint_transformation" -> "torch.fx.experimental.migrate_gradual_types.constraint_generator" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.constraint_transformation" -> "torch.fx.experimental.migrate_gradual_types.operation" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.constraint_transformation" -> "torch.fx.experimental.migrate_gradual_types.util" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.constraint_transformation" -> "torch.fx.tensor_type" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.transform_to_z3" -> "torch.fx.experimental.migrate_gradual_types.constraint" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.transform_to_z3" -> "torch.fx.experimental.migrate_gradual_types.constraint_generator" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.transform_to_z3" -> "torch.fx.experimental.migrate_gradual_types.constraint_transformation" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.transform_to_z3" -> "torch.fx.experimental.migrate_gradual_types.operation" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.transform_to_z3" -> "torch.fx.experimental.migrate_gradual_types.z3_types" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.transform_to_z3" -> "torch.fx.tensor_type" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.util" -> "torch.fx.experimental.migrate_gradual_types.constraint" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.migrate_gradual_types.util" -> "torch.fx.experimental.migrate_gradual_types.operation" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.normalize" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.normalize" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.normalize" -> "torch.fx.experimental.schema_type_annotation" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.normalize" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.normalize" -> "torch.fx.operator_schemas" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.optimization" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.optimization" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.optimization" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.optimization" -> "torch.fx.passes.shape_prop" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.optimization" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.optimization" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.optimization" -> "torch.nn.utils.fusion" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.optimization" -> "torch.utils.mkldnn" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.partitioner_utils" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch._dynamo.source" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch._functorch.config" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch._inductor.compiler_bisector" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch._inductor.fx_passes.dedupe_symint_uses" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch._library.fake_class_registry" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch._subclasses.fake_impls" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch._subclasses.meta_utils" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch.fx.experimental._backward_state" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch.fx.experimental.sym_node" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch.fx.passes.shape_prop" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch.fx.traceback" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch.utils._stats" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch.utils._thunk" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch.utils._traceback" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.proxy_tensor" -> "torch.utils.weak" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.recording" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.recording" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.recording" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.rewriter" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.rewriter" -> "torch._sources" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.rewriter" -> "torch.fx._symbolic_trace" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.rewriter" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.schema_type_annotation" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.schema_type_annotation" -> "torch._jit_internal" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.schema_type_annotation" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.schema_type_annotation" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.schema_type_annotation" -> "torch.fx.operator_schemas" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.sym_node" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.sym_node" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.sym_node" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.sym_node" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.sym_node" -> "torch.utils._sympy.functions" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch._dynamo.eval_frame" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch._dynamo.source" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch._dynamo.variables.builder" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch._logging.structured" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch._subclasses.meta_utils" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch.export.dynamic_shapes" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch.fx.experimental" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch.fx.experimental._config" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch.fx.experimental.recording" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch.fx.experimental.sym_node" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch.fx.experimental.validator" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch.fx.traceback" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch.utils._ordered_set" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch.utils._sympy.functions" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch.utils._sympy.numbers" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch.utils._sympy.printers" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch.utils._sympy.singleton_int" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch.utils._sympy.solve" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch.utils._sympy.symbol" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch.utils._sympy.value_ranges" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.symbolic_shapes" -> "torch.utils._traceback" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification" -> "torch.fx.experimental.unification.core" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification" -> "torch.fx.experimental.unification.more" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification" -> "torch.fx.experimental.unification.variable" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.core" -> "torch.fx.experimental.unification.dispatch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.core" -> "torch.fx.experimental.unification.unification_tools" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.core" -> "torch.fx.experimental.unification.utils" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.core" -> "torch.fx.experimental.unification.variable" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.dispatch" -> "torch.fx.experimental.unification.multipledispatch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.match" -> "torch.fx.experimental.unification.core" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.match" -> "torch.fx.experimental.unification.unification_tools" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.match" -> "torch.fx.experimental.unification.utils" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.match" -> "torch.fx.experimental.unification.variable" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.more" -> "torch.fx.experimental.unification.core" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.more" -> "torch.fx.experimental.unification.dispatch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.multipledispatch" -> "torch.fx.experimental.unification.core" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.multipledispatch" -> "torch.fx.experimental.unification.multipledispatch.dispatcher" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.multipledispatch.conflict" -> "torch.fx.experimental.unification.multipledispatch.utils" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.multipledispatch.conflict" -> "torch.fx.experimental.unification.multipledispatch.variadic" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.multipledispatch.core" -> "torch.fx.experimental.unification.multipledispatch.dispatcher" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.multipledispatch.dispatcher" -> "torch.fx.experimental.unification.multipledispatch.conflict" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.multipledispatch.dispatcher" -> "torch.fx.experimental.unification.multipledispatch.utils" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.multipledispatch.dispatcher" -> "torch.fx.experimental.unification.multipledispatch.variadic" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.multipledispatch.variadic" -> "torch.fx.experimental.unification.multipledispatch.utils" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.variable" -> "torch.fx.experimental.unification.dispatch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unification.variable" -> "torch.fx.experimental.unification.utils" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unify_refinements" -> "torch.fx.experimental.graph_gradual_typechecker" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unify_refinements" -> "torch.fx.experimental.unification" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.unify_refinements" -> "torch.fx.tensor_type" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.validator" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.validator" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.validator" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.validator" -> "torch.fx.experimental" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.validator" -> "torch.fx.experimental._config" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.validator" -> "torch.fx.experimental.recording" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.validator" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.validator" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.validator" -> "torch.fx.traceback" [arrowhead="open", arrowtail="none"];
"torch.fx.experimental.validator" -> "torch.utils._sympy.interp" [arrowhead="open", arrowtail="none"];
"torch.fx.graph" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.graph" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.graph" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch.fx.graph" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.graph" -> "torch.fx.passes.shape_prop" [arrowhead="open", arrowtail="none"];
"torch.fx.graph" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.fx.graph_module" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.graph_module" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.graph_module" -> "torch.fx._lazy_graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx.graph_module" -> "torch.fx._symbolic_trace" [arrowhead="open", arrowtail="none"];
"torch.fx.graph_module" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.fx.graph_module" -> "torch.fx.traceback" [arrowhead="open", arrowtail="none"];
"torch.fx.graph_module" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.fx.graph_module" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.fx.graph_module" -> "torch.package" [arrowhead="open", arrowtail="none"];
"torch.fx.immutable_collections" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.immutable_collections" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.fx.interpreter" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.interpreter" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.interpreter" -> "torch.fx._lazy_graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx.interpreter" -> "torch.fx._symbolic_trace" [arrowhead="open", arrowtail="none"];
"torch.fx.interpreter" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.fx.interpreter" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx.interpreter" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.interpreter" -> "torch.fx.proxy" [arrowhead="open", arrowtail="none"];
"torch.fx.interpreter" -> "torch.fx.traceback" [arrowhead="open", arrowtail="none"];
"torch.fx.interpreter" -> "torch.hub" [arrowhead="open", arrowtail="none"];
"torch.fx.node" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.node" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.node" -> "torch.fx.immutable_collections" [arrowhead="open", arrowtail="none"];
"torch.fx.node" -> "torch.fx.operator_schemas" [arrowhead="open", arrowtail="none"];
"torch.fx.operator_schemas" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.operator_schemas" -> "torch._jit_internal" [arrowhead="open", arrowtail="none"];
"torch.fx.operator_schemas" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch.fx.operator_schemas" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes._tensorify_python_scalars" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.passes._tensorify_python_scalars" -> "torch._dynamo.exc" [arrowhead="open", arrowtail="none"];
"torch.fx.passes._tensorify_python_scalars" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none"];
"torch.fx.passes._tensorify_python_scalars" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch.fx.passes._tensorify_python_scalars" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch.fx.passes._tensorify_python_scalars" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.fx.passes._tensorify_python_scalars" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch.fx.passes._tensorify_python_scalars" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.fx.passes._tensorify_python_scalars" -> "torch.fx._utils" [arrowhead="open", arrowtail="none"];
"torch.fx.passes._tensorify_python_scalars" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch.fx.passes._tensorify_python_scalars" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx.passes._tensorify_python_scalars" -> "torch.fx.passes.runtime_assert" [arrowhead="open", arrowtail="none"];
"torch.fx.passes._tensorify_python_scalars" -> "torch.fx.proxy" [arrowhead="open", arrowtail="none"];
"torch.fx.passes._tensorify_python_scalars" -> "torch.utils._sympy.interp" [arrowhead="open", arrowtail="none"];
"torch.fx.passes._tensorify_python_scalars" -> "torch.utils._sympy.reference" [arrowhead="open", arrowtail="none"];
"torch.fx.passes._tensorify_python_scalars" -> "torch.utils._sympy.symbol" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.annotate_getitem_nodes" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.backends.cudagraphs" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.backends.cudagraphs" -> "torch.fx.passes.fake_tensor_prop" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.backends.cudagraphs" -> "torch.fx.passes.infra.partitioner" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.backends.cudagraphs" -> "torch.fx.passes.operator_support" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.backends.cudagraphs" -> "torch.fx.passes.tools_common" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.backends.cudagraphs" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.backends.cudagraphs" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.dialect.common.cse_pass" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.dialect.common.cse_pass" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.dialect.common.cse_pass" -> "torch.fx.passes.infra.pass_base" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.dialect.common.cse_pass" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.fake_tensor_prop" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.fake_tensor_prop" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.fake_tensor_prop" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.fake_tensor_prop" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.fake_tensor_prop" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.fake_tensor_prop" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.graph_drawer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.graph_drawer" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.graph_drawer" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.graph_drawer" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.graph_drawer" -> "torch.fx.operator_schemas" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.graph_drawer" -> "torch.fx.passes.shape_prop" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.graph_manipulation" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.graph_manipulation" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.graph_manipulation" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.graph_manipulation" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.graph_manipulation" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.graph_manipulation" -> "torch.fx.passes.shape_prop" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.graph_transform_observer" -> "torch._inductor.compiler_bisector" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.graph_transform_observer" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.graph_transform_observer" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.graph_transform_observer" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.graph_transform_observer" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.graph_transform_observer" -> "torch.fx.passes.graph_drawer" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.infra.partitioner" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.infra.partitioner" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.infra.partitioner" -> "torch.fx.passes.operator_support" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.infra.partitioner" -> "torch.fx.passes.utils.fuser_utils" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.infra.pass_base" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.infra.pass_base" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.infra.pass_manager" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.infra.pass_manager" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.infra.pass_manager" -> "torch.fx.passes.infra.pass_base" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.infra.pass_manager" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.net_min_base" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.net_min_base" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.net_min_base" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.net_min_base" -> "torch.fx.passes.shape_prop" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.net_min_base" -> "torch.fx.passes.split_utils" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.net_min_base" -> "torch.fx.passes.tools_common" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.operator_support" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.operator_support" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.operator_support" -> "torch.fx.passes.shape_prop" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.operator_support" -> "torch.fx.passes.tools_common" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.param_fetch" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.param_fetch" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.param_fetch" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.param_fetch" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.reinplace" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.reinplace" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.reinplace" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.reinplace" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.reinplace" -> "torch.multiprocessing.reductions" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.reinplace" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.reinplace" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.runtime_assert" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.runtime_assert" -> "torch._export.passes._node_metadata_hook" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.runtime_assert" -> "torch._subclasses.meta_utils" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.runtime_assert" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.runtime_assert" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.runtime_assert" -> "torch.fx._utils" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.runtime_assert" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.runtime_assert" -> "torch.fx.experimental.sym_node" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.runtime_assert" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.runtime_assert" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.runtime_assert" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.runtime_assert" -> "torch.utils._sympy.interp" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.runtime_assert" -> "torch.utils._sympy.numbers" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.runtime_assert" -> "torch.utils._sympy.reference" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.runtime_assert" -> "torch.utils._sympy.value_ranges" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.shape_prop" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.shape_prop" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.shape_prop" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.shape_prop" -> "torch._guards" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.shape_prop" -> "torch._subclasses.meta_utils" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.shape_prop" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.shape_prop" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.split_module" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.split_module" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.split_module" -> "torch.fx._utils" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.split_module" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.split_module" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.split_module" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.split_utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.split_utils" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.split_utils" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.split_utils" -> "torch.fx.passes.tools_common" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.split_utils" -> "torch.fx.passes.utils" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.splitter_base" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.splitter_base" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.splitter_base" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.splitter_base" -> "torch.fx.passes.graph_drawer" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.splitter_base" -> "torch.fx.passes.graph_manipulation" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.splitter_base" -> "torch.fx.passes.operator_support" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.splitter_base" -> "torch.fx.passes.shape_prop" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.splitter_base" -> "torch.fx.passes.split_utils" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.splitter_base" -> "torch.fx.passes.tools_common" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.tools_common" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.tools_common" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.tools_common" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils" -> "torch.fx.passes.utils.common" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.common" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.common" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.common" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.common" -> "torch.fx.passes.utils.matcher_utils" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.common" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.fuser_utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.fuser_utils" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.fuser_utils" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.fuser_utils" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.fuser_utils" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.fuser_utils" -> "torch.fx.passes.tools_common" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.fuser_utils" -> "torch.fx.passes.utils" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.matcher_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.matcher_utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.matcher_utils" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.matcher_utils" -> "torch.fx.passes.utils.fuser_utils" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.matcher_with_name_node_map_utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.matcher_with_name_node_map_utils" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.matcher_with_name_node_map_utils" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.matcher_with_name_node_map_utils" -> "torch.fx.passes.utils.matcher_utils" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.matcher_with_name_node_map_utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.source_matcher_utils" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.source_matcher_utils" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.fx.passes.utils.source_matcher_utils" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.proxy" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.proxy" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.proxy" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.fx.proxy" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.proxy" -> "torch.fx.operator_schemas" [arrowhead="open", arrowtail="none"];
"torch.fx.proxy" -> "torch.fx.traceback" [arrowhead="open", arrowtail="none"];
"torch.fx.proxy" -> "torch.utils._traceback" [arrowhead="open", arrowtail="none"];
"torch.fx.subgraph_rewriter" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.fx.subgraph_rewriter" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.subgraph_rewriter" -> "torch.fx._symbolic_trace" [arrowhead="open", arrowtail="none"];
"torch.fx.subgraph_rewriter" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.fx.subgraph_rewriter" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.fx.subgraph_rewriter" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.fx.subgraph_rewriter" -> "torch.fx.passes.utils.matcher_utils" [arrowhead="open", arrowtail="none"];
"torch.fx.tensor_type" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.tensor_type" -> "torch.fx.experimental.unification" [arrowhead="open", arrowtail="none"];
"torch.fx.traceback" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.fx.traceback" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.fx.traceback" -> "torch.fx.node" [arrowhead="open", arrowtail="none"];
"torch.hub" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.hub" -> "torch.serialization" [arrowhead="open", arrowtail="none"];
"torch.jit" -> "torch._jit_internal" [arrowhead="open", arrowtail="none"];
"torch.jit" -> "torch.jit._async" [arrowhead="open", arrowtail="none"];
"torch.jit" -> "torch.jit._await" [arrowhead="open", arrowtail="none"];
"torch.jit" -> "torch.jit._decomposition_utils" [arrowhead="open", arrowtail="none"];
"torch.jit" -> "torch.jit._freeze" [arrowhead="open", arrowtail="none"];
"torch.jit" -> "torch.jit._fuser" [arrowhead="open", arrowtail="none"];
"torch.jit" -> "torch.jit._ir_utils" [arrowhead="open", arrowtail="none"];
"torch.jit" -> "torch.jit._script" [arrowhead="open", arrowtail="none"];
"torch.jit" -> "torch.jit._serialization" [arrowhead="open", arrowtail="none"];
"torch.jit" -> "torch.jit._trace" [arrowhead="open", arrowtail="none"];
"torch.jit" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.jit._async" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit._async" -> "torch._jit_internal" [arrowhead="open", arrowtail="none"];
"torch.jit._async" -> "torch.jit._builtins" [arrowhead="open", arrowtail="none"];
"torch.jit._async" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.jit._await" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit._await" -> "torch._jit_internal" [arrowhead="open", arrowtail="none"];
"torch.jit._await" -> "torch.jit._builtins" [arrowhead="open", arrowtail="none"];
"torch.jit._await" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.jit._builtins" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit._builtins" -> "torch.backends.cudnn" [arrowhead="open", arrowtail="none"];
"torch.jit._builtins" -> "torch.distributed.autograd" [arrowhead="open", arrowtail="none"];
"torch.jit._builtins" -> "torch.nn.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.jit._check" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit._dataclass_impls" -> "torch._jit_internal" [arrowhead="open", arrowtail="none"];
"torch.jit._dataclass_impls" -> "torch._sources" [arrowhead="open", arrowtail="none"];
"torch.jit._decomposition_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit._decomposition_utils" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch.jit._decompositions" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit._decompositions" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.jit._freeze" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit._freeze" -> "torch.jit._script" [arrowhead="open", arrowtail="none"];
"torch.jit._fuser" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit._ir_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit._logging" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit._monkeytype_config" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit._passes._property_propagation" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit._recursive" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit._recursive" -> "torch._jit_internal" [arrowhead="open", arrowtail="none"];
"torch.jit._recursive" -> "torch._sources" [arrowhead="open", arrowtail="none"];
"torch.jit._recursive" -> "torch.jit._builtins" [arrowhead="open", arrowtail="none"];
"torch.jit._recursive" -> "torch.jit._check" [arrowhead="open", arrowtail="none"];
"torch.jit._recursive" -> "torch.jit._state" [arrowhead="open", arrowtail="none"];
"torch.jit._recursive" -> "torch.jit.frontend" [arrowhead="open", arrowtail="none"];
"torch.jit._recursive" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.jit._script" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit._script" -> "torch._classes" [arrowhead="open", arrowtail="none"];
"torch.jit._script" -> "torch._jit_internal" [arrowhead="open", arrowtail="none"];
"torch.jit._script" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch.jit._script" -> "torch.jit._builtins" [arrowhead="open", arrowtail="none"];
"torch.jit._script" -> "torch.jit._fuser" [arrowhead="open", arrowtail="none"];
"torch.jit._script" -> "torch.jit._monkeytype_config" [arrowhead="open", arrowtail="none"];
"torch.jit._script" -> "torch.jit._recursive" [arrowhead="open", arrowtail="none"];
"torch.jit._script" -> "torch.jit._serialization" [arrowhead="open", arrowtail="none"];
"torch.jit._script" -> "torch.jit._state" [arrowhead="open", arrowtail="none"];
"torch.jit._script" -> "torch.jit.frontend" [arrowhead="open", arrowtail="none"];
"torch.jit._script" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.jit._script" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch.jit._script" -> "torch.package" [arrowhead="open", arrowtail="none"];
"torch.jit._script" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.jit._serialization" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit._serialization" -> "torch._jit_internal" [arrowhead="open", arrowtail="none"];
"torch.jit._serialization" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch.jit._serialization" -> "torch.jit._recursive" [arrowhead="open", arrowtail="none"];
"torch.jit._serialization" -> "torch.serialization" [arrowhead="open", arrowtail="none"];
"torch.jit._shape_functions" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit._state" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit._trace" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit._trace" -> "torch._export.converter" [arrowhead="open", arrowtail="none"];
"torch.jit._trace" -> "torch._jit_internal" [arrowhead="open", arrowtail="none"];
"torch.jit._trace" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch.jit._trace" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch.jit._trace" -> "torch.autograd.function" [arrowhead="open", arrowtail="none"];
"torch.jit._trace" -> "torch.export._trace" [arrowhead="open", arrowtail="none"];
"torch.jit._trace" -> "torch.jit._script" [arrowhead="open", arrowtail="none"];
"torch.jit._trace" -> "torch.jit._state" [arrowhead="open", arrowtail="none"];
"torch.jit._trace" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.jit._trace" -> "torch.testing._comparison" [arrowhead="open", arrowtail="none"];
"torch.jit._trace" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.jit.annotations" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit.annotations" -> "torch._jit_internal" [arrowhead="open", arrowtail="none"];
"torch.jit.annotations" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch.jit.annotations" -> "torch._sources" [arrowhead="open", arrowtail="none"];
"torch.jit.annotations" -> "torch.jit._state" [arrowhead="open", arrowtail="none"];
"torch.jit.frontend" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit.frontend" -> "torch._jit_internal" [arrowhead="open", arrowtail="none"];
"torch.jit.frontend" -> "torch._sources" [arrowhead="open", arrowtail="none"];
"torch.jit.frontend" -> "torch.jit._dataclass_impls" [arrowhead="open", arrowtail="none"];
"torch.jit.frontend" -> "torch.jit._monkeytype_config" [arrowhead="open", arrowtail="none"];
"torch.jit.mobile" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit.mobile" -> "torch.jit._serialization" [arrowhead="open", arrowtail="none"];
"torch.jit.quantized" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.jit.supported_ops" -> "torch.jit" [arrowhead="open", arrowtail="none"];
"torch.jit.supported_ops" -> "torch.jit._builtins" [arrowhead="open", arrowtail="none"];
"torch.jit.unsupported_tensor_ops" -> "torch.jit" [arrowhead="open", arrowtail="none"];
"torch.library" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.library" -> "torch._functorch.autograd_function" [arrowhead="open", arrowtail="none"];
"torch.library" -> "torch._functorch.pyfunctorch" [arrowhead="open", arrowtail="none"];
"torch.library" -> "torch._library" [arrowhead="open", arrowtail="none"];
"torch.library" -> "torch._library.custom_ops" [arrowhead="open", arrowtail="none"];
"torch.library" -> "torch._library.infer_schema" [arrowhead="open", arrowtail="none"];
"torch.library" -> "torch._library.triton" [arrowhead="open", arrowtail="none"];
"torch.library" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch.library" -> "torch.testing._internal.optests" [arrowhead="open", arrowtail="none"];
"torch.linalg" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.masked" -> "torch.masked._ops" [arrowhead="open", arrowtail="none"];
"torch.masked" -> "torch.masked.maskedtensor.core" [arrowhead="open", arrowtail="none"];
"torch.masked" -> "torch.masked.maskedtensor.creation" [arrowhead="open", arrowtail="none"];
"torch.masked._ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.masked._ops" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch.masked._ops" -> "torch.masked" [arrowhead="open", arrowtail="none"];
"torch.masked._ops" -> "torch.masked._docs" [arrowhead="open", arrowtail="none"];
"torch.masked._ops" -> "torch.masked.maskedtensor.core" [arrowhead="open", arrowtail="none"];
"torch.masked._ops" -> "torch.masked.maskedtensor.creation" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor" -> "torch.masked.maskedtensor.binary" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor" -> "torch.masked.maskedtensor.core" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor" -> "torch.masked.maskedtensor.passthrough" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor" -> "torch.masked.maskedtensor.reductions" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor" -> "torch.masked.maskedtensor.unary" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor._ops_refs" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor._ops_refs" -> "torch.masked.maskedtensor.binary" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor._ops_refs" -> "torch.masked.maskedtensor.core" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor._ops_refs" -> "torch.masked.maskedtensor.passthrough" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor._ops_refs" -> "torch.masked.maskedtensor.reductions" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor._ops_refs" -> "torch.masked.maskedtensor.unary" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor.binary" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor.binary" -> "torch.masked.maskedtensor.core" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor.core" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor.core" -> "torch.masked.maskedtensor._ops_refs" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor.core" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor.creation" -> "torch.masked.maskedtensor.core" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor.passthrough" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor.passthrough" -> "torch.masked.maskedtensor.core" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor.reductions" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor.reductions" -> "torch.masked.maskedtensor.core" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor.reductions" -> "torch.masked.maskedtensor.creation" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor.unary" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.masked.maskedtensor.unary" -> "torch.masked.maskedtensor.core" [arrowhead="open", arrowtail="none"];
"torch.mps" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.mps" -> "torch.mps.event" [arrowhead="open", arrowtail="none"];
"torch.mps.event" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.mps.profiler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.mtia" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.mtia" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.mtia" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.mtia" -> "torch.mtia.memory" [arrowhead="open", arrowtail="none"];
"torch.mtia" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.mtia._utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.mtia._utils" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.mtia.memory" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.mtia.memory" -> "torch.mtia._utils" [arrowhead="open", arrowtail="none"];
"torch.multiprocessing" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.multiprocessing" -> "torch.multiprocessing" [arrowhead="open", arrowtail="none"];
"torch.multiprocessing" -> "torch.multiprocessing.reductions" [arrowhead="open", arrowtail="none"];
"torch.multiprocessing" -> "torch.multiprocessing.spawn" [arrowhead="open", arrowtail="none"];
"torch.multiprocessing.pool" -> "torch.multiprocessing.queue" [arrowhead="open", arrowtail="none"];
"torch.multiprocessing.reductions" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.multiprocessing.reductions" -> "torch._namedtensor_internals" [arrowhead="open", arrowtail="none"];
"torch.multiprocessing.reductions" -> "torch.nested._internal.nested_tensor" [arrowhead="open", arrowtail="none"];
"torch.multiprocessing.reductions" -> "torch.nn.parameter" [arrowhead="open", arrowtail="none"];
"torch.nested" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nested" -> "torch.fx._symbolic_trace" [arrowhead="open", arrowtail="none"];
"torch.nested" -> "torch.nested._internal.nested_tensor" [arrowhead="open", arrowtail="none"];
"torch.nested" -> "torch.nested._internal.nested_tensor" [arrowhead="open", arrowtail="none"];
"torch.nested" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nested" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.nested_int" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.nested_int" -> "torch.fx.experimental._constant_symnode" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.nested_tensor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.nested_tensor" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.nested_tensor" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.nested_tensor" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.nested_tensor" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.nested_tensor" -> "torch.nested._internal.nested_int" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.nested_tensor" -> "torch.nested._internal.ops" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.nested_tensor" -> "torch.utils.weak" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.ops" -> "torch._higher_order_ops.flex_attention" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.ops" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.ops" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.ops" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.ops" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.ops" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.ops" -> "torch.fx.operator_schemas" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.ops" -> "torch.nested._internal.nested_tensor" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.ops" -> "torch.nested._internal.nested_tensor" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.ops" -> "torch.nested._internal.sdpa" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.ops" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.ops" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.sdpa" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.sdpa" -> "torch.backends.cuda" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.sdpa" -> "torch.nested._internal.nested_tensor" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.sdpa" -> "torch.nested._internal.nested_tensor" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.sdpa" -> "torch.nn.attention" [arrowhead="open", arrowtail="none"];
"torch.nested._internal.sdpa" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.nn" -> "torch.nn.attention" [arrowhead="open", arrowtail="none"];
"torch.nn" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn" -> "torch.nn.init" [arrowhead="open", arrowtail="none"];
"torch.nn" -> "torch.nn.modules" [arrowhead="open", arrowtail="none"];
"torch.nn" -> "torch.nn.parallel" [arrowhead="open", arrowtail="none"];
"torch.nn" -> "torch.nn.parameter" [arrowhead="open", arrowtail="none"];
"torch.nn" -> "torch.nn.utils" [arrowhead="open", arrowtail="none"];
"torch.nn.attention" -> "torch.backends.cuda" [arrowhead="open", arrowtail="none"];
"torch.nn.attention._utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.attention.bias" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.attention.bias" -> "torch.backends.cuda" [arrowhead="open", arrowtail="none"];
"torch.nn.attention.bias" -> "torch.nn.attention" [arrowhead="open", arrowtail="none"];
"torch.nn.attention.bias" -> "torch.nn.attention._utils" [arrowhead="open", arrowtail="none"];
"torch.nn.attention.bias" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.attention.experimental._paged_attention" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.attention.experimental._paged_attention" -> "torch.nn.attention.flex_attention" [arrowhead="open", arrowtail="none"];
"torch.nn.attention.flex_attention" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.attention.flex_attention" -> "torch._dynamo._trace_wrapped_higher_order_op" [arrowhead="open", arrowtail="none"];
"torch.nn.attention.flex_attention" -> "torch._dynamo.backends.debugging" [arrowhead="open", arrowtail="none"];
"torch.nn.attention.flex_attention" -> "torch._higher_order_ops.flex_attention" [arrowhead="open", arrowtail="none"];
"torch.nn.attention.flex_attention" -> "torch._higher_order_ops.utils" [arrowhead="open", arrowtail="none"];
"torch.nn.attention.flex_attention" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch.nn.attention.flex_attention" -> "torch.nn.attention._utils" [arrowhead="open", arrowtail="none"];
"torch.nn.attention.flex_attention" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.nn.common_types" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.cpp" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.cpp" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.nn.functional" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.functional" -> "torch._VF" [arrowhead="open", arrowtail="none"];
"torch.nn.functional" -> "torch._jit_internal" [arrowhead="open", arrowtail="none"];
"torch.nn.functional" -> "torch._torch_docs" [arrowhead="open", arrowtail="none"];
"torch.nn.functional" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.nn.functional" -> "torch.nn._reduction" [arrowhead="open", arrowtail="none"];
"torch.nn.functional" -> "torch.nn.grad" [arrowhead="open", arrowtail="none"];
"torch.nn.functional" -> "torch.nn.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.nn.functional" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch.nn.grad" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.grad" -> "torch.nn.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.nn.init" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic" -> "torch.ao.nn.intrinsic.modules.fused" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic" -> "torch.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic" -> "torch.nn.intrinsic.modules" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic" -> "torch.nn.intrinsic.qat" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic" -> "torch.nn.intrinsic.quantized" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.modules" -> "torch.nn.intrinsic.modules.fused" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.modules.fused" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.modules.fused" -> "torch.ao.nn.intrinsic.modules.fused" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.qat" -> "torch.nn.intrinsic.qat.modules" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.qat.modules" -> "torch.nn.intrinsic.qat.modules.conv_fused" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.qat.modules" -> "torch.nn.intrinsic.qat.modules.linear_fused" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.qat.modules" -> "torch.nn.intrinsic.qat.modules.linear_relu" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.qat.modules.conv_fused" -> "torch.ao.nn.intrinsic.qat" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.qat.modules.linear_fused" -> "torch.ao.nn.intrinsic.qat" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.qat.modules.linear_relu" -> "torch.ao.nn.intrinsic.qat" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.quantized" -> "torch.nn.intrinsic.quantized" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.quantized" -> "torch.nn.intrinsic.quantized.dynamic" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.quantized" -> "torch.nn.intrinsic.quantized.modules" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.quantized.dynamic" -> "torch.nn.intrinsic.quantized.dynamic.modules" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.quantized.dynamic.modules" -> "torch.nn.intrinsic.quantized.dynamic.modules.linear_relu" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.quantized.dynamic.modules.linear_relu" -> "torch.ao.nn.intrinsic.quantized.dynamic" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.quantized.modules" -> "torch.nn.intrinsic.quantized.modules.bn_relu" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.quantized.modules" -> "torch.nn.intrinsic.quantized.modules.conv_relu" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.quantized.modules" -> "torch.nn.intrinsic.quantized.modules.linear_relu" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.quantized.modules.bn_relu" -> "torch.ao.nn.intrinsic.quantized" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.quantized.modules.conv_relu" -> "torch.ao.nn.intrinsic.quantized" [arrowhead="open", arrowtail="none"];
"torch.nn.intrinsic.quantized.modules.linear_relu" -> "torch.ao.nn.intrinsic.quantized" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.activation" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.adaptive" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.batchnorm" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.channelshuffle" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.container" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.conv" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.distance" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.dropout" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.flatten" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.fold" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.instancenorm" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.loss" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.normalization" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.padding" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.pixelshuffle" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.pooling" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.rnn" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.sparse" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.transformer" [arrowhead="open", arrowtail="none"];
"torch.nn.modules" -> "torch.nn.modules.upsampling" [arrowhead="open", arrowtail="none"];
"torch.nn.modules._functions" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules._functions" -> "torch.autograd.function" [arrowhead="open", arrowtail="none"];
"torch.nn.modules._functions" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.activation" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.activation" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.activation" -> "torch.nn.init" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.activation" -> "torch.nn.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.activation" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.activation" -> "torch.nn.parameter" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.adaptive" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.adaptive" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.adaptive" -> "torch.nn.modules.container" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.adaptive" -> "torch.nn.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.adaptive" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.batchnorm" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.batchnorm" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.batchnorm" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.batchnorm" -> "torch.nn.init" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.batchnorm" -> "torch.nn.modules._functions" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.batchnorm" -> "torch.nn.modules.lazy" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.batchnorm" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.batchnorm" -> "torch.nn.parameter" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.channelshuffle" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.channelshuffle" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.channelshuffle" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.container" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.container" -> "torch._jit_internal" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.container" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.container" -> "torch.nn.parameter" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.conv" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.conv" -> "torch._torch_docs" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.conv" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.conv" -> "torch.nn.common_types" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.conv" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.conv" -> "torch.nn.init" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.conv" -> "torch.nn.modules.lazy" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.conv" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.conv" -> "torch.nn.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.conv" -> "torch.nn.parameter" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.distance" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.distance" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.distance" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.dropout" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.dropout" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.dropout" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.flatten" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.flatten" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.flatten" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.fold" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.fold" -> "torch.nn.common_types" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.fold" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.fold" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.instancenorm" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.instancenorm" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.instancenorm" -> "torch.nn.modules.batchnorm" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.lazy" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.lazy" -> "torch.nn.parameter" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.linear" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.linear" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.linear" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.linear" -> "torch.nn.init" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.linear" -> "torch.nn.modules.lazy" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.linear" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.linear" -> "torch.nn.parameter" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.loss" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.loss" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.loss" -> "torch.nn._reduction" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.loss" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.loss" -> "torch.nn.modules.distance" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.loss" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.module" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.module" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.module" -> "torch.nn.parameter" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.module" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.module" -> "torch.utils.hooks" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.normalization" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.normalization" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.normalization" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.normalization" -> "torch.nn.init" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.normalization" -> "torch.nn.modules._functions" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.normalization" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.normalization" -> "torch.nn.parameter" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.padding" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.padding" -> "torch.nn.common_types" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.padding" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.padding" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.padding" -> "torch.nn.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.pixelshuffle" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.pixelshuffle" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.pixelshuffle" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.pooling" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.pooling" -> "torch.nn.common_types" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.pooling" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.pooling" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.pooling" -> "torch.nn.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.rnn" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.rnn" -> "torch._VF" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.rnn" -> "torch.backends.cudnn.rnn" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.rnn" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.rnn" -> "torch.nn.init" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.rnn" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.rnn" -> "torch.nn.parameter" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.rnn" -> "torch.nn.utils.rnn" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.sparse" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.sparse" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.sparse" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.sparse" -> "torch.nn.init" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.sparse" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.sparse" -> "torch.nn.parameter" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.transformer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.transformer" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.transformer" -> "torch.nn.init" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.transformer" -> "torch.nn.modules.activation" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.transformer" -> "torch.nn.modules.container" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.transformer" -> "torch.nn.modules.dropout" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.transformer" -> "torch.nn.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.transformer" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.transformer" -> "torch.nn.modules.normalization" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.upsampling" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.upsampling" -> "torch.nn.common_types" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.upsampling" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.upsampling" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.nn.modules.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel" -> "torch.nn.parallel.data_parallel" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel" -> "torch.nn.parallel.distributed" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel" -> "torch.nn.parallel.parallel_apply" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel" -> "torch.nn.parallel.replicate" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel" -> "torch.nn.parallel.scatter_gather" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel._functions" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel._functions" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel._functions" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel._functions" -> "torch.nn.parallel" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel._functions" -> "torch.nn.parallel.comm" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.comm" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.comm" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.comm" -> "torch.autograd.graph.save_on_cpu.__init__.torch.cuda" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.comm" -> "torch.cuda.nccl" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.data_parallel" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.data_parallel" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.data_parallel" -> "torch.nn.modules" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.data_parallel" -> "torch.nn.parallel.parallel_apply" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.data_parallel" -> "torch.nn.parallel.replicate" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.data_parallel" -> "torch.nn.parallel.scatter_gather" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.distributed" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.distributed" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.distributed" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.distributed" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.distributed" -> "torch.distributed._functional_collectives" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.distributed" -> "torch.distributed.algorithms._optimizer_overlap" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.distributed" -> "torch.distributed.algorithms.ddp_comm_hooks.mixed_precision_hooks" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.distributed" -> "torch.distributed.algorithms.ddp_comm_hooks.optimizer_overlap_hooks" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.distributed" -> "torch.distributed.algorithms.join" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.distributed" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.distributed" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.distributed" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.distributed" -> "torch.distributed.tensor.parallel.ddp" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.distributed" -> "torch.distributed.utils" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.distributed" -> "torch.nn.modules" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.distributed" -> "torch.nn.parallel.scatter_gather" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.distributed" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.parallel_apply" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.parallel_apply" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.parallel_apply" -> "torch.cuda._utils" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.parallel_apply" -> "torch.nn.modules" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.replicate" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.replicate" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.replicate" -> "torch.jit" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.replicate" -> "torch.jit._state" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.replicate" -> "torch.nn.modules" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.replicate" -> "torch.nn.parallel" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.replicate" -> "torch.nn.parallel._functions" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.replicate" -> "torch.nn.parallel.comm" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.scatter_gather" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.parallel.scatter_gather" -> "torch.nn.parallel._functions" [arrowhead="open", arrowtail="none"];
"torch.nn.parameter" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.qat" -> "torch.nn.qat" [arrowhead="open", arrowtail="none"];
"torch.nn.qat" -> "torch.nn.qat.dynamic" [arrowhead="open", arrowtail="none"];
"torch.nn.qat" -> "torch.nn.qat.modules" [arrowhead="open", arrowtail="none"];
"torch.nn.qat.dynamic" -> "torch.nn.qat.dynamic.modules" [arrowhead="open", arrowtail="none"];
"torch.nn.qat.dynamic.modules" -> "torch.nn.qat.dynamic.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.nn.qat.dynamic.modules.linear" -> "torch.ao.nn.qat.dynamic.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.nn.qat.modules" -> "torch.ao.nn.qat.modules.conv" [arrowhead="open", arrowtail="none"];
"torch.nn.qat.modules" -> "torch.ao.nn.qat.modules.embedding_ops" [arrowhead="open", arrowtail="none"];
"torch.nn.qat.modules" -> "torch.ao.nn.qat.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.nn.qat.modules" -> "torch.nn.qat.modules" [arrowhead="open", arrowtail="none"];
"torch.nn.qat.modules" -> "torch.nn.qat.modules.conv" [arrowhead="open", arrowtail="none"];
"torch.nn.qat.modules" -> "torch.nn.qat.modules.embedding_ops" [arrowhead="open", arrowtail="none"];
"torch.nn.qat.modules" -> "torch.nn.qat.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.nn.qat.modules.conv" -> "torch.ao.nn.qat.modules.conv" [arrowhead="open", arrowtail="none"];
"torch.nn.qat.modules.embedding_ops" -> "torch.ao.nn.qat.modules.embedding_ops" [arrowhead="open", arrowtail="none"];
"torch.nn.qat.modules.linear" -> "torch.ao.nn.qat.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.nn.quantizable" -> "torch.nn.quantizable.modules" [arrowhead="open", arrowtail="none"];
"torch.nn.quantizable.modules" -> "torch.ao.nn.quantizable.modules.activation" [arrowhead="open", arrowtail="none"];
"torch.nn.quantizable.modules" -> "torch.ao.nn.quantizable.modules.rnn" [arrowhead="open", arrowtail="none"];
"torch.nn.quantizable.modules.activation" -> "torch.ao.nn.quantizable.modules.activation" [arrowhead="open", arrowtail="none"];
"torch.nn.quantizable.modules.rnn" -> "torch.ao.nn.quantizable.modules.rnn" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized" -> "torch.nn.quantized" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized" -> "torch.nn.quantized.dynamic" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized" -> "torch.nn.quantized.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized" -> "torch.nn.quantized.modules" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized._reference" -> "torch.nn.quantized._reference.modules" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized._reference.modules" -> "torch.ao.nn.quantized.reference.modules.conv" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized._reference.modules" -> "torch.ao.nn.quantized.reference.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized._reference.modules" -> "torch.ao.nn.quantized.reference.modules.rnn" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized._reference.modules" -> "torch.ao.nn.quantized.reference.modules.sparse" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized._reference.modules.conv" -> "torch.ao.nn.quantized.reference.modules.conv" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized._reference.modules.linear" -> "torch.ao.nn.quantized.reference.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized._reference.modules.rnn" -> "torch.ao.nn.quantized.reference.modules.rnn" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized._reference.modules.sparse" -> "torch.ao.nn.quantized.reference.modules.sparse" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized._reference.modules.utils" -> "torch.ao.nn.quantized.reference.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.dynamic" -> "torch.ao.nn.quantized.dynamic" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.dynamic.modules" -> "torch.ao.nn.quantized.dynamic.modules" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.dynamic.modules" -> "torch.ao.nn.quantized.dynamic.modules.conv" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.dynamic.modules" -> "torch.ao.nn.quantized.dynamic.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.dynamic.modules" -> "torch.ao.nn.quantized.dynamic.modules.rnn" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.dynamic.modules.conv" -> "torch.ao.nn.quantized.dynamic.modules.conv" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.dynamic.modules.linear" -> "torch.ao.nn.quantized.dynamic.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.dynamic.modules.rnn" -> "torch.ao.nn.quantized.dynamic.modules.rnn" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.functional" -> "torch.ao.nn.quantized.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules" -> "torch.ao.nn.quantized.modules" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules" -> "torch.ao.nn.quantized.modules.activation" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules" -> "torch.ao.nn.quantized.modules.batchnorm" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules" -> "torch.ao.nn.quantized.modules.conv" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules" -> "torch.ao.nn.quantized.modules.dropout" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules" -> "torch.ao.nn.quantized.modules.embedding_ops" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules" -> "torch.ao.nn.quantized.modules.functional_modules" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules" -> "torch.ao.nn.quantized.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules" -> "torch.ao.nn.quantized.modules.normalization" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules" -> "torch.ao.nn.quantized.modules.rnn" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules" -> "torch.ao.nn.quantized.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules.activation" -> "torch.ao.nn.quantized.modules.activation" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules.batchnorm" -> "torch.ao.nn.quantized.modules.batchnorm" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules.conv" -> "torch.ao.nn.quantized.modules.conv" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules.dropout" -> "torch.ao.nn.quantized.modules.dropout" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules.embedding_ops" -> "torch.ao.nn.quantized.modules.embedding_ops" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules.functional_modules" -> "torch.ao.nn.quantized.modules.functional_modules" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules.linear" -> "torch.ao.nn.quantized.modules.linear" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules.normalization" -> "torch.ao.nn.quantized.modules.normalization" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules.rnn" -> "torch.ao.nn.quantized.modules.rnn" [arrowhead="open", arrowtail="none"];
"torch.nn.quantized.modules.utils" -> "torch.ao.nn.quantized.modules.utils" [arrowhead="open", arrowtail="none"];
"torch.nn.utils" -> "torch.nn.init" [arrowhead="open", arrowtail="none"];
"torch.nn.utils" -> "torch.nn.utils.clip_grad" [arrowhead="open", arrowtail="none"];
"torch.nn.utils" -> "torch.nn.utils.convert_parameters" [arrowhead="open", arrowtail="none"];
"torch.nn.utils" -> "torch.nn.utils.fusion" [arrowhead="open", arrowtail="none"];
"torch.nn.utils" -> "torch.nn.utils.memory_format" [arrowhead="open", arrowtail="none"];
"torch.nn.utils" -> "torch.nn.utils.spectral_norm" [arrowhead="open", arrowtail="none"];
"torch.nn.utils" -> "torch.nn.utils.weight_norm" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights" -> "torch.nn.utils._expanded_weights.conv_expanded_weights" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights" -> "torch.nn.utils._expanded_weights.embedding_expanded_weights" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights" -> "torch.nn.utils._expanded_weights.expanded_weights_impl" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights" -> "torch.nn.utils._expanded_weights.group_norm_expanded_weights" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights" -> "torch.nn.utils._expanded_weights.instance_norm_expanded_weights" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights" -> "torch.nn.utils._expanded_weights.layer_norm_expanded_weights" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights" -> "torch.nn.utils._expanded_weights.linear_expanded_weights" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.conv_expanded_weights" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.conv_expanded_weights" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.conv_expanded_weights" -> "torch.nn.utils._expanded_weights.conv_utils" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.conv_expanded_weights" -> "torch.nn.utils._expanded_weights.expanded_weights_impl" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.conv_expanded_weights" -> "torch.nn.utils._expanded_weights.expanded_weights_utils" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.conv_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.conv_utils" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.conv_utils" -> "torch.nn.utils._expanded_weights.expanded_weights_utils" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.embedding_expanded_weights" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.embedding_expanded_weights" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.embedding_expanded_weights" -> "torch.nn.utils._expanded_weights.expanded_weights_impl" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.embedding_expanded_weights" -> "torch.nn.utils._expanded_weights.expanded_weights_utils" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.expanded_weights_impl" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.expanded_weights_impl" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.expanded_weights_impl" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.expanded_weights_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.expanded_weights_utils" -> "torch.nn.utils._expanded_weights.expanded_weights_impl" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.group_norm_expanded_weights" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.group_norm_expanded_weights" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.group_norm_expanded_weights" -> "torch.nn.utils._expanded_weights.expanded_weights_impl" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.group_norm_expanded_weights" -> "torch.nn.utils._expanded_weights.expanded_weights_utils" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.instance_norm_expanded_weights" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.instance_norm_expanded_weights" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.instance_norm_expanded_weights" -> "torch.nn.utils._expanded_weights.expanded_weights_impl" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.instance_norm_expanded_weights" -> "torch.nn.utils._expanded_weights.expanded_weights_utils" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.layer_norm_expanded_weights" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.layer_norm_expanded_weights" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.layer_norm_expanded_weights" -> "torch.nn.utils._expanded_weights.expanded_weights_impl" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.layer_norm_expanded_weights" -> "torch.nn.utils._expanded_weights.expanded_weights_utils" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.linear_expanded_weights" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.linear_expanded_weights" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.linear_expanded_weights" -> "torch.nn.utils._expanded_weights.expanded_weights_impl" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._expanded_weights.linear_expanded_weights" -> "torch.nn.utils._expanded_weights.expanded_weights_utils" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._named_member_accessor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._per_sample_grad" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._per_sample_grad" -> "torch.nn.utils._expanded_weights.expanded_weights_impl" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._per_sample_grad" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.nn.utils._per_sample_grad" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.clip_grad" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.clip_grad" -> "torch.utils._foreach_utils" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.convert_parameters" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.fusion" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.init" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.memory_format" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.parametrizations" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.parametrizations" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.parametrizations" -> "torch.nn.modules" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.parametrizations" -> "torch.nn.utils" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.parametrizations" -> "torch.nn.utils.parametrize" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.parametrize" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.parametrize" -> "torch.__future__" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.parametrize" -> "torch.nn.modules.container" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.parametrize" -> "torch.nn.parameter" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.parametrize" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.prune" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.rnn" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.rnn" -> "torch._VF" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.spectral_norm" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.spectral_norm" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.spectral_norm" -> "torch.nn.modules" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.stateless" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.stateless" -> "torch.nn.utils._named_member_accessor" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.weight_norm" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.weight_norm" -> "torch.nn.modules" [arrowhead="open", arrowtail="none"];
"torch.nn.utils.weight_norm" -> "torch.nn.parameter" [arrowhead="open", arrowtail="none"];
"torch.onnx" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx" -> "torch.__future__" [arrowhead="open", arrowtail="none"];
"torch.onnx" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx" -> "torch.onnx._flags" [arrowhead="open", arrowtail="none"];
"torch.onnx" -> "torch.onnx._internal._exporter_legacy" [arrowhead="open", arrowtail="none"];
"torch.onnx" -> "torch.onnx._internal._exporter_legacy" [arrowhead="open", arrowtail="none"];
"torch.onnx" -> "torch.onnx._internal.exporter" [arrowhead="open", arrowtail="none"];
"torch.onnx" -> "torch.onnx._internal.exporter._compat" [arrowhead="open", arrowtail="none"];
"torch.onnx" -> "torch.onnx._internal.exporter._onnx_program" [arrowhead="open", arrowtail="none"];
"torch.onnx" -> "torch.onnx._internal.onnxruntime" [arrowhead="open", arrowtail="none"];
"torch.onnx" -> "torch.onnx._type_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx" -> "torch.onnx.errors" [arrowhead="open", arrowtail="none"];
"torch.onnx" -> "torch.onnx.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.onnx._experimental" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._globals" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx._globals" -> "torch.onnx._constants" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch._dynamo.config" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.export._trace" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal._lazy_import" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal.diagnostics.infra" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal.exporter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal.exporter._onnx_program" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal.fx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal.fx.analysis" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal.fx.decomposition_skip" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal.fx.decomposition_table" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal.fx.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal.fx.dynamo_graph_extractor" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal.fx.fx_onnx_interpreter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal.fx.fx_symbolic_graph_extractor" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal.fx.onnxfunction_dispatcher" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal.fx.passes" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal.fx.patcher" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal.fx.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal.io_adapter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx._internal.onnxruntime" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.onnx.errors" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal._exporter_legacy" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics" -> "torch.onnx._internal.diagnostics._diagnostic" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics" -> "torch.onnx._internal.diagnostics._rules" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics" -> "torch.onnx._internal.diagnostics.infra" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics._diagnostic" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics._diagnostic" -> "torch.onnx._internal.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics._diagnostic" -> "torch.onnx._internal.diagnostics.infra" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics._diagnostic" -> "torch.onnx._internal.diagnostics.infra.formatter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics._diagnostic" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics._diagnostic" -> "torch.onnx._internal.diagnostics.infra.sarif.version" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics._diagnostic" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics._diagnostic" -> "torch.utils.cpp_backtrace" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics._rules" -> "torch.onnx._internal.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics._rules" -> "torch.onnx._internal.diagnostics.infra" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra" -> "torch.onnx._internal.diagnostics.infra._infra" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra" -> "torch.onnx._internal.diagnostics.infra.context" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra._infra" -> "torch.onnx._internal.diagnostics.infra" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra._infra" -> "torch.onnx._internal.diagnostics.infra.formatter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra._infra" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.context" -> "torch.onnx._internal.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.context" -> "torch.onnx._internal.diagnostics.infra" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.context" -> "torch.onnx._internal.diagnostics.infra.formatter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.context" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.context" -> "torch.onnx._internal.diagnostics.infra.sarif.version" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.context" -> "torch.onnx._internal.diagnostics.infra.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.decorator" -> "torch.onnx._internal.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.decorator" -> "torch.onnx._internal.diagnostics.infra" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.decorator" -> "torch.onnx._internal.diagnostics.infra.formatter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.decorator" -> "torch.onnx._internal.diagnostics.infra.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.formatter" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.formatter" -> "torch.onnx._internal.diagnostics.infra" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.formatter" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._address" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_change" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_content" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._attachment" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._code_flow" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._configuration_override" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._conversion" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._edge" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._edge_traversal" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._exception" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._external_properties" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._external_property_file_reference" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._external_property_file_references" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._fix" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._graph" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._graph_traversal" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._invocation" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._location_relationship" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._logical_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._multiformat_message_string" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._node" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._notification" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._physical_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._rectangle" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._region" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._replacement" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._reporting_configuration" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_relationship" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._result" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._result_provenance" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._run" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._run_automation_details" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._sarif_log" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._special_locations" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._stack" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._stack_frame" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._suppression" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._thread_flow" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._tool" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._tool_component" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._tool_component_reference" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._translation_metadata" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._version_control_details" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._web_request" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif" -> "torch.onnx._internal.diagnostics.infra.sarif._web_response" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._address" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._address" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._artifact" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._artifact" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_content" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._artifact" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._artifact" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._artifact" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._artifact_change" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._artifact_change" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._artifact_change" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._artifact_change" -> "torch.onnx._internal.diagnostics.infra.sarif._replacement" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._artifact_content" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._artifact_content" -> "torch.onnx._internal.diagnostics.infra.sarif._multiformat_message_string" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._artifact_content" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._artifact_location" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._artifact_location" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._artifact_location" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._attachment" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._attachment" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._attachment" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._attachment" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._attachment" -> "torch.onnx._internal.diagnostics.infra.sarif._rectangle" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._attachment" -> "torch.onnx._internal.diagnostics.infra.sarif._region" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._code_flow" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._code_flow" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._code_flow" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._code_flow" -> "torch.onnx._internal.diagnostics.infra.sarif._thread_flow" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._configuration_override" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._configuration_override" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._configuration_override" -> "torch.onnx._internal.diagnostics.infra.sarif._reporting_configuration" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._configuration_override" -> "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._conversion" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._conversion" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._conversion" -> "torch.onnx._internal.diagnostics.infra.sarif._invocation" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._conversion" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._conversion" -> "torch.onnx._internal.diagnostics.infra.sarif._tool" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._edge" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._edge" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._edge" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._edge_traversal" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._edge_traversal" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._edge_traversal" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._exception" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._exception" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._exception" -> "torch.onnx._internal.diagnostics.infra.sarif._stack" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._external_properties" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._external_properties" -> "torch.onnx._internal.diagnostics.infra.sarif._address" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._external_properties" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._external_properties" -> "torch.onnx._internal.diagnostics.infra.sarif._conversion" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._external_properties" -> "torch.onnx._internal.diagnostics.infra.sarif._graph" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._external_properties" -> "torch.onnx._internal.diagnostics.infra.sarif._invocation" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._external_properties" -> "torch.onnx._internal.diagnostics.infra.sarif._logical_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._external_properties" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._external_properties" -> "torch.onnx._internal.diagnostics.infra.sarif._result" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._external_properties" -> "torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._external_properties" -> "torch.onnx._internal.diagnostics.infra.sarif._tool_component" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._external_properties" -> "torch.onnx._internal.diagnostics.infra.sarif._web_request" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._external_properties" -> "torch.onnx._internal.diagnostics.infra.sarif._web_response" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._external_property_file_reference" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._external_property_file_reference" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._external_property_file_reference" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._external_property_file_references" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._external_property_file_references" -> "torch.onnx._internal.diagnostics.infra.sarif._external_property_file_reference" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._external_property_file_references" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._fix" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._fix" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_change" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._fix" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._fix" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._graph" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._graph" -> "torch.onnx._internal.diagnostics.infra.sarif._edge" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._graph" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._graph" -> "torch.onnx._internal.diagnostics.infra.sarif._node" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._graph" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._graph_traversal" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._graph_traversal" -> "torch.onnx._internal.diagnostics.infra.sarif._edge_traversal" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._graph_traversal" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._graph_traversal" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._invocation" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._invocation" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._invocation" -> "torch.onnx._internal.diagnostics.infra.sarif._configuration_override" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._invocation" -> "torch.onnx._internal.diagnostics.infra.sarif._notification" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._invocation" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._location" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._location" -> "torch.onnx._internal.diagnostics.infra.sarif._location_relationship" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._location" -> "torch.onnx._internal.diagnostics.infra.sarif._logical_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._location" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._location" -> "torch.onnx._internal.diagnostics.infra.sarif._physical_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._location" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._location" -> "torch.onnx._internal.diagnostics.infra.sarif._region" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._location_relationship" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._location_relationship" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._location_relationship" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._logical_location" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._logical_location" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._message" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._message" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._multiformat_message_string" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._multiformat_message_string" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._node" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._node" -> "torch.onnx._internal.diagnostics.infra.sarif._location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._node" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._node" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._notification" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._notification" -> "torch.onnx._internal.diagnostics.infra.sarif._exception" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._notification" -> "torch.onnx._internal.diagnostics.infra.sarif._location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._notification" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._notification" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._notification" -> "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._physical_location" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._physical_location" -> "torch.onnx._internal.diagnostics.infra.sarif._address" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._physical_location" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._physical_location" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._physical_location" -> "torch.onnx._internal.diagnostics.infra.sarif._region" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._rectangle" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._rectangle" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._rectangle" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._region" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._region" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_content" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._region" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._region" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._replacement" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._replacement" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_content" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._replacement" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._replacement" -> "torch.onnx._internal.diagnostics.infra.sarif._region" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._reporting_configuration" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._reporting_configuration" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor" -> "torch.onnx._internal.diagnostics.infra.sarif._multiformat_message_string" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor" -> "torch.onnx._internal.diagnostics.infra.sarif._reporting_configuration" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor" -> "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_relationship" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference" -> "torch.onnx._internal.diagnostics.infra.sarif._tool_component_reference" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_relationship" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_relationship" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_relationship" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_relationship" -> "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._result" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._result" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._result" -> "torch.onnx._internal.diagnostics.infra.sarif._attachment" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._result" -> "torch.onnx._internal.diagnostics.infra.sarif._code_flow" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._result" -> "torch.onnx._internal.diagnostics.infra.sarif._fix" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._result" -> "torch.onnx._internal.diagnostics.infra.sarif._graph" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._result" -> "torch.onnx._internal.diagnostics.infra.sarif._graph_traversal" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._result" -> "torch.onnx._internal.diagnostics.infra.sarif._location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._result" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._result" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._result" -> "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._result" -> "torch.onnx._internal.diagnostics.infra.sarif._result_provenance" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._result" -> "torch.onnx._internal.diagnostics.infra.sarif._stack" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._result" -> "torch.onnx._internal.diagnostics.infra.sarif._suppression" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._result" -> "torch.onnx._internal.diagnostics.infra.sarif._web_request" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._result" -> "torch.onnx._internal.diagnostics.infra.sarif._web_response" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._result_provenance" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._result_provenance" -> "torch.onnx._internal.diagnostics.infra.sarif._physical_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._result_provenance" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run" -> "torch.onnx._internal.diagnostics.infra.sarif._address" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run" -> "torch.onnx._internal.diagnostics.infra.sarif._conversion" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run" -> "torch.onnx._internal.diagnostics.infra.sarif._external_property_file_references" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run" -> "torch.onnx._internal.diagnostics.infra.sarif._graph" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run" -> "torch.onnx._internal.diagnostics.infra.sarif._invocation" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run" -> "torch.onnx._internal.diagnostics.infra.sarif._logical_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run" -> "torch.onnx._internal.diagnostics.infra.sarif._result" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run" -> "torch.onnx._internal.diagnostics.infra.sarif._run_automation_details" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run" -> "torch.onnx._internal.diagnostics.infra.sarif._special_locations" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run" -> "torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run" -> "torch.onnx._internal.diagnostics.infra.sarif._tool" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run" -> "torch.onnx._internal.diagnostics.infra.sarif._tool_component" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run" -> "torch.onnx._internal.diagnostics.infra.sarif._version_control_details" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run" -> "torch.onnx._internal.diagnostics.infra.sarif._web_request" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run" -> "torch.onnx._internal.diagnostics.infra.sarif._web_response" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run_automation_details" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run_automation_details" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._run_automation_details" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._sarif_log" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._sarif_log" -> "torch.onnx._internal.diagnostics.infra.sarif._external_properties" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._sarif_log" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._sarif_log" -> "torch.onnx._internal.diagnostics.infra.sarif._run" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._special_locations" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._special_locations" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._special_locations" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._stack" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._stack" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._stack" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._stack" -> "torch.onnx._internal.diagnostics.infra.sarif._stack_frame" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._stack_frame" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._stack_frame" -> "torch.onnx._internal.diagnostics.infra.sarif._location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._stack_frame" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._suppression" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._suppression" -> "torch.onnx._internal.diagnostics.infra.sarif._location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._suppression" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._thread_flow" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._thread_flow" -> "torch.onnx._internal.diagnostics.infra.sarif._message" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._thread_flow" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._thread_flow" -> "torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location" -> "torch.onnx._internal.diagnostics.infra.sarif._location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location" -> "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location" -> "torch.onnx._internal.diagnostics.infra.sarif._stack" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location" -> "torch.onnx._internal.diagnostics.infra.sarif._web_request" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location" -> "torch.onnx._internal.diagnostics.infra.sarif._web_response" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._tool" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._tool" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._tool" -> "torch.onnx._internal.diagnostics.infra.sarif._tool_component" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._tool_component" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._tool_component" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._tool_component" -> "torch.onnx._internal.diagnostics.infra.sarif._multiformat_message_string" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._tool_component" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._tool_component" -> "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._tool_component" -> "torch.onnx._internal.diagnostics.infra.sarif._tool_component_reference" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._tool_component" -> "torch.onnx._internal.diagnostics.infra.sarif._translation_metadata" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._tool_component_reference" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._tool_component_reference" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._translation_metadata" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._translation_metadata" -> "torch.onnx._internal.diagnostics.infra.sarif._multiformat_message_string" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._translation_metadata" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._version_control_details" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._version_control_details" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_location" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._version_control_details" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._web_request" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._web_request" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_content" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._web_request" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._web_response" -> "torch.onnx._internal.diagnostics.infra.sarif" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._web_response" -> "torch.onnx._internal.diagnostics.infra.sarif._artifact_content" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.sarif._web_response" -> "torch.onnx._internal.diagnostics.infra.sarif._property_bag" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.utils" -> "torch.onnx._internal.diagnostics.infra" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.utils" -> "torch.onnx._internal.diagnostics.infra._infra" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.diagnostics.infra.utils" -> "torch.onnx._internal.diagnostics.infra.formatter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._analysis" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._analysis" -> "torch.export" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._analysis" -> "torch.export.graph_signature" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._analysis" -> "torch.onnx._internal.exporter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._analysis" -> "torch.onnx._internal.exporter._dispatching" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._analysis" -> "torch.onnx._internal.exporter._registration" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._building" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._building" -> "torch.onnx._internal.exporter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._building" -> "torch.onnx._internal.exporter._errors" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._building" -> "torch.onnx._internal.exporter._schemas" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._building" -> "torch.onnx._internal.exporter._tensors" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._capture_strategies" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._capture_strategies" -> "torch._export" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._capture_strategies" -> "torch._export.converter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._capture_strategies" -> "torch.jit" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._capture_strategies" -> "torch.onnx._internal.fx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._capture_strategies" -> "torch.onnx._internal.fx.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._capture_strategies" -> "torch.onnx._internal.fx.passes" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._capture_strategies" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._capture_strategies" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._compat" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._compat" -> "torch.onnx._internal._lazy_import" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._compat" -> "torch.onnx._internal.exporter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._compat" -> "torch.onnx._internal.exporter._core" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._compat" -> "torch.onnx._internal.exporter._onnx_program" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._compat" -> "torch.onnx._internal.exporter._registration" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._compat" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._compat" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._core" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._core" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._core" -> "torch.export" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._core" -> "torch.export.graph_signature" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._core" -> "torch.onnx._internal._lazy_import" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._core" -> "torch.onnx._internal.exporter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._core" -> "torch.onnx._internal.exporter._analysis" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._core" -> "torch.onnx._internal.exporter._building" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._core" -> "torch.onnx._internal.exporter._capture_strategies" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._core" -> "torch.onnx._internal.exporter._dispatching" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._core" -> "torch.onnx._internal.exporter._errors" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._core" -> "torch.onnx._internal.exporter._fx_passes" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._core" -> "torch.onnx._internal.exporter._ir_passes" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._core" -> "torch.onnx._internal.exporter._onnx_program" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._core" -> "torch.onnx._internal.exporter._registration" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._core" -> "torch.onnx._internal.exporter._reporting" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._core" -> "torch.onnx._internal.exporter._tensors" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._core" -> "torch.onnx._internal.exporter._verification" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._decomp" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._decomp" -> "torch.onnx._internal.exporter._registration" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._dispatching" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._dispatching" -> "torch.onnx._internal.exporter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._dispatching" -> "torch.onnx._internal.exporter._registration" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._dispatching" -> "torch.onnx._internal.exporter._schemas" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._errors" -> "torch.onnx.errors" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._fx_passes" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._fx_passes" -> "torch.onnx._internal.exporter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._fx_passes" -> "torch.onnx._internal.exporter._decomp" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._fx_passes" -> "torch.onnx._internal.exporter._registration" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._fx_passes" -> "torch.onnx._internal.fx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._fx_passes" -> "torch.onnx._internal.fx.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._fx_passes" -> "torch.onnx._internal.fx.passes" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._ir_passes" -> "torch.onnx._internal._lazy_import" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._onnx_program" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._onnx_program" -> "torch.onnx._internal._lazy_import" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._onnx_program" -> "torch.onnx._internal.exporter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._onnx_program" -> "torch.onnx._internal.exporter._core" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._onnx_program" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._onnx_program" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._registration" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._registration" -> "torch.onnx._internal._lazy_import" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._registration" -> "torch.onnx._internal.exporter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._registration" -> "torch.onnx._internal.exporter._schemas" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._registration" -> "torch.onnx._internal.exporter._torchlib" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._registration" -> "torch.onnx._internal.exporter._torchlib._torchlib_registry" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._registration" -> "torch.onnx._internal.exporter._torchlib.ops" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._reporting" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._reporting" -> "torch.onnx._internal.exporter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._reporting" -> "torch.onnx._internal.exporter._analysis" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._reporting" -> "torch.onnx._internal.exporter._registration" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._reporting" -> "torch.onnx._internal.exporter._verification" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._testing" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._testing" -> "torch.onnx._internal.exporter._onnx_program" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._testing" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._testing" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._torchlib.ops" -> "torch.onnx._internal.exporter._torchlib.ops" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._torchlib.ops" -> "torch.onnx._internal.exporter._torchlib.ops.hop" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._torchlib.ops.hop" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._torchlib.ops.hop" -> "torch.onnx._internal._lazy_import" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._torchlib.ops.hop" -> "torch.onnx._internal.exporter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._torchlib.ops.hop" -> "torch.onnx._internal.exporter._core" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._torchlib.ops.hop" -> "torch.onnx._internal.exporter._torchlib._torchlib_registry" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._verification" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._verification" -> "torch.onnx._internal.exporter._onnx_program" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._verification" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.exporter._verification" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx" -> "torch.onnx._internal.fx.patcher" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx" -> "torch.onnx._internal.fx.serialization" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx._pass" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx._pass" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx._pass" -> "torch.onnx._internal.fx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx._pass" -> "torch.onnx._internal.fx.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx._pass" -> "torch.onnx._internal.fx.onnxfunction_dispatcher" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.analysis" -> "torch.onnx._internal.fx.analysis.unsupported_nodes" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.analysis.unsupported_nodes" -> "torch.onnx._internal.fx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.analysis.unsupported_nodes" -> "torch.onnx._internal.fx._pass" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.analysis.unsupported_nodes" -> "torch.onnx._internal.fx.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.analysis.unsupported_nodes" -> "torch.onnx._internal.fx.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.decomposition_skip" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.decomposition_skip" -> "torch._decomp" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.decomposition_skip" -> "torch._decomp.decompositions" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.decomposition_table" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.decomposition_table" -> "torch.onnx._internal.fx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.decomposition_table" -> "torch.onnx._internal.fx.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.diagnostics" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.diagnostics" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.diagnostics" -> "torch.onnx._internal.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.diagnostics" -> "torch.onnx._internal.diagnostics.infra" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.diagnostics" -> "torch.onnx._internal.diagnostics.infra.decorator" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.diagnostics" -> "torch.onnx._internal.diagnostics.infra.formatter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.diagnostics" -> "torch.onnx._internal.fx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.diagnostics" -> "torch.onnx._internal.fx.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.diagnostics" -> "torch.onnx._internal.fx.type_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.dynamo_graph_extractor" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.dynamo_graph_extractor" -> "torch.export" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.dynamo_graph_extractor" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.dynamo_graph_extractor" -> "torch.onnx._internal._exporter_legacy" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.dynamo_graph_extractor" -> "torch.onnx._internal.io_adapter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.dynamo_graph_extractor" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.dynamo_graph_extractor" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.fx_onnx_interpreter" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.fx_onnx_interpreter" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.fx_onnx_interpreter" -> "torch.onnx._internal._lazy_import" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.fx_onnx_interpreter" -> "torch.onnx._internal.fx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.fx_onnx_interpreter" -> "torch.onnx._internal.fx._pass" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.fx_onnx_interpreter" -> "torch.onnx._internal.fx.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.fx_onnx_interpreter" -> "torch.onnx._internal.fx.onnxfunction_dispatcher" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.fx_onnx_interpreter" -> "torch.onnx._internal.fx.type_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.fx_onnx_interpreter" -> "torch.onnx._type_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.fx_onnx_interpreter" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.fx_onnx_interpreter" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.fx_symbolic_graph_extractor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.fx_symbolic_graph_extractor" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.fx_symbolic_graph_extractor" -> "torch.onnx._internal._exporter_legacy" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.fx_symbolic_graph_extractor" -> "torch.onnx._internal.fx.passes" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.fx_symbolic_graph_extractor" -> "torch.onnx._internal.io_adapter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.onnxfunction_dispatcher" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.onnxfunction_dispatcher" -> "torch.onnx._internal.fx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.onnxfunction_dispatcher" -> "torch.onnx._internal.fx.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.onnxfunction_dispatcher" -> "torch.onnx._internal.fx.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.onnxfunction_dispatcher" -> "torch.onnx._internal.fx.type_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes" -> "torch.onnx._internal.fx.passes.decomp" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes" -> "torch.onnx._internal.fx.passes.functionalization" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes" -> "torch.onnx._internal.fx.passes.modularization" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes" -> "torch.onnx._internal.fx.passes.readability" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes" -> "torch.onnx._internal.fx.passes.type_promotion" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes" -> "torch.onnx._internal.fx.passes.virtualization" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes._utils" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes._utils" -> "torch.fx.traceback" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.decomp" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.decomp" -> "torch._dispatch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.decomp" -> "torch._dispatch.python" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.decomp" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.decomp" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.decomp" -> "torch.fx.experimental" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.decomp" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.decomp" -> "torch.onnx._internal.fx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.decomp" -> "torch.onnx._internal.fx._pass" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.decomp" -> "torch.onnx._internal.fx.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.decomp" -> "torch.onnx._internal.fx.passes" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.decomp" -> "torch.onnx._internal.fx.passes._utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.functionalization" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.functionalization" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.functionalization" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.functionalization" -> "torch.fx.experimental" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.functionalization" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.functionalization" -> "torch.onnx._internal.fx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.functionalization" -> "torch.onnx._internal.fx._pass" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.functionalization" -> "torch.onnx._internal.fx.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.functionalization" -> "torch.onnx._internal.fx.passes" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.functionalization" -> "torch.onnx._internal.fx.passes._utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.functionalization" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.functionalization" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.modularization" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.modularization" -> "torch.onnx._internal.fx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.modularization" -> "torch.onnx._internal.fx._pass" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.modularization" -> "torch.onnx._internal.fx.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.modularization" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.modularization" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.readability" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.readability" -> "torch.onnx._internal.fx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.readability" -> "torch.onnx._internal.fx._pass" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.readability" -> "torch.onnx._internal.fx.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch._prims_common.wrappers" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch._refs" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch._refs.linalg" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch._refs.nn" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch._refs.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch._refs.special" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch.fx.experimental" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch.fx.traceback" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch.onnx._internal.fx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch.onnx._internal.fx._pass" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch.onnx._internal.fx.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch.onnx._internal.fx.type_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.type_promotion" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.virtualization" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.virtualization" -> "torch.onnx._internal.fx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.passes.virtualization" -> "torch.onnx._internal.fx._pass" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.patcher" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.registration" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.serialization" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.serialization" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.serialization" -> "torch.onnx._type_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.type_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.type_utils" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.fx.type_utils" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.io_adapter" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.io_adapter" -> "torch.export" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.io_adapter" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.io_adapter" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.jit_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.jit_utils" -> "torch.onnx._globals" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.jit_utils" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.jit_utils" -> "torch.onnx._internal.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnx_proto_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnx_proto_utils" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnx_proto_utils" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnx_proto_utils" -> "torch.onnx._internal.jit_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnx_proto_utils" -> "torch.onnx._internal.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnx_proto_utils" -> "torch.onnx.errors" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnxruntime" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnxruntime" -> "torch._dynamo.backends.common" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnxruntime" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnxruntime" -> "torch.fx._compatibility" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnxruntime" -> "torch.fx.passes.fake_tensor_prop" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnxruntime" -> "torch.fx.passes.infra.partitioner" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnxruntime" -> "torch.fx.passes.operator_support" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnxruntime" -> "torch.fx.passes.tools_common" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnxruntime" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnxruntime" -> "torch.onnx._internal.fx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnxruntime" -> "torch.onnx._internal.fx.decomposition_table" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnxruntime" -> "torch.onnx._internal.fx.fx_onnx_interpreter" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnxruntime" -> "torch.onnx._internal.fx.passes" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnxruntime" -> "torch.onnx._internal.fx.type_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnxruntime" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.onnxruntime" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.registration" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.registration" -> "torch.onnx._constants" [arrowhead="open", arrowtail="none"];
"torch.onnx._internal.registration" -> "torch.onnx.errors" [arrowhead="open", arrowtail="none"];
"torch.onnx._onnx_supported_ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._onnx_supported_ops" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx._onnx_supported_ops" -> "torch.onnx._constants" [arrowhead="open", arrowtail="none"];
"torch.onnx._onnx_supported_ops" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx._onnx_supported_ops" -> "torch.onnx._internal.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx._type_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx._type_utils" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx._type_utils" -> "torch.onnx.errors" [arrowhead="open", arrowtail="none"];
"torch.onnx.errors" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx.errors" -> "torch.onnx._constants" [arrowhead="open", arrowtail="none"];
"torch.onnx.errors" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx.errors" -> "torch.onnx._internal.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx.operators" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_caffe2" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_caffe2" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_caffe2" -> "torch.onnx._internal.jit_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_caffe2" -> "torch.onnx._internal.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_caffe2" -> "torch.onnx.symbolic_helper" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_caffe2" -> "torch.onnx.symbolic_opset9" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_helper" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_helper" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_helper" -> "torch.onnx._constants" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_helper" -> "torch.onnx._globals" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_helper" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_helper" -> "torch.onnx._internal.jit_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_helper" -> "torch.onnx._type_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_helper" -> "torch.onnx.errors" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_helper" -> "torch.onnx.symbolic_opset10" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_helper" -> "torch.onnx.symbolic_opset13" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_helper" -> "torch.onnx.symbolic_opset8" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_helper" -> "torch.onnx.symbolic_opset9" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_helper" -> "torch.onnx.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset10" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset10" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset10" -> "torch.onnx._constants" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset10" -> "torch.onnx._globals" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset10" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset10" -> "torch.onnx._internal.jit_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset10" -> "torch.onnx._internal.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset10" -> "torch.onnx._type_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset10" -> "torch.onnx.errors" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset10" -> "torch.onnx.symbolic_helper" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset10" -> "torch.onnx.symbolic_opset9" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset11" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset11" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset11" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset11" -> "torch.onnx._internal.jit_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset11" -> "torch.onnx._internal.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset11" -> "torch.onnx._type_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset11" -> "torch.onnx.errors" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset11" -> "torch.onnx.symbolic_helper" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset11" -> "torch.onnx.symbolic_opset10" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset11" -> "torch.onnx.symbolic_opset9" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset11" -> "torch.onnx.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset12" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset12" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset12" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset12" -> "torch.onnx._internal.jit_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset12" -> "torch.onnx._internal.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset12" -> "torch.onnx._type_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset12" -> "torch.onnx.errors" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset12" -> "torch.onnx.symbolic_helper" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset12" -> "torch.onnx.symbolic_opset9" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset12" -> "torch.onnx.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset13" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset13" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset13" -> "torch.onnx._constants" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset13" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset13" -> "torch.onnx._internal.jit_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset13" -> "torch.onnx._internal.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset13" -> "torch.onnx._type_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset13" -> "torch.onnx.errors" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset13" -> "torch.onnx.symbolic_helper" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset13" -> "torch.onnx.symbolic_opset11" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset13" -> "torch.onnx.symbolic_opset9" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset13" -> "torch.onnx.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset14" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset14" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset14" -> "torch.onnx._constants" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset14" -> "torch.onnx._globals" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset14" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset14" -> "torch.onnx._internal.jit_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset14" -> "torch.onnx._internal.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset14" -> "torch.onnx._type_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset14" -> "torch.onnx.symbolic_helper" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset15" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset15" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset15" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset15" -> "torch.onnx._internal.jit_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset15" -> "torch.onnx._internal.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset15" -> "torch.onnx.symbolic_helper" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset15" -> "torch.onnx.symbolic_opset9" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset16" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset16" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset16" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset16" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset16" -> "torch.onnx._internal.jit_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset16" -> "torch.onnx._internal.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset16" -> "torch.onnx._type_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset16" -> "torch.onnx.errors" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset16" -> "torch.onnx.symbolic_helper" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset16" -> "torch.onnx.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset17" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset17" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset17" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset17" -> "torch.onnx._internal.jit_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset17" -> "torch.onnx._internal.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset17" -> "torch.onnx._type_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset17" -> "torch.onnx.errors" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset17" -> "torch.onnx.symbolic_helper" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset18" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset18" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset18" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset18" -> "torch.onnx._internal.jit_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset18" -> "torch.onnx._internal.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset18" -> "torch.onnx._type_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset18" -> "torch.onnx.symbolic_helper" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset18" -> "torch.onnx.symbolic_opset9" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset20" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset20" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset20" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset20" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset20" -> "torch.onnx._internal.jit_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset20" -> "torch.onnx._internal.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset20" -> "torch.onnx.symbolic_helper" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset7" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset7" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset7" -> "torch.onnx._internal.jit_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset7" -> "torch.onnx._internal.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset7" -> "torch.onnx.symbolic_helper" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset7" -> "torch.onnx.symbolic_opset9" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset8" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset8" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset8" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset8" -> "torch.onnx._internal.jit_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset8" -> "torch.onnx._internal.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset8" -> "torch.onnx._type_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset8" -> "torch.onnx.errors" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset8" -> "torch.onnx.symbolic_helper" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset8" -> "torch.onnx.symbolic_opset9" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset9" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset9" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset9" -> "torch.onnx._constants" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset9" -> "torch.onnx._deprecation" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset9" -> "torch.onnx._globals" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset9" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset9" -> "torch.onnx._internal.jit_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset9" -> "torch.onnx._internal.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset9" -> "torch.onnx._type_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset9" -> "torch.onnx.errors" [arrowhead="open", arrowtail="none"];
"torch.onnx.symbolic_opset9" -> "torch.onnx.symbolic_helper" [arrowhead="open", arrowtail="none"];
"torch.onnx.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx.utils" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx.utils" -> "torch.onnx._constants" [arrowhead="open", arrowtail="none"];
"torch.onnx.utils" -> "torch.onnx._deprecation" [arrowhead="open", arrowtail="none"];
"torch.onnx.utils" -> "torch.onnx._globals" [arrowhead="open", arrowtail="none"];
"torch.onnx.utils" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx.utils" -> "torch.onnx._internal.diagnostics" [arrowhead="open", arrowtail="none"];
"torch.onnx.utils" -> "torch.onnx._internal.jit_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.utils" -> "torch.onnx._internal.onnx_proto_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.utils" -> "torch.onnx._internal.registration" [arrowhead="open", arrowtail="none"];
"torch.onnx.utils" -> "torch.onnx.errors" [arrowhead="open", arrowtail="none"];
"torch.onnx.utils" -> "torch.onnx.symbolic_helper" [arrowhead="open", arrowtail="none"];
"torch.onnx.verification" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.onnx.verification" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.onnx.verification" -> "torch.onnx._constants" [arrowhead="open", arrowtail="none"];
"torch.onnx.verification" -> "torch.onnx._experimental" [arrowhead="open", arrowtail="none"];
"torch.onnx.verification" -> "torch.onnx._globals" [arrowhead="open", arrowtail="none"];
"torch.onnx.verification" -> "torch.onnx._internal" [arrowhead="open", arrowtail="none"];
"torch.onnx.verification" -> "torch.onnx._internal.onnx_proto_utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.verification" -> "torch.onnx.utils" [arrowhead="open", arrowtail="none"];
"torch.onnx.verification" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.optim" -> "torch.optim" [arrowhead="open", arrowtail="none"];
"torch.optim" -> "torch.optim._adafactor" [arrowhead="open", arrowtail="none"];
"torch.optim" -> "torch.optim.adadelta" [arrowhead="open", arrowtail="none"];
"torch.optim" -> "torch.optim.adagrad" [arrowhead="open", arrowtail="none"];
"torch.optim" -> "torch.optim.adam" [arrowhead="open", arrowtail="none"];
"torch.optim" -> "torch.optim.adamax" [arrowhead="open", arrowtail="none"];
"torch.optim" -> "torch.optim.adamw" [arrowhead="open", arrowtail="none"];
"torch.optim" -> "torch.optim.asgd" [arrowhead="open", arrowtail="none"];
"torch.optim" -> "torch.optim.lbfgs" [arrowhead="open", arrowtail="none"];
"torch.optim" -> "torch.optim.lr_scheduler" [arrowhead="open", arrowtail="none"];
"torch.optim" -> "torch.optim.nadam" [arrowhead="open", arrowtail="none"];
"torch.optim" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.optim" -> "torch.optim.radam" [arrowhead="open", arrowtail="none"];
"torch.optim" -> "torch.optim.rmsprop" [arrowhead="open", arrowtail="none"];
"torch.optim" -> "torch.optim.rprop" [arrowhead="open", arrowtail="none"];
"torch.optim" -> "torch.optim.sgd" [arrowhead="open", arrowtail="none"];
"torch.optim" -> "torch.optim.sparse_adam" [arrowhead="open", arrowtail="none"];
"torch.optim" -> "torch.optim.swa_utils" [arrowhead="open", arrowtail="none"];
"torch.optim._adafactor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.optim._adafactor" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.optim._functional" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.optim._functional" -> "torch.optim.adadelta" [arrowhead="open", arrowtail="none"];
"torch.optim._functional" -> "torch.optim.adagrad" [arrowhead="open", arrowtail="none"];
"torch.optim._functional" -> "torch.optim.adam" [arrowhead="open", arrowtail="none"];
"torch.optim._functional" -> "torch.optim.adamax" [arrowhead="open", arrowtail="none"];
"torch.optim._functional" -> "torch.optim.adamw" [arrowhead="open", arrowtail="none"];
"torch.optim._functional" -> "torch.optim.asgd" [arrowhead="open", arrowtail="none"];
"torch.optim._functional" -> "torch.optim.nadam" [arrowhead="open", arrowtail="none"];
"torch.optim._functional" -> "torch.optim.radam" [arrowhead="open", arrowtail="none"];
"torch.optim._functional" -> "torch.optim.rmsprop" [arrowhead="open", arrowtail="none"];
"torch.optim._functional" -> "torch.optim.rprop" [arrowhead="open", arrowtail="none"];
"torch.optim._functional" -> "torch.optim.sgd" [arrowhead="open", arrowtail="none"];
"torch.optim._multi_tensor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.optim._multi_tensor" -> "torch.optim" [arrowhead="open", arrowtail="none"];
"torch.optim.adadelta" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.optim.adadelta" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.optim.adagrad" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.optim.adagrad" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.optim.adam" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.optim.adam" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.optim.adamax" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.optim.adamax" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.optim.adamw" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.optim.adamw" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.optim.asgd" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.optim.asgd" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.optim.lbfgs" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.optim.lbfgs" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.optim.lr_scheduler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.optim.lr_scheduler" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.optim.nadam" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.optim.nadam" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.optim.optimizer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.optim.optimizer" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch.optim.optimizer" -> "torch.utils._foreach_utils" [arrowhead="open", arrowtail="none"];
"torch.optim.optimizer" -> "torch.utils.hooks" [arrowhead="open", arrowtail="none"];
"torch.optim.radam" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.optim.radam" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.optim.rmsprop" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.optim.rmsprop" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.optim.rprop" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.optim.rprop" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.optim.sgd" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.optim.sgd" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.optim.sparse_adam" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.optim.sparse_adam" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.optim.swa_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.optim.swa_utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.optim.swa_utils" -> "torch.optim.lr_scheduler" [arrowhead="open", arrowtail="none"];
"torch.optim.swa_utils" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.optim.swa_utils" -> "torch.utils._foreach_utils" [arrowhead="open", arrowtail="none"];
"torch.overrides" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.overrides" -> "torch.__future__" [arrowhead="open", arrowtail="none"];
"torch.overrides" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.package" -> "torch.package.analyze.is_from_package" [arrowhead="open", arrowtail="none"];
"torch.package" -> "torch.package.file_structure_representation" [arrowhead="open", arrowtail="none"];
"torch.package" -> "torch.package.glob_group" [arrowhead="open", arrowtail="none"];
"torch.package" -> "torch.package.importer" [arrowhead="open", arrowtail="none"];
"torch.package" -> "torch.package.package_exporter" [arrowhead="open", arrowtail="none"];
"torch.package" -> "torch.package.package_importer" [arrowhead="open", arrowtail="none"];
"torch.package._directory_reader" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.package._directory_reader" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.package._package_pickler" -> "torch.package.importer" [arrowhead="open", arrowtail="none"];
"torch.package._package_unpickler" -> "torch.package.importer" [arrowhead="open", arrowtail="none"];
"torch.package.analyze" -> "torch.package.analyze.find_first_use_of_broken_modules" [arrowhead="open", arrowtail="none"];
"torch.package.analyze" -> "torch.package.analyze.trace_dependencies" [arrowhead="open", arrowtail="none"];
"torch.package.analyze.find_first_use_of_broken_modules" -> "torch.package.package_exporter" [arrowhead="open", arrowtail="none"];
"torch.package.file_structure_representation" -> "torch.package.glob_group" [arrowhead="open", arrowtail="none"];
"torch.package.find_file_dependencies" -> "torch.package._importlib" [arrowhead="open", arrowtail="none"];
"torch.package.importer" -> "torch.package._mangling" [arrowhead="open", arrowtail="none"];
"torch.package.package_exporter" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.package.package_exporter" -> "torch.package._digraph" [arrowhead="open", arrowtail="none"];
"torch.package.package_exporter" -> "torch.package._importlib" [arrowhead="open", arrowtail="none"];
"torch.package.package_exporter" -> "torch.package._mangling" [arrowhead="open", arrowtail="none"];
"torch.package.package_exporter" -> "torch.package._package_pickler" [arrowhead="open", arrowtail="none"];
"torch.package.package_exporter" -> "torch.package._stdlib" [arrowhead="open", arrowtail="none"];
"torch.package.package_exporter" -> "torch.package.find_file_dependencies" [arrowhead="open", arrowtail="none"];
"torch.package.package_exporter" -> "torch.package.glob_group" [arrowhead="open", arrowtail="none"];
"torch.package.package_exporter" -> "torch.package.importer" [arrowhead="open", arrowtail="none"];
"torch.package.package_exporter" -> "torch.serialization" [arrowhead="open", arrowtail="none"];
"torch.package.package_exporter" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.package.package_exporter" -> "torch.utils.hooks" [arrowhead="open", arrowtail="none"];
"torch.package.package_importer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.package.package_importer" -> "torch.package._directory_reader" [arrowhead="open", arrowtail="none"];
"torch.package.package_importer" -> "torch.package._importlib" [arrowhead="open", arrowtail="none"];
"torch.package.package_importer" -> "torch.package._mangling" [arrowhead="open", arrowtail="none"];
"torch.package.package_importer" -> "torch.package._package_unpickler" [arrowhead="open", arrowtail="none"];
"torch.package.package_importer" -> "torch.package.file_structure_representation" [arrowhead="open", arrowtail="none"];
"torch.package.package_importer" -> "torch.package.importer" [arrowhead="open", arrowtail="none"];
"torch.package.package_importer" -> "torch.serialization" [arrowhead="open", arrowtail="none"];
"torch.profiler" -> "torch._environment" [arrowhead="open", arrowtail="none"];
"torch.profiler" -> "torch.autograd.profiler" [arrowhead="open", arrowtail="none"];
"torch.profiler" -> "torch.optim.optimizer" [arrowhead="open", arrowtail="none"];
"torch.profiler" -> "torch.profiler" [arrowhead="open", arrowtail="none"];
"torch.profiler._memory_profiler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.profiler._memory_profiler" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.profiler._memory_profiler" -> "torch.profiler" [arrowhead="open", arrowtail="none"];
"torch.profiler._memory_profiler" -> "torch.profiler._utils" [arrowhead="open", arrowtail="none"];
"torch.profiler._pattern_matcher" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.profiler._pattern_matcher" -> "torch.profiler" [arrowhead="open", arrowtail="none"];
"torch.profiler._pattern_matcher" -> "torch.profiler._utils" [arrowhead="open", arrowtail="none"];
"torch.profiler._pattern_matcher" -> "torch.utils.benchmark" [arrowhead="open", arrowtail="none"];
"torch.profiler._utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.profiler._utils" -> "torch.autograd.profiler" [arrowhead="open", arrowtail="none"];
"torch.profiler._utils" -> "torch.profiler" [arrowhead="open", arrowtail="none"];
"torch.profiler.profiler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.profiler.profiler" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch.profiler.profiler" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch.profiler.profiler" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch.profiler.profiler" -> "torch.autograd.profiler" [arrowhead="open", arrowtail="none"];
"torch.profiler.profiler" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.profiler.profiler" -> "torch.profiler._memory_profiler" [arrowhead="open", arrowtail="none"];
"torch.profiler.python_tracer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.quantization" -> "torch.quantization.fake_quantize" [arrowhead="open", arrowtail="none"];
"torch.quantization" -> "torch.quantization.fuse_modules" [arrowhead="open", arrowtail="none"];
"torch.quantization" -> "torch.quantization.fuser_method_mappings" [arrowhead="open", arrowtail="none"];
"torch.quantization" -> "torch.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.quantization" -> "torch.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.quantization" -> "torch.quantization.quant_type" [arrowhead="open", arrowtail="none"];
"torch.quantization" -> "torch.quantization.quantization_mappings" [arrowhead="open", arrowtail="none"];
"torch.quantization" -> "torch.quantization.quantize" [arrowhead="open", arrowtail="none"];
"torch.quantization" -> "torch.quantization.quantize_jit" [arrowhead="open", arrowtail="none"];
"torch.quantization" -> "torch.quantization.stubs" [arrowhead="open", arrowtail="none"];
"torch.quantization._numeric_suite" -> "torch.ao.ns._numeric_suite" [arrowhead="open", arrowtail="none"];
"torch.quantization._numeric_suite_fx" -> "torch.ao.ns._numeric_suite_fx" [arrowhead="open", arrowtail="none"];
"torch.quantization._quantized_conversions" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.quantization.fake_quantize" -> "torch.ao.quantization.fake_quantize" [arrowhead="open", arrowtail="none"];
"torch.quantization.fuse_modules" -> "torch.ao.quantization.fuse_modules" [arrowhead="open", arrowtail="none"];
"torch.quantization.fuse_modules" -> "torch.ao.quantization.fuser_method_mappings" [arrowhead="open", arrowtail="none"];
"torch.quantization.fuser_method_mappings" -> "torch.ao.quantization.fuser_method_mappings" [arrowhead="open", arrowtail="none"];
"torch.quantization.fx" -> "torch.ao.quantization.fx.convert" [arrowhead="open", arrowtail="none"];
"torch.quantization.fx" -> "torch.ao.quantization.fx.fuse" [arrowhead="open", arrowtail="none"];
"torch.quantization.fx" -> "torch.ao.quantization.fx.prepare" [arrowhead="open", arrowtail="none"];
"torch.quantization.fx._equalize" -> "torch.ao.quantization.fx._equalize" [arrowhead="open", arrowtail="none"];
"torch.quantization.fx.convert" -> "torch.ao.quantization.fx.convert" [arrowhead="open", arrowtail="none"];
"torch.quantization.fx.fuse" -> "torch.ao.quantization.fx.fuse" [arrowhead="open", arrowtail="none"];
"torch.quantization.fx.fusion_patterns" -> "torch.ao.quantization.fx.fuse_handler" [arrowhead="open", arrowtail="none"];
"torch.quantization.fx.graph_module" -> "torch.ao.quantization.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.quantization.fx.match_utils" -> "torch.ao.quantization.fx.match_utils" [arrowhead="open", arrowtail="none"];
"torch.quantization.fx.pattern_utils" -> "torch.ao.quantization.fx.pattern_utils" [arrowhead="open", arrowtail="none"];
"torch.quantization.fx.prepare" -> "torch.ao.quantization.fx.prepare" [arrowhead="open", arrowtail="none"];
"torch.quantization.fx.quantization_patterns" -> "torch.ao.quantization.fx.quantize_handler" [arrowhead="open", arrowtail="none"];
"torch.quantization.fx.quantization_types" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.quantization.fx.utils" -> "torch.ao.quantization.fx.utils" [arrowhead="open", arrowtail="none"];
"torch.quantization.observer" -> "torch.ao.quantization.observer" [arrowhead="open", arrowtail="none"];
"torch.quantization.qconfig" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none"];
"torch.quantization.quant_type" -> "torch.ao.quantization.quant_type" [arrowhead="open", arrowtail="none"];
"torch.quantization.quantization_mappings" -> "torch.ao.quantization.quantization_mappings" [arrowhead="open", arrowtail="none"];
"torch.quantization.quantize" -> "torch.ao.quantization.quantize" [arrowhead="open", arrowtail="none"];
"torch.quantization.quantize_fx" -> "torch.ao.quantization.fx.graph_module" [arrowhead="open", arrowtail="none"];
"torch.quantization.quantize_fx" -> "torch.ao.quantization.quantize_fx" [arrowhead="open", arrowtail="none"];
"torch.quantization.quantize_jit" -> "torch.ao.quantization.quantize_jit" [arrowhead="open", arrowtail="none"];
"torch.quantization.stubs" -> "torch.ao.quantization.stubs" [arrowhead="open", arrowtail="none"];
"torch.quantization.utils" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none"];
"torch.quasirandom" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.random" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.random" -> "torch.autograd.graph.save_on_cpu.__init__.torch.cuda" [arrowhead="open", arrowtail="none"];
"torch.return_types" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.return_types" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.serialization" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.serialization" -> "torch._sources" [arrowhead="open", arrowtail="none"];
"torch.serialization" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.serialization" -> "torch._weights_only_unpickler" [arrowhead="open", arrowtail="none"];
"torch.serialization" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.serialization" -> "torch.storage" [arrowhead="open", arrowtail="none"];
"torch.serialization" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.signal.windows" -> "torch.signal.windows.windows" [arrowhead="open", arrowtail="none"];
"torch.signal.windows.windows" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.signal.windows.windows" -> "torch._torch_docs" [arrowhead="open", arrowtail="none"];
"torch.sparse" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.sparse" -> "torch.sparse.semi_structured" [arrowhead="open", arrowtail="none"];
"torch.sparse._semi_structured_conversions" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.sparse._semi_structured_ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.sparse._triton_ops" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.sparse._triton_ops" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch.sparse._triton_ops" -> "torch.sparse._triton_ops_meta" [arrowhead="open", arrowtail="none"];
"torch.sparse._triton_ops" -> "torch.utils._triton" [arrowhead="open", arrowtail="none"];
"torch.sparse._triton_ops_meta" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.sparse._triton_ops_meta" -> "torch.hub" [arrowhead="open", arrowtail="none"];
"torch.sparse._triton_ops_meta" -> "torch.sparse._triton_ops" [arrowhead="open", arrowtail="none"];
"torch.sparse._triton_ops_meta" -> "torch.testing" [arrowhead="open", arrowtail="none"];
"torch.sparse.semi_structured" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.sparse.semi_structured" -> "torch.sparse._semi_structured_conversions" [arrowhead="open", arrowtail="none"];
"torch.sparse.semi_structured" -> "torch.sparse._semi_structured_ops" [arrowhead="open", arrowtail="none"];
"torch.special" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.special" -> "torch._torch_docs" [arrowhead="open", arrowtail="none"];
"torch.storage" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.storage" -> "torch.__future__" [arrowhead="open", arrowtail="none"];
"torch.storage" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.storage" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.storage" -> "torch.multiprocessing" [arrowhead="open", arrowtail="none"];
"torch.storage" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.testing" -> "torch.testing._comparison" [arrowhead="open", arrowtail="none"];
"torch.testing" -> "torch.testing._creation" [arrowhead="open", arrowtail="none"];
"torch.testing._comparison" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._creation" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.autocast_test_lists" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.autocast_test_lists" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.autograd_function_db" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.autograd_function_db" -> "torch.testing" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.autograd_function_db" -> "torch.testing._internal.common_dtype" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.autograd_function_db" -> "torch.testing._internal.opinfo.core" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_cuda" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_cuda" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_device_type" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_device_type" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_device_type" -> "torch._lazy" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_device_type" -> "torch.testing._internal.common_cuda" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_device_type" -> "torch.testing._internal.common_dtype" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_device_type" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_dist_composable" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_dist_composable" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_distributed" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_distributed" -> "torch._logging._internal" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_distributed" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_distributed" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_distributed" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_distributed" -> "torch.testing._internal.distributed.multi_threaded_pg" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_dtype" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_fsdp" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_fsdp" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_fsdp" -> "torch.distributed._composable" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_fsdp" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_fsdp" -> "torch.distributed.fsdp" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_fsdp" -> "torch.distributed.fsdp._common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_fsdp" -> "torch.distributed.fsdp._fully_shard._fsdp_param_group" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_fsdp" -> "torch.distributed.fsdp._init_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_fsdp" -> "torch.distributed.fsdp.fully_sharded_data_parallel" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_fsdp" -> "torch.distributed.fsdp.sharded_grad_scaler" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_fsdp" -> "torch.distributed.fsdp.wrap" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_fsdp" -> "torch.distributed.tensor" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_fsdp" -> "torch.distributed.tensor.parallel" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_fsdp" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_fsdp" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_fsdp" -> "torch.nn.parallel.distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_fsdp" -> "torch.testing._internal.common_distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_fsdp" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_fsdp" -> "torch.utils._triton" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_jit" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_jit" -> "torch.testing._internal.common_dtype" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_jit" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch._prims" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch._refs" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch.testing" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch.testing._internal" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch.testing._internal.common_cuda" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch.testing._internal.common_device_type" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch.testing._internal.common_dtype" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch.testing._internal.opinfo" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch.testing._internal.opinfo.core" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch.testing._internal.opinfo.definitions._masked" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch.testing._internal.opinfo.definitions.linalg" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch.testing._internal.opinfo.definitions.sparse" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch.testing._internal.opinfo.definitions.special" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch.testing._internal.opinfo.refs" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch.testing._internal.opinfo.utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch.testing._utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_methods_invocations" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_mkldnn" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_modules" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_modules" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_modules" -> "torch.nn.utils.rnn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_modules" -> "torch.testing" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_modules" -> "torch.testing._internal.common_cuda" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_modules" -> "torch.testing._internal.common_device_type" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_modules" -> "torch.testing._internal.common_dtype" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_modules" -> "torch.testing._internal.common_methods_invocations" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_modules" -> "torch.testing._internal.common_nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_modules" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_nn" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_nn" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_nn" -> "torch.autograd.gradcheck" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_nn" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_nn" -> "torch.nn._reduction" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_nn" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_nn" -> "torch.testing._internal.common_cuda" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_nn" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_nn" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_optimizers" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_optimizers" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_optimizers" -> "torch.optim" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_optimizers" -> "torch.optim.lr_scheduler" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_optimizers" -> "torch.testing._internal.common_device_type" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_optimizers" -> "torch.testing._internal.common_methods_invocations" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_optimizers" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_optimizers" -> "torch.utils._foreach_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_pruning" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_pruning" -> "torch.ao.pruning" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_pruning" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_pruning" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.ao.nn.intrinsic" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.ao.nn.intrinsic.quantized.dynamic" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.ao.nn.quantized" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.ao.nn.quantized.dynamic" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.ao.ns.fx.ns_types" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.ao.quantization" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.ao.quantization.backend_config" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.ao.quantization.quantization_mappings" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.ao.quantization.quantize" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.ao.quantization.quantize_fx" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.ao.quantization.quantize_jit" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.ao.quantization.quantize_pt2e" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.ao.quantization.quantizer.x86_inductor_quantizer" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.ao.quantization.quantizer.xnnpack_quantizer" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.ao.quantization.quantizer.xpu_inductor_quantizer" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.export" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.fx" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.fx.graph" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.jit.mobile" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.testing" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.testing._internal.common_quantized" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantization" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantized" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_quantized" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_subclass" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_subclass" -> "torch.testing._internal.logging_tensor" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_subclass" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_utils" -> "torch._dynamo.trace_rules" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_utils" -> "torch._logging.scribe" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_utils" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_utils" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_utils" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_utils" -> "torch.testing" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_utils" -> "torch.testing._comparison" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_utils" -> "torch.testing._internal.common_cuda" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_utils" -> "torch.testing._internal.common_device_type" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_utils" -> "torch.testing._internal.common_dtype" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_utils" -> "torch.testing._internal.dynamo_test_failures" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_utils" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_utils" -> "torch.utils._import_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_utils" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.common_utils" -> "torch.utils.cpp_extension" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.composite_compliance" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.composite_compliance" -> "torch.autograd.forward_ad" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.composite_compliance" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.composite_compliance" -> "torch.utils._mode_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.composite_compliance" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.composite_compliance" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.custom_op_db" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.custom_op_db" -> "torch.testing" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.custom_op_db" -> "torch.testing._internal.autograd_function_db" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.custom_op_db" -> "torch.testing._internal.common_dtype" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.custom_op_db" -> "torch.testing._internal.opinfo.core" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.custom_op_db" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.custom_tensor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.custom_tensor" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.custom_tensor" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.data.network1" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.data.network2" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.dist_utils" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.dist_utils" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.dist_utils" -> "torch.distributed.rpc.api" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.dist_utils" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._shard.sharded_tensor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._shard.sharded_tensor" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._shard.sharded_tensor" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._shard.sharded_tensor" -> "torch.testing._internal.common_distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._shard.sharded_tensor._test_ops_common" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._shard.sharded_tensor._test_ops_common" -> "torch.distributed._shard.sharding_spec" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._shard.sharded_tensor._test_ops_common" -> "torch.distributed._shard.sharding_spec._internals" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._shard.sharded_tensor._test_st_common" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._shard.sharded_tensor._test_st_common" -> "torch.distributed._shard" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._shard.sharded_tensor._test_st_common" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._shard.sharded_tensor._test_st_common" -> "torch.distributed._shard.sharding_spec" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._shard.test_common" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._shard.test_common" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._shard.test_common" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._tensor.common_dtensor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._tensor.common_dtensor" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._tensor.common_dtensor" -> "torch.distributed._tensor" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._tensor.common_dtensor" -> "torch.distributed._tensor.placement_types" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._tensor.common_dtensor" -> "torch.distributed.tensor.parallel" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._tensor.common_dtensor" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._tensor.common_dtensor" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._tensor.common_dtensor" -> "torch.testing._internal.common_distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed._tensor.common_dtensor" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.checkpoint_utils" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.common_state_dict" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.common_state_dict" -> "torch.distributed._sharded_tensor" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.common_state_dict" -> "torch.distributed._state_dict_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.common_state_dict" -> "torch.distributed._tensor" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.common_state_dict" -> "torch.distributed.checkpoint.state_dict" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.common_state_dict" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.ddp_under_dist_autograd_test" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.ddp_under_dist_autograd_test" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.ddp_under_dist_autograd_test" -> "torch.distributed.autograd" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.ddp_under_dist_autograd_test" -> "torch.distributed.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.ddp_under_dist_autograd_test" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.ddp_under_dist_autograd_test" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.ddp_under_dist_autograd_test" -> "torch.nn.parallel" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.ddp_under_dist_autograd_test" -> "torch.testing._internal.common_distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.ddp_under_dist_autograd_test" -> "torch.testing._internal.dist_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.ddp_under_dist_autograd_test" -> "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.cuda.amp" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.distributed.algorithms.ddp_comm_hooks" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.distributed.algorithms.ddp_comm_hooks.default_hooks" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.distributed.algorithms.ddp_comm_hooks.post_localSGD_hook" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.distributed.algorithms.ddp_comm_hooks.powerSGD_hook" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.distributed.algorithms.model_averaging.averagers" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.distributed.algorithms.model_averaging.hierarchical_model_averager" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.distributed.algorithms.model_averaging.utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.distributed.optim" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.distributed.optim.post_localSGD_optimizer" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.distributed.utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.nn.parallel" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.nn.parallel.distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.profiler" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.testing._internal.common_distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_test" -> "torch.utils.data.distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_utils" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.distributed_utils" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.fake_pg" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.multi_threaded_pg" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.multi_threaded_pg" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.multi_threaded_pg" -> "torch.distributed.distributed_c10d" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.multi_threaded_pg" -> "torch.futures" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.multi_threaded_pg" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.multi_threaded_pg" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.nn.api.remote_module_test" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.nn.api.remote_module_test" -> "torch._jit_internal" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.nn.api.remote_module_test" -> "torch.distributed.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.nn.api.remote_module_test" -> "torch.distributed.nn.api.remote_module" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.nn.api.remote_module_test" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.nn.api.remote_module_test" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.nn.api.remote_module_test" -> "torch.testing._internal.common_distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.nn.api.remote_module_test" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.nn.api.remote_module_test" -> "torch.testing._internal.dist_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.nn.api.remote_module_test" -> "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_autograd_test" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_autograd_test" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_autograd_test" -> "torch.autograd.function" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_autograd_test" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_autograd_test" -> "torch.distributed.autograd" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_autograd_test" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_autograd_test" -> "torch.distributed.rpc.api" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_autograd_test" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_autograd_test" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_autograd_test" -> "torch.testing._internal.common_distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_autograd_test" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_autograd_test" -> "torch.testing._internal.dist_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_autograd_test" -> "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_optimizer_test" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_optimizer_test" -> "torch.distributed.autograd" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_optimizer_test" -> "torch.distributed.optim" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_optimizer_test" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_optimizer_test" -> "torch.optim" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_optimizer_test" -> "torch.testing._internal.dist_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.dist_optimizer_test" -> "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.examples.parameter_server_test" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.examples.parameter_server_test" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.examples.parameter_server_test" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.examples.parameter_server_test" -> "torch.optim" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.examples.parameter_server_test" -> "torch.testing._internal.dist_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.examples.parameter_server_test" -> "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.examples.reinforcement_learning_rpc_test" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.examples.reinforcement_learning_rpc_test" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.examples.reinforcement_learning_rpc_test" -> "torch.distributions" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.examples.reinforcement_learning_rpc_test" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.examples.reinforcement_learning_rpc_test" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.examples.reinforcement_learning_rpc_test" -> "torch.optim" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.examples.reinforcement_learning_rpc_test" -> "torch.testing._internal.dist_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.examples.reinforcement_learning_rpc_test" -> "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.faulty_agent_rpc_test" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.faulty_agent_rpc_test" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.faulty_agent_rpc_test" -> "torch.distributed.rpc.api" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.faulty_agent_rpc_test" -> "torch.testing._internal.dist_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.faulty_agent_rpc_test" -> "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.faulty_rpc_agent_test_fixture" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.faulty_rpc_agent_test_fixture" -> "torch.distributed.rpc._testing" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.faulty_rpc_agent_test_fixture" -> "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.dist_autograd_test" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.dist_autograd_test" -> "torch.distributed.autograd" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.dist_autograd_test" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.dist_autograd_test" -> "torch.testing" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.dist_autograd_test" -> "torch.testing._internal.dist_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.dist_autograd_test" -> "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.rpc_test" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.rpc_test" -> "torch.autograd.profiler" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.rpc_test" -> "torch.autograd.profiler_legacy" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.rpc_test" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.rpc_test" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.rpc_test" -> "torch.distributed.rpc.api" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.rpc_test" -> "torch.distributed.rpc.internal" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.rpc_test" -> "torch.futures" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.rpc_test" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.rpc_test" -> "torch.testing._internal.dist_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.rpc_test" -> "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.rpc_test_faulty" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.rpc_test_faulty" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.rpc_test_faulty" -> "torch.testing._internal.dist_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.jit.rpc_test_faulty" -> "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.rpc_agent_test_fixture" -> "torch.testing._internal.dist_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.rpc_test" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.rpc_test" -> "torch.autograd.profiler_legacy" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.rpc_test" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.rpc_test" -> "torch.distributed.autograd" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.rpc_test" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.rpc_test" -> "torch.distributed.rpc.api" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.rpc_test" -> "torch.distributed.rpc.internal" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.rpc_test" -> "torch.futures" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.rpc_test" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.rpc_test" -> "torch.testing._internal.common_distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.rpc_test" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.rpc_test" -> "torch.testing._internal.dist_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.rpc_test" -> "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.tensorpipe_rpc_agent_test_fixture" -> "torch.distributed.rpc" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.tensorpipe_rpc_agent_test_fixture" -> "torch.testing._internal.common_distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc.tensorpipe_rpc_agent_test_fixture" -> "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc_utils" -> "torch.testing._internal.common_distributed" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc_utils" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc_utils" -> "torch.testing._internal.distributed.ddp_under_dist_autograd_test" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc_utils" -> "torch.testing._internal.distributed.nn.api.remote_module_test" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc_utils" -> "torch.testing._internal.distributed.rpc.dist_autograd_test" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc_utils" -> "torch.testing._internal.distributed.rpc.dist_optimizer_test" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc_utils" -> "torch.testing._internal.distributed.rpc.examples.parameter_server_test" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc_utils" -> "torch.testing._internal.distributed.rpc.examples.reinforcement_learning_rpc_test" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc_utils" -> "torch.testing._internal.distributed.rpc.faulty_agent_rpc_test" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc_utils" -> "torch.testing._internal.distributed.rpc.jit.dist_autograd_test" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc_utils" -> "torch.testing._internal.distributed.rpc.jit.rpc_test" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc_utils" -> "torch.testing._internal.distributed.rpc.jit.rpc_test_faulty" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc_utils" -> "torch.testing._internal.distributed.rpc.rpc_agent_test_fixture" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.distributed.rpc_utils" -> "torch.testing._internal.distributed.rpc.rpc_test" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.fake_config_module" -> "torch.utils._config_module" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.hop_db" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.hop_db" -> "torch._higher_order_ops.invoke_subgraph" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.hop_db" -> "torch.nn.attention.flex_attention" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.hop_db" -> "torch.testing" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.hop_db" -> "torch.testing._internal.common_device_type" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.hop_db" -> "torch.testing._internal.common_dtype" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.hop_db" -> "torch.testing._internal.opinfo.core" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.hypothesis_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.hypothesis_utils" -> "torch.testing._internal.common_quantized" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.inductor_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.inductor_utils" -> "torch._inductor.codecache" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.inductor_utils" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.inductor_utils" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.inductor_utils" -> "torch.utils._triton" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.jit_metaprogramming_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.jit_metaprogramming_utils" -> "torch.jit.annotations" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.jit_metaprogramming_utils" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.jit_metaprogramming_utils" -> "torch.testing._internal.common_nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.jit_metaprogramming_utils" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.jit_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.jit_utils" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.jit_utils" -> "torch.autograd.function" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.jit_utils" -> "torch.jit.annotations" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.jit_utils" -> "torch.onnx" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.jit_utils" -> "torch.testing" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.jit_utils" -> "torch.testing._internal.common_jit" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.jit_utils" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.logging_tensor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.logging_tensor" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.logging_tensor" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.logging_tensor" -> "torch.utils.weak" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.logging_utils" -> "torch._dynamo.test_case" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.logging_utils" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.logging_utils" -> "torch._inductor" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.logging_utils" -> "torch._inductor.config" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo" -> "torch.testing._internal.opinfo.core" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.core" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.core" -> "torch.testing" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.core" -> "torch.testing._internal.common_device_type" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.core" -> "torch.testing._internal.common_dtype" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.core" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.core" -> "torch.testing._internal.opinfo" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.core" -> "torch.testing._internal.opinfo.utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions" -> "torch.testing._internal.opinfo.core" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions" -> "torch.testing._internal.opinfo.definitions" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions" -> "torch.testing._internal.opinfo.definitions._masked" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions" -> "torch.testing._internal.opinfo.definitions.fft" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions" -> "torch.testing._internal.opinfo.definitions.linalg" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions" -> "torch.testing._internal.opinfo.definitions.signal" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions" -> "torch.testing._internal.opinfo.definitions.special" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions._masked" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions._masked" -> "torch.testing" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions._masked" -> "torch.testing._internal.common_device_type" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions._masked" -> "torch.testing._internal.common_dtype" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions._masked" -> "torch.testing._internal.common_methods_invocations" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions._masked" -> "torch.testing._internal.opinfo.core" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions._masked" -> "torch.testing._internal.opinfo.utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.fft" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.fft" -> "torch.testing" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.fft" -> "torch.testing._internal.common_cuda" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.fft" -> "torch.testing._internal.common_device_type" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.fft" -> "torch.testing._internal.common_dtype" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.fft" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.fft" -> "torch.testing._internal.opinfo.core" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.fft" -> "torch.testing._internal.opinfo.refs" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.linalg" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.linalg" -> "torch.testing" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.linalg" -> "torch.testing._internal.common_cuda" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.linalg" -> "torch.testing._internal.common_device_type" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.linalg" -> "torch.testing._internal.common_dtype" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.linalg" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.linalg" -> "torch.testing._internal.opinfo.core" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.linalg" -> "torch.testing._internal.opinfo.refs" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.nested" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.nested" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.nested" -> "torch.nested._internal.ops" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.nested" -> "torch.testing._internal.common_methods_invocations" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.nested" -> "torch.testing._internal.opinfo.core" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.nested" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.signal" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.signal" -> "torch.testing._internal.common_dtype" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.signal" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.signal" -> "torch.testing._internal.opinfo.core" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.sparse" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.sparse" -> "torch.testing" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.sparse" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.sparse" -> "torch.testing._internal.opinfo.core" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.special" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.special" -> "torch.testing" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.special" -> "torch.testing._internal.common_device_type" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.special" -> "torch.testing._internal.common_dtype" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.special" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.special" -> "torch.testing._internal.opinfo.core" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.special" -> "torch.testing._internal.opinfo.refs" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.definitions.special" -> "torch.testing._internal.opinfo.utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.refs" -> "torch.testing._internal.opinfo.core" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.utils" -> "torch.testing._internal.common_cuda" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.utils" -> "torch.testing._internal.common_dtype" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.opinfo.utils" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests" -> "torch.testing._internal.optests.aot_autograd" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests" -> "torch.testing._internal.optests.autograd_registration" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests" -> "torch.testing._internal.optests.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests" -> "torch.testing._internal.optests.generate_tests" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests" -> "torch.testing._internal.optests.make_fx" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests.aot_autograd" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests.aot_autograd" -> "torch.testing._internal.optests.make_fx" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests.aot_autograd" -> "torch.testing._utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests.aot_autograd" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests.autograd_registration" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests.autograd_registration" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests.fake_tensor" -> "torch._subclasses" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests.generate_tests" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests.generate_tests" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests.generate_tests" -> "torch._library.custom_ops" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests.generate_tests" -> "torch._subclasses.schema_check_mode" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests.generate_tests" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests.generate_tests" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests.generate_tests" -> "torch.testing._internal.optests" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests.generate_tests" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests.make_fx" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests.make_fx" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests.make_fx" -> "torch.testing._utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.optests.make_fx" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.quantization_torch_package_models" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.quantization_torch_package_models" -> "torch.nn" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.static_module" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.subclasses" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.subclasses" -> "torch._higher_order_ops.cond" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.subclasses" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.subclasses" -> "torch.testing._internal.two_tensor" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.subclasses" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.subclasses" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.test_module.no_future_div" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.torchbind_impls" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.torchbind_impls" -> "torch.testing._internal.common_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.triton_utils" -> "torch.testing._internal.inductor_utils" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.triton_utils" -> "torch.utils._triton" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.two_tensor" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.two_tensor" -> "torch._higher_order_ops.cond" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.two_tensor" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.testing._internal.two_tensor" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.testing._utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.torch_version" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.torch_version" -> "torch._vendor.packaging.version" [arrowhead="open", arrowtail="none"];
"torch.types" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.utils" -> "torch.utils.backcompat" [arrowhead="open", arrowtail="none"];
"torch.utils" -> "torch.utils.backend_registration" [arrowhead="open", arrowtail="none"];
"torch.utils" -> "torch.utils.collect_env" [arrowhead="open", arrowtail="none"];
"torch.utils" -> "torch.utils.cpp_backtrace" [arrowhead="open", arrowtail="none"];
"torch.utils" -> "torch.utils.data" [arrowhead="open", arrowtail="none"];
"torch.utils" -> "torch.utils.deterministic" [arrowhead="open", arrowtail="none"];
"torch.utils" -> "torch.utils.hooks" [arrowhead="open", arrowtail="none"];
"torch.utils" -> "torch.utils.throughput_benchmark" [arrowhead="open", arrowtail="none"];
"torch.utils._config_module" -> "torch._utils_internal" [arrowhead="open", arrowtail="none"];
"torch.utils._content_store" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils._content_store" -> "torch._dynamo" [arrowhead="open", arrowtail="none"];
"torch.utils._content_store" -> "torch._dynamo.utils" [arrowhead="open", arrowtail="none"];
"torch.utils._content_store" -> "torch._prims" [arrowhead="open", arrowtail="none"];
"torch.utils._content_store" -> "torch.multiprocessing.reductions" [arrowhead="open", arrowtail="none"];
"torch.utils._content_store" -> "torch.nn.functional" [arrowhead="open", arrowtail="none"];
"torch.utils._cxx_pytree" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.utils._device" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils._device" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch.utils._device" -> "torch.utils._contextlib" [arrowhead="open", arrowtail="none"];
"torch.utils._filelock" -> "torch.monitor" [arrowhead="open", arrowtail="none"];
"torch.utils._foreach_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils._foreach_utils" -> "torch.autograd.grad_mode" [arrowhead="open", arrowtail="none"];
"torch.utils._import_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils._mode_utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils._python_dispatch" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils._python_dispatch" -> "torch._ops" [arrowhead="open", arrowtail="none"];
"torch.utils._python_dispatch" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch.utils._python_dispatch" -> "torch._subclasses.schema_check_mode" [arrowhead="open", arrowtail="none"];
"torch.utils._python_dispatch" -> "torch.fx.experimental.proxy_tensor" [arrowhead="open", arrowtail="none"];
"torch.utils._pytree" -> "torch._vendor.packaging.version" [arrowhead="open", arrowtail="none"];
"torch.utils._sympy.functions" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none"];
"torch.utils._sympy.functions" -> "torch.utils._sympy.numbers" [arrowhead="open", arrowtail="none"];
"torch.utils._sympy.interp" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils._sympy.interp" -> "torch.utils._sympy.functions" [arrowhead="open", arrowtail="none"];
"torch.utils._sympy.reference" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils._sympy.reference" -> "torch.utils._sympy.functions" [arrowhead="open", arrowtail="none"];
"torch.utils._sympy.solve" -> "torch.utils._sympy.functions" [arrowhead="open", arrowtail="none"];
"torch.utils._sympy.value_ranges" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils._sympy.value_ranges" -> "torch._logging" [arrowhead="open", arrowtail="none"];
"torch.utils._sympy.value_ranges" -> "torch._prims_common" [arrowhead="open", arrowtail="none"];
"torch.utils._sympy.value_ranges" -> "torch.utils._sympy.functions" [arrowhead="open", arrowtail="none"];
"torch.utils._sympy.value_ranges" -> "torch.utils._sympy.interp" [arrowhead="open", arrowtail="none"];
"torch.utils._sympy.value_ranges" -> "torch.utils._sympy.numbers" [arrowhead="open", arrowtail="none"];
"torch.utils._triton" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils._triton" -> "torch._dynamo.device_interface" [arrowhead="open", arrowtail="none"];
"torch.utils.backend_registration" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.backend_registration" -> "torch.overrides" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark" -> "torch.utils.benchmark.utils.common" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark" -> "torch.utils.benchmark.utils.compare" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark" -> "torch.utils.benchmark.utils.fuzzer" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark" -> "torch.utils.benchmark.utils.sparse_fuzzer" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark" -> "torch.utils.benchmark.utils.timer" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark" -> "torch.utils.benchmark.utils.valgrind_wrapper.timer_interface" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.examples.compare" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.examples.compare" -> "torch.utils.benchmark" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.examples.fuzzer" -> "torch.utils.benchmark" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.examples.op_benchmark" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.examples.op_benchmark" -> "torch.utils.benchmark" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.examples.op_benchmark" -> "torch.utils.benchmark.op_fuzzers.binary" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.examples.op_benchmark" -> "torch.utils.benchmark.op_fuzzers.unary" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.examples.simple_timeit" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.examples.simple_timeit" -> "torch.utils.benchmark" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.examples.spectral_ops_fuzz_test" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.examples.spectral_ops_fuzz_test" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.examples.spectral_ops_fuzz_test" -> "torch.utils.benchmark" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.examples.spectral_ops_fuzz_test" -> "torch.utils.benchmark.op_fuzzers.spectral" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.op_fuzzers.binary" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.op_fuzzers.binary" -> "torch.utils.benchmark" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.op_fuzzers.sparse_binary" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.op_fuzzers.sparse_binary" -> "torch.utils.benchmark" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.op_fuzzers.sparse_unary" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.op_fuzzers.sparse_unary" -> "torch.utils.benchmark" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.op_fuzzers.spectral" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.op_fuzzers.spectral" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.op_fuzzers.spectral" -> "torch.utils.benchmark" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.op_fuzzers.unary" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.op_fuzzers.unary" -> "torch.utils.benchmark" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.common" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.compare" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.compare" -> "torch.utils.benchmark.utils" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.compare" -> "torch.utils.benchmark.utils.common" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.compile" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.compile" -> "torch._dynamo.testing" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.compile" -> "torch.utils.benchmark" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.cpp_jit" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.cpp_jit" -> "torch.utils" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.cpp_jit" -> "torch.utils.benchmark.utils._stubs" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.cpp_jit" -> "torch.utils.benchmark.utils.common" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.cpp_jit" -> "torch.utils.cpp_extension" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.fuzzer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.sparse_fuzzer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.sparse_fuzzer" -> "torch.utils.benchmark" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.timer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.timer" -> "torch.utils.benchmark.utils" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.timer" -> "torch.utils.benchmark.utils._stubs" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.timer" -> "torch.utils.benchmark.utils.common" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.timer" -> "torch.utils.benchmark.utils.cpp_jit" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.timer" -> "torch.utils.benchmark.utils.valgrind_wrapper" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.timer" -> "torch.utils.benchmark.utils.valgrind_wrapper.timer_interface" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.valgrind_wrapper.timer_interface" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.valgrind_wrapper.timer_interface" -> "torch.utils.benchmark.utils" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.valgrind_wrapper.timer_interface" -> "torch.utils.benchmark.utils._stubs" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.valgrind_wrapper.timer_interface" -> "torch.utils.benchmark.utils.common" [arrowhead="open", arrowtail="none"];
"torch.utils.benchmark.utils.valgrind_wrapper.timer_interface" -> "torch.utils.benchmark.utils.cpp_jit" [arrowhead="open", arrowtail="none"];
"torch.utils.bottleneck.__main__" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.bottleneck.__main__" -> "torch.autograd" [arrowhead="open", arrowtail="none"];
"torch.utils.bottleneck.__main__" -> "torch.autograd.profiler" [arrowhead="open", arrowtail="none"];
"torch.utils.bottleneck.__main__" -> "torch.utils.collect_env" [arrowhead="open", arrowtail="none"];
"torch.utils.bundled_inputs" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.bundled_inputs" -> "torch.jit._recursive" [arrowhead="open", arrowtail="none"];
"torch.utils.checkpoint" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.checkpoint" -> "torch._functorch._aot_autograd.functional_utils" [arrowhead="open", arrowtail="none"];
"torch.utils.checkpoint" -> "torch.fx.traceback" [arrowhead="open", arrowtail="none"];
"torch.utils.checkpoint" -> "torch.testing._internal.logging_tensor" [arrowhead="open", arrowtail="none"];
"torch.utils.checkpoint" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.utils.checkpoint" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.utils.collect_env" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.collect_env" -> "torch.backends.xnnpack" [arrowhead="open", arrowtail="none"];
"torch.utils.cpp_extension" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.cpp_extension" -> "torch.torch_version" [arrowhead="open", arrowtail="none"];
"torch.utils.cpp_extension" -> "torch.utils._cpp_extension_versioner" [arrowhead="open", arrowtail="none"];
"torch.utils.cpp_extension" -> "torch.utils.file_baton" [arrowhead="open", arrowtail="none"];
"torch.utils.cpp_extension" -> "torch.utils.hipify" [arrowhead="open", arrowtail="none"];
"torch.utils.cpp_extension" -> "torch.utils.hipify.hipify_python" [arrowhead="open", arrowtail="none"];
"torch.utils.cpp_extension" -> "torch.utils.hipify.hipify_python" [arrowhead="open", arrowtail="none"];
"torch.utils.data" -> "torch.utils.data.dataloader" [arrowhead="open", arrowtail="none"];
"torch.utils.data" -> "torch.utils.data.datapipes._decorator" [arrowhead="open", arrowtail="none"];
"torch.utils.data" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data" -> "torch.utils.data.dataset" [arrowhead="open", arrowtail="none"];
"torch.utils.data" -> "torch.utils.data.distributed" [arrowhead="open", arrowtail="none"];
"torch.utils.data" -> "torch.utils.data.sampler" [arrowhead="open", arrowtail="none"];
"torch.utils.data._utils" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.utils.data._utils.collate" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.data._utils.pin_memory" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.data._utils.pin_memory" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.utils.data._utils.worker" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.data._utils.worker" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.utils.data._utils.worker" -> "torch.utils.data" [arrowhead="open", arrowtail="none"];
"torch.utils.data._utils.worker" -> "torch.utils.data.graph_settings" [arrowhead="open", arrowtail="none"];
"torch.utils.data.dataloader" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.data.dataloader" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.utils.data.dataloader" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.utils.data.dataloader" -> "torch.utils.data" [arrowhead="open", arrowtail="none"];
"torch.utils.data.dataloader" -> "torch.utils.data._utils" [arrowhead="open", arrowtail="none"];
"torch.utils.data.dataloader" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.dataloader" -> "torch.utils.data.dataset" [arrowhead="open", arrowtail="none"];
"torch.utils.data.dataloader" -> "torch.utils.data.sampler" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes" -> "torch.utils.data.datapipes" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes" -> "torch.utils.data.datapipes.dataframe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes" -> "torch.utils.data.datapipes.iter" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes" -> "torch.utils.data.datapipes.map" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes._decorator" -> "torch.utils.data.datapipes._typing" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes._decorator" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes._hook_iterator" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes._typing" -> "torch.utils.data.datapipes._hook_iterator" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.dataframe" -> "torch.utils.data.datapipes.dataframe.dataframes" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.dataframe" -> "torch.utils.data.datapipes.dataframe.datapipes" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.dataframe.dataframes" -> "torch.utils.data.datapipes._decorator" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.dataframe.dataframes" -> "torch.utils.data.datapipes.dataframe.structures" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.dataframe.dataframes" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.dataframe.datapipes" -> "torch.utils.data.datapipes._decorator" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.dataframe.datapipes" -> "torch.utils.data.datapipes.dataframe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.dataframe.datapipes" -> "torch.utils.data.datapipes.dataframe.dataframe_wrapper" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.dataframe.datapipes" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.dataframe.structures" -> "torch.utils.data.datapipes.dataframe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.dataframe.structures" -> "torch.utils.data.datapipes.dataframe.dataframe_wrapper" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.dataframe.structures" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.datapipe" -> "torch.utils._import_utils" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.datapipe" -> "torch.utils.data.datapipes._hook_iterator" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.datapipe" -> "torch.utils.data.datapipes._typing" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.datapipe" -> "torch.utils.data.datapipes.utils.common" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.datapipe" -> "torch.utils.data.dataset" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter" -> "torch.utils.data.datapipes.iter.callable" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter" -> "torch.utils.data.datapipes.iter.combinatorics" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter" -> "torch.utils.data.datapipes.iter.combining" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter" -> "torch.utils.data.datapipes.iter.filelister" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter" -> "torch.utils.data.datapipes.iter.fileopener" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter" -> "torch.utils.data.datapipes.iter.grouping" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter" -> "torch.utils.data.datapipes.iter.routeddecoder" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter" -> "torch.utils.data.datapipes.iter.selecting" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter" -> "torch.utils.data.datapipes.iter.sharding" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter" -> "torch.utils.data.datapipes.iter.streamreader" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter" -> "torch.utils.data.datapipes.iter.utils" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.callable" -> "torch.utils.data._utils.collate" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.callable" -> "torch.utils.data.datapipes._decorator" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.callable" -> "torch.utils.data.datapipes.dataframe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.callable" -> "torch.utils.data.datapipes.dataframe.dataframe_wrapper" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.callable" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.callable" -> "torch.utils.data.datapipes.utils.common" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.combinatorics" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.combinatorics" -> "torch.utils.data.datapipes._decorator" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.combinatorics" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.combinatorics" -> "torch.utils.data.sampler" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.combining" -> "torch.utils.data.datapipes._decorator" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.combining" -> "torch.utils.data.datapipes._hook_iterator" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.combining" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.combining" -> "torch.utils.data.datapipes.utils.common" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.filelister" -> "torch.utils.data.datapipes._decorator" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.filelister" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.filelister" -> "torch.utils.data.datapipes.iter.utils" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.filelister" -> "torch.utils.data.datapipes.utils.common" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.fileopener" -> "torch.utils.data.datapipes._decorator" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.fileopener" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.fileopener" -> "torch.utils.data.datapipes.utils.common" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.grouping" -> "torch.utils.data.datapipes._decorator" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.grouping" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.grouping" -> "torch.utils.data.datapipes.iter.sharding" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.grouping" -> "torch.utils.data.datapipes.utils.common" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.routeddecoder" -> "torch.utils.data.datapipes._decorator" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.routeddecoder" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.routeddecoder" -> "torch.utils.data.datapipes.utils.common" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.routeddecoder" -> "torch.utils.data.datapipes.utils.decoder" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.selecting" -> "torch.utils.data.datapipes._decorator" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.selecting" -> "torch.utils.data.datapipes.dataframe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.selecting" -> "torch.utils.data.datapipes.dataframe.dataframe_wrapper" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.selecting" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.selecting" -> "torch.utils.data.datapipes.utils.common" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.sharding" -> "torch.utils.data.datapipes._decorator" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.sharding" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.streamreader" -> "torch.utils.data.datapipes._decorator" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.streamreader" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.iter.utils" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.map" -> "torch.utils.data.datapipes.map.callable" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.map" -> "torch.utils.data.datapipes.map.combinatorics" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.map" -> "torch.utils.data.datapipes.map.combining" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.map" -> "torch.utils.data.datapipes.map.grouping" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.map" -> "torch.utils.data.datapipes.map.utils" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.map.callable" -> "torch.utils.data.datapipes._decorator" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.map.callable" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.map.callable" -> "torch.utils.data.datapipes.utils.common" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.map.combinatorics" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.map.combinatorics" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.map.combining" -> "torch.utils.data.datapipes._decorator" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.map.combining" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.map.grouping" -> "torch.utils.data.datapipes._decorator" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.map.grouping" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.map.utils" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.utils.common" -> "torch.utils._import_utils" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.utils.decoder" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.utils.decoder" -> "torch.utils.data.datapipes.utils.common" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.utils.snapshot" -> "torch.utils.data.datapipes._hook_iterator" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.utils.snapshot" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.datapipes.utils.snapshot" -> "torch.utils.data.graph_settings" [arrowhead="open", arrowtail="none"];
"torch.utils.data.dataset" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.data.distributed" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.data.distributed" -> "torch.distributed" [arrowhead="open", arrowtail="none"];
"torch.utils.data.distributed" -> "torch.utils.data.dataset" [arrowhead="open", arrowtail="none"];
"torch.utils.data.distributed" -> "torch.utils.data.sampler" [arrowhead="open", arrowtail="none"];
"torch.utils.data.graph" -> "torch.utils._import_utils" [arrowhead="open", arrowtail="none"];
"torch.utils.data.graph" -> "torch.utils.data.datapipes.datapipe" [arrowhead="open", arrowtail="none"];
"torch.utils.data.graph_settings" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.data.graph_settings" -> "torch.utils.data.datapipes.iter.sharding" [arrowhead="open", arrowtail="none"];
"torch.utils.data.graph_settings" -> "torch.utils.data.graph" [arrowhead="open", arrowtail="none"];
"torch.utils.data.sampler" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.deterministic" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.dlpack" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.flop_counter" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.flop_counter" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none"];
"torch.utils.flop_counter" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none"];
"torch.utils.flop_counter" -> "torch.utils._python_dispatch" [arrowhead="open", arrowtail="none"];
"torch.utils.flop_counter" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.utils.flop_counter" -> "torch.utils.module_tracker" [arrowhead="open", arrowtail="none"];
"torch.utils.hipify" -> "torch.utils.hipify.version" [arrowhead="open", arrowtail="none"];
"torch.utils.hipify.cuda_to_hip_mappings" -> "torch.utils.hipify.constants" [arrowhead="open", arrowtail="none"];
"torch.utils.hipify.hipify_python" -> "torch.utils.hipify.cuda_to_hip_mappings" [arrowhead="open", arrowtail="none"];
"torch.utils.hooks" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.jit.log_extract" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.jit.log_extract" -> "torch.utils.benchmark" [arrowhead="open", arrowtail="none"];
"torch.utils.mkldnn" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.mobile_optimizer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.model_dump" -> "torch.utils.show_pickle" [arrowhead="open", arrowtail="none"];
"torch.utils.model_zoo" -> "torch.hub" [arrowhead="open", arrowtail="none"];
"torch.utils.module_tracker" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.module_tracker" -> "torch.autograd.graph" [arrowhead="open", arrowtail="none"];
"torch.utils.module_tracker" -> "torch.nn.modules.module" [arrowhead="open", arrowtail="none"];
"torch.utils.module_tracker" -> "torch.utils._pytree" [arrowhead="open", arrowtail="none"];
"torch.utils.tensorboard" -> "torch._vendor.packaging.version" [arrowhead="open", arrowtail="none"];
"torch.utils.tensorboard" -> "torch.utils.tensorboard.writer" [arrowhead="open", arrowtail="none"];
"torch.utils.tensorboard._convert_np" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.tensorboard._embedding" -> "torch.utils.tensorboard._convert_np" [arrowhead="open", arrowtail="none"];
"torch.utils.tensorboard._embedding" -> "torch.utils.tensorboard._utils" [arrowhead="open", arrowtail="none"];
"torch.utils.tensorboard._pytorch_graph" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.tensorboard._pytorch_graph" -> "torch.utils.tensorboard._proto_graph" [arrowhead="open", arrowtail="none"];
"torch.utils.tensorboard.summary" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.tensorboard.summary" -> "torch.utils.tensorboard._convert_np" [arrowhead="open", arrowtail="none"];
"torch.utils.tensorboard.summary" -> "torch.utils.tensorboard._utils" [arrowhead="open", arrowtail="none"];
"torch.utils.tensorboard.writer" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.tensorboard.writer" -> "torch.utils.tensorboard._convert_np" [arrowhead="open", arrowtail="none"];
"torch.utils.tensorboard.writer" -> "torch.utils.tensorboard._embedding" [arrowhead="open", arrowtail="none"];
"torch.utils.tensorboard.writer" -> "torch.utils.tensorboard._onnx_graph" [arrowhead="open", arrowtail="none"];
"torch.utils.tensorboard.writer" -> "torch.utils.tensorboard._pytorch_graph" [arrowhead="open", arrowtail="none"];
"torch.utils.tensorboard.writer" -> "torch.utils.tensorboard._utils" [arrowhead="open", arrowtail="none"];
"torch.utils.tensorboard.writer" -> "torch.utils.tensorboard.summary" [arrowhead="open", arrowtail="none"];
"torch.utils.viz._cycles" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.utils.viz._cycles" -> "torch.cuda._memory_viz" [arrowhead="open", arrowtail="none"];
"torch.utils.weak" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.xpu" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.xpu" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.xpu" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.xpu" -> "torch.random" [arrowhead="open", arrowtail="none"];
"torch.xpu" -> "torch.xpu.memory" [arrowhead="open", arrowtail="none"];
"torch.xpu" -> "torch.xpu.streams" [arrowhead="open", arrowtail="none"];
"torch.xpu._gpu_trace" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.xpu._utils" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.xpu._utils" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch.xpu.memory" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.xpu.memory" -> "torch.types" [arrowhead="open", arrowtail="none"];
"torch.xpu.random" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.xpu.streams" -> "torch" [arrowhead="open", arrowtail="none"];
"torch.xpu.streams" -> "torch._utils" [arrowhead="open", arrowtail="none"];
"torch" -> "torch.types" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._decomp" -> "torch.export.decomp_utils" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.compiled_autograd" -> "torch.fx.proxy" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.convert_frame" -> "torch._dynamo.backends.registry" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.convert_frame" -> "torch._dynamo.output_graph" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.convert_frame" -> "torch._dynamo.repro.after_dynamo" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.convert_frame" -> "torch._dynamo.variables.builder" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.decorators" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.decorators" -> "torch._dynamo.variables" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.eval_frame" -> "torch._dynamo.types" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.eval_frame" -> "torch._subclasses" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.graph_region_tracker" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.output_graph" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.pgo" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.repro.after_aot" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.trace_rules" -> "torch._dynamo.variables.base" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.variables.builder" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.variables.builtin" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.variables.constant" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.variables.ctx_manager" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.variables.dicts" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.variables.distributed" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.variables.functions" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.variables.higher_order_ops" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.variables.iter" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.variables.lists" -> "torch._dynamo.codegen" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.variables.lists" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.variables.misc" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.variables.nn_module" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.variables.optimizer" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.variables.sdpa" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.variables.tensor" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.variables.torch" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.variables.torch_function" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._dynamo.variables.user_defined" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._export.passes.collect_tracepoints_pass" -> "torch.export.graph_signature" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._export.passes.replace_autocast_with_hop_pass" -> "torch.export.graph_signature" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._export.passes.replace_set_grad_with_hop_pass" -> "torch.export.graph_signature" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._export.passes.replace_with_hop_pass_util" -> "torch._ops" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._export.passes.replace_with_hop_pass_util" -> "torch.export.graph_signature" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._export.utils" -> "torch._ops" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._export.utils" -> "torch.export" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._export.utils" -> "torch.export.graph_signature" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._export.verifier" -> "torch.export.exported_program" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._functorch._aot_autograd.autograd_cache" -> "torch._inductor.compile_fx" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._functorch._aot_autograd.autograd_cache" -> "torch._inductor.remote_cache" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._functorch._aot_autograd.autograd_cache" -> "torch.fx.node" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._functorch.config" -> "torch.utils._config_typing" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._higher_order_ops.triton_kernel_wrap" -> "torch._dynamo.symbolic_convert" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._higher_order_ops.triton_kernel_wrap" -> "torch._dynamo.variables.constant" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._higher_order_ops.triton_kernel_wrap" -> "torch._dynamo.variables.functions" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._higher_order_ops.triton_kernel_wrap" -> "torch._subclasses.functional_tensor" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._higher_order_ops.triton_kernel_wrap" -> "torch.fx.proxy" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._higher_order_ops.triton_kernel_wrap" -> "torch.utils._triton" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.async_compile" -> "torch._inductor.runtime.hints" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.autotune_process" -> "torch._inductor.codegen.common" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.autotune_process" -> "torch._inductor.select_algorithm" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.choices" -> "torch._inductor.codegen.simd_kernel_features" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.choices" -> "torch._inductor.codegen.triton" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.codecache" -> "torch._inductor.graph" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.codecache" -> "torch._inductor.ir" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.codecache" -> "torch._inductor.output_code" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.codecache" -> "torch._inductor.runtime.hints" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.codecache" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.codegen.rocm.rocm_kernel" -> "torch._inductor.codegen.rocm.rocm_template" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.comms" -> "torch._inductor.scheduler" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.compile_fx" -> "torch._functorch._aot_autograd.schemas" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.compile_fx" -> "torch._ops" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.cudagraph_trees" -> "torch._inductor.utils" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.cudagraph_trees" -> "torch.types" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.dtype_propagation" -> "torch._inductor.loop_body" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.graph" -> "torch._higher_order_ops.effects" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.ir" -> "torch._inductor.codegen.cuda.cuda_template" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.ir" -> "torch._inductor.graph" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.ir" -> "torch.fx.node" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.memory" -> "torch._inductor.dependencies" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.metrics" -> "torch._inductor.scheduler" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.output_code" -> "torch._inductor" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.output_code" -> "torch._inductor.graph" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.output_code" -> "torch._inductor.triton_bundler" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.select_algorithm" -> "torch._inductor.codegen.simd" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.utils" -> "torch._prims_common" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.virtualized" -> "torch._inductor.codegen.cpp_utils" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.virtualized" -> "torch._inductor.debug" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.virtualized" -> "torch._inductor.graph" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.virtualized" -> "torch._inductor.loop_body" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._inductor.virtualized" -> "torch._subclasses" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._numpy._reductions_impl" -> "torch._numpy._normalizations" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._subclasses._fake_tensor_utils" -> "torch._subclasses.fake_tensor" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._subclasses._fake_tensor_utils" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._subclasses.fake_tensor" -> "torch._guards" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._subclasses.fake_tensor" -> "torch._ops" [arrowhead="open", arrowtail="none", style="dashed"];
"torch._subclasses.meta_utils" -> "torch._guards" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.ao.ns._numeric_suite_fx" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.ao.ns.fx.qconfig_multi_mapping" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.ao.quantization.backend_config.backend_config" -> "torch.ao.quantization.utils" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.ao.quantization.pt2e.qat_utils" -> "torch.fx.passes.utils.matcher_with_name_node_map_utils" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.ao.quantization.quantizer.composable_quantizer" -> "torch.fx" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.ao.quantization.quantizer.x86_inductor_quantizer" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.ao.quantization.quantizer.xnnpack_quantizer" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.ao.quantization.quantizer.xnnpack_quantizer" -> "torch.fx" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.ao.quantization.quantizer.xpu_inductor_quantizer" -> "torch.ao.quantization.qconfig" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.autograd.graph" -> "torch._ops" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.distributed._shard.sharded_tensor" -> "torch.distributed._shard.sharding_spec" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.distributed._shard.sharded_tensor.api" -> "torch.distributed._shard.metadata" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.distributed._shard.sharded_tensor.utils" -> "torch.distributed._shard.metadata" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.distributed._shard.sharding_spec.api" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.distributed._tools.mem_tracker" -> "torch.utils.hooks" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.distributed._tools.memory_tracker" -> "torch.utils.hooks" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.distributed.checkpoint._dedup_save_plans" -> "torch.distributed.checkpoint.metadata" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.distributed.checkpoint._dedup_tensors" -> "torch.distributed.checkpoint.metadata" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.distributed.checkpoint._sharded_tensor_utils" -> "torch.distributed._shard.sharded_tensor.metadata" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.distributed.elastic.agent.server.local_elastic_agent" -> "torch.distributed.elastic.events.api" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.distributed.fsdp._common_utils" -> "torch.distributed.device_mesh" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.distributed.fsdp._common_utils" -> "torch.distributed.fsdp._flat_param" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.distributed.fsdp._common_utils" -> "torch.distributed.fsdp._fsdp_extensions" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.distributed.fsdp._fully_shard._fsdp_state" -> "torch.distributed.fsdp._fully_shard._fsdp_param" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.distributed.fsdp._init_utils" -> "torch.utils.hooks" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.distributed.fsdp._optim_utils" -> "torch.distributed._shard.sharded_tensor" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.export" -> "torch._ops" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.export" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.export.dynamic_shapes" -> "torch._guards" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.export.exported_program" -> "torch.utils._sympy.value_ranges" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.export.graph_signature" -> "torch._functorch._aot_autograd.schemas" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.fx.experimental.proxy_tensor" -> "torch._ops" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.fx.experimental.proxy_tensor" -> "torch.fx._symbolic_trace" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.fx.experimental.proxy_tensor" -> "torch.types" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.fx.experimental.symbolic_shapes" -> "torch.types" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.fx.graph" -> "torch.fx._symbolic_trace" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.fx.graph" -> "torch.fx.graph_module" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.fx.node" -> "torch.fx.graph" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.fx.operator_schemas" -> "torch.fx.node" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.fx.passes.runtime_assert" -> "torch.fx.experimental.symbolic_shapes" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.fx.subgraph_rewriter" -> "torch.fx.passes.utils.matcher_with_name_node_map_utils" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.masked._ops" -> "torch.types" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.masked.maskedtensor._ops_refs" -> "torch._ops" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.monitor" -> "torch.utils.tensorboard" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.nn.functional" -> "torch.types" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.nn.parallel.distributed" -> "torch.utils.hooks" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.onnx._internal.exporter._decomp" -> "torch.onnx._internal.exporter" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.onnx._internal.exporter._testing" -> "torch.onnx._internal.exporter" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.onnx._internal.exporter._verification" -> "torch.onnx._internal.exporter" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.onnx._internal.fx._pass" -> "torch._subclasses" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.onnx._internal.fx.onnxfunction_dispatcher" -> "torch.onnx" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.onnx.errors" -> "torch" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.onnx.symbolic_helper" -> "torch.types" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.onnx.symbolic_opset9" -> "torch.types" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.package.package_importer" -> "torch.package.glob_group" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.profiler._utils" -> "torch.autograd" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.sparse" -> "torch.types" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.storage" -> "torch._prims_common" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.types" -> "torch.autograd.graph" [arrowhead="open", arrowtail="none", style="dashed"];
"torch.utils.module_tracker" -> "torch.utils.hooks" [arrowhead="open", arrowtail="none", style="dashed"];
}
